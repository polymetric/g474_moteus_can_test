
g474_moteus_can_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005218  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080053f8  080053f8  000063f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800550c  0800550c  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800550c  0800550c  0000650c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005514  08005514  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005514  08005514  00006514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800551c  0800551c  0000651c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005520  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000059c  20000070  0800558c  00007070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  0800558c  0000760c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001846e  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dfc  00000000  00000000  0001f50a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00022308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc6  00000000  00000000  00023270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a568  00000000  00000000  00023e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e61  00000000  00000000  0004e39e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffc03  00000000  00000000  0005f1ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015ee02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004938  00000000  00000000  0015ee48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00163780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	080053e0 	.word	0x080053e0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	080053e0 	.word	0x080053e0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b988 	b.w	80005f8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	468e      	mov	lr, r1
 8000308:	4604      	mov	r4, r0
 800030a:	4688      	mov	r8, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d962      	bls.n	80003dc <__udivmoddi4+0xdc>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	b14e      	cbz	r6, 8000330 <__udivmoddi4+0x30>
 800031c:	f1c6 0320 	rsb	r3, r6, #32
 8000320:	fa01 f806 	lsl.w	r8, r1, r6
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	40b7      	lsls	r7, r6
 800032a:	ea43 0808 	orr.w	r8, r3, r8
 800032e:	40b4      	lsls	r4, r6
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fbb8 f1fe 	udiv	r1, r8, lr
 800033c:	0c23      	lsrs	r3, r4, #16
 800033e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000346:	fb01 f20c 	mul.w	r2, r1, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x62>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f101 30ff 	add.w	r0, r1, #4294967295
 8000354:	f080 80ea 	bcs.w	800052c <__udivmoddi4+0x22c>
 8000358:	429a      	cmp	r2, r3
 800035a:	f240 80e7 	bls.w	800052c <__udivmoddi4+0x22c>
 800035e:	3902      	subs	r1, #2
 8000360:	443b      	add	r3, r7
 8000362:	1a9a      	subs	r2, r3, r2
 8000364:	b2a3      	uxth	r3, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000372:	fb00 fc0c 	mul.w	ip, r0, ip
 8000376:	459c      	cmp	ip, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x8e>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000380:	f080 80d6 	bcs.w	8000530 <__udivmoddi4+0x230>
 8000384:	459c      	cmp	ip, r3
 8000386:	f240 80d3 	bls.w	8000530 <__udivmoddi4+0x230>
 800038a:	443b      	add	r3, r7
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000392:	eba3 030c 	sub.w	r3, r3, ip
 8000396:	2100      	movs	r1, #0
 8000398:	b11d      	cbz	r5, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40f3      	lsrs	r3, r6
 800039c:	2200      	movs	r2, #0
 800039e:	e9c5 3200 	strd	r3, r2, [r5]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d905      	bls.n	80003b6 <__udivmoddi4+0xb6>
 80003aa:	b10d      	cbz	r5, 80003b0 <__udivmoddi4+0xb0>
 80003ac:	e9c5 0100 	strd	r0, r1, [r5]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4608      	mov	r0, r1
 80003b4:	e7f5      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003b6:	fab3 f183 	clz	r1, r3
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d146      	bne.n	800044c <__udivmoddi4+0x14c>
 80003be:	4573      	cmp	r3, lr
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xc8>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 8105 	bhi.w	80005d2 <__udivmoddi4+0x2d2>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4690      	mov	r8, r2
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	d0e5      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003d6:	e9c5 4800 	strd	r4, r8, [r5]
 80003da:	e7e2      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f000 8090 	beq.w	8000502 <__udivmoddi4+0x202>
 80003e2:	fab2 f682 	clz	r6, r2
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f040 80a4 	bne.w	8000534 <__udivmoddi4+0x234>
 80003ec:	1a8a      	subs	r2, r1, r2
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	b280      	uxth	r0, r0
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000406:	fb04 f20c 	mul.w	r2, r4, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x11e>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x11c>
 8000416:	429a      	cmp	r2, r3
 8000418:	f200 80e0 	bhi.w	80005dc <__udivmoddi4+0x2dc>
 800041c:	46c4      	mov	ip, r8
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	fbb3 f2fe 	udiv	r2, r3, lr
 8000424:	fb0e 3312 	mls	r3, lr, r2, r3
 8000428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800042c:	fb02 f404 	mul.w	r4, r2, r4
 8000430:	429c      	cmp	r4, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x144>
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	f102 30ff 	add.w	r0, r2, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x142>
 800043c:	429c      	cmp	r4, r3
 800043e:	f200 80ca 	bhi.w	80005d6 <__udivmoddi4+0x2d6>
 8000442:	4602      	mov	r2, r0
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0x98>
 800044c:	f1c1 0620 	rsb	r6, r1, #32
 8000450:	408b      	lsls	r3, r1
 8000452:	fa22 f706 	lsr.w	r7, r2, r6
 8000456:	431f      	orrs	r7, r3
 8000458:	fa0e f401 	lsl.w	r4, lr, r1
 800045c:	fa20 f306 	lsr.w	r3, r0, r6
 8000460:	fa2e fe06 	lsr.w	lr, lr, r6
 8000464:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000468:	4323      	orrs	r3, r4
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	fa1f fc87 	uxth.w	ip, r7
 8000472:	fbbe f0f9 	udiv	r0, lr, r9
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fb09 ee10 	mls	lr, r9, r0, lr
 800047c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000480:	fb00 fe0c 	mul.w	lr, r0, ip
 8000484:	45a6      	cmp	lr, r4
 8000486:	fa02 f201 	lsl.w	r2, r2, r1
 800048a:	d909      	bls.n	80004a0 <__udivmoddi4+0x1a0>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000492:	f080 809c 	bcs.w	80005ce <__udivmoddi4+0x2ce>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f240 8099 	bls.w	80005ce <__udivmoddi4+0x2ce>
 800049c:	3802      	subs	r0, #2
 800049e:	443c      	add	r4, r7
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	fa1f fe83 	uxth.w	lr, r3
 80004a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ac:	fb09 4413 	mls	r4, r9, r3, r4
 80004b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b8:	45a4      	cmp	ip, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f103 3eff 	add.w	lr, r3, #4294967295
 80004c2:	f080 8082 	bcs.w	80005ca <__udivmoddi4+0x2ca>
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d97f      	bls.n	80005ca <__udivmoddi4+0x2ca>
 80004ca:	3b02      	subs	r3, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004d2:	eba4 040c 	sub.w	r4, r4, ip
 80004d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004da:	4564      	cmp	r4, ip
 80004dc:	4673      	mov	r3, lr
 80004de:	46e1      	mov	r9, ip
 80004e0:	d362      	bcc.n	80005a8 <__udivmoddi4+0x2a8>
 80004e2:	d05f      	beq.n	80005a4 <__udivmoddi4+0x2a4>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x1fe>
 80004e6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ea:	eb64 0409 	sbc.w	r4, r4, r9
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e74f      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000502:	fbb1 fcf2 	udiv	ip, r1, r2
 8000506:	0c01      	lsrs	r1, r0, #16
 8000508:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800050c:	b280      	uxth	r0, r0
 800050e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000512:	463b      	mov	r3, r7
 8000514:	4638      	mov	r0, r7
 8000516:	463c      	mov	r4, r7
 8000518:	46b8      	mov	r8, r7
 800051a:	46be      	mov	lr, r7
 800051c:	2620      	movs	r6, #32
 800051e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000522:	eba2 0208 	sub.w	r2, r2, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e766      	b.n	80003fa <__udivmoddi4+0xfa>
 800052c:	4601      	mov	r1, r0
 800052e:	e718      	b.n	8000362 <__udivmoddi4+0x62>
 8000530:	4610      	mov	r0, r2
 8000532:	e72c      	b.n	800038e <__udivmoddi4+0x8e>
 8000534:	f1c6 0220 	rsb	r2, r6, #32
 8000538:	fa2e f302 	lsr.w	r3, lr, r2
 800053c:	40b7      	lsls	r7, r6
 800053e:	40b1      	lsls	r1, r6
 8000540:	fa20 f202 	lsr.w	r2, r0, r2
 8000544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000548:	430a      	orrs	r2, r1
 800054a:	fbb3 f8fe 	udiv	r8, r3, lr
 800054e:	b2bc      	uxth	r4, r7
 8000550:	fb0e 3318 	mls	r3, lr, r8, r3
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb08 f904 	mul.w	r9, r8, r4
 800055e:	40b0      	lsls	r0, r6
 8000560:	4589      	cmp	r9, r1
 8000562:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000566:	b280      	uxth	r0, r0
 8000568:	d93e      	bls.n	80005e8 <__udivmoddi4+0x2e8>
 800056a:	1879      	adds	r1, r7, r1
 800056c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x276>
 8000572:	4589      	cmp	r9, r1
 8000574:	d81f      	bhi.n	80005b6 <__udivmoddi4+0x2b6>
 8000576:	eba1 0109 	sub.w	r1, r1, r9
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	fb0e 1119 	mls	r1, lr, r9, r1
 8000586:	b292      	uxth	r2, r2
 8000588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800058c:	4542      	cmp	r2, r8
 800058e:	d229      	bcs.n	80005e4 <__udivmoddi4+0x2e4>
 8000590:	18ba      	adds	r2, r7, r2
 8000592:	f109 31ff 	add.w	r1, r9, #4294967295
 8000596:	d2c4      	bcs.n	8000522 <__udivmoddi4+0x222>
 8000598:	4542      	cmp	r2, r8
 800059a:	d2c2      	bcs.n	8000522 <__udivmoddi4+0x222>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443a      	add	r2, r7
 80005a2:	e7be      	b.n	8000522 <__udivmoddi4+0x222>
 80005a4:	45f0      	cmp	r8, lr
 80005a6:	d29d      	bcs.n	80004e4 <__udivmoddi4+0x1e4>
 80005a8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b0:	3801      	subs	r0, #1
 80005b2:	46e1      	mov	r9, ip
 80005b4:	e796      	b.n	80004e4 <__udivmoddi4+0x1e4>
 80005b6:	eba7 0909 	sub.w	r9, r7, r9
 80005ba:	4449      	add	r1, r9
 80005bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c4:	fb09 f804 	mul.w	r8, r9, r4
 80005c8:	e7db      	b.n	8000582 <__udivmoddi4+0x282>
 80005ca:	4673      	mov	r3, lr
 80005cc:	e77f      	b.n	80004ce <__udivmoddi4+0x1ce>
 80005ce:	4650      	mov	r0, sl
 80005d0:	e766      	b.n	80004a0 <__udivmoddi4+0x1a0>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e6fd      	b.n	80003d2 <__udivmoddi4+0xd2>
 80005d6:	443b      	add	r3, r7
 80005d8:	3a02      	subs	r2, #2
 80005da:	e733      	b.n	8000444 <__udivmoddi4+0x144>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	443b      	add	r3, r7
 80005e2:	e71c      	b.n	800041e <__udivmoddi4+0x11e>
 80005e4:	4649      	mov	r1, r9
 80005e6:	e79c      	b.n	8000522 <__udivmoddi4+0x222>
 80005e8:	eba1 0109 	sub.w	r1, r1, r9
 80005ec:	46c4      	mov	ip, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c4      	b.n	8000582 <__udivmoddi4+0x282>

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
	...

0800062c <_ZNSt14numeric_limitsIdE9quiet_NaNEv>:

      static _GLIBCXX_CONSTEXPR double
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_val(); }

      static _GLIBCXX_CONSTEXPR double
      quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return __builtin_nan(""); }
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
 8000630:	f04f 0200 	mov.w	r2, #0
 8000634:	4b05      	ldr	r3, [pc, #20]	@ (800064c <_ZNSt14numeric_limitsIdE9quiet_NaNEv+0x20>)
 8000636:	ec43 2b17 	vmov	d7, r2, r3
 800063a:	eeb0 0a47 	vmov.f32	s0, s14
 800063e:	eef0 0a67 	vmov.f32	s1, s15
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	7ff80000 	.word	0x7ff80000

08000650 <_ZN6mjbots6moteus6detail14numeric_limitsIsE3maxEv>:
};

template <>
class numeric_limits<int16_t> {
 public:
  static int16_t max() { return 32767; }
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
 8000654:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000658:	4618      	mov	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <_ZN6mjbots6moteus12WriteCanDataC1EPNS0_7CanDataE>:

/// This class can be used to append values to the end of a CAN-FD
/// frame.
class WriteCanData {
 public:
  WriteCanData(CanData* frame) : data_(&frame->data[0]), size_(&frame->size) {}
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
 800066a:	6039      	str	r1, [r7, #0]
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4618      	mov	r0, r3
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <_ZNK6mjbots6moteus12WriteCanData4sizeEv>:
  WriteCanData(uint8_t* data, uint8_t* size) : data_(data), size_(size) {}

  uint8_t size() const { return *size_; }
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	4618      	mov	r0, r3
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <_ZN6mjbots6moteus12WriteCanData12WriteVaruintEm>:
             reinterpret_cast<const char*>(&value),
             sizeof(value));
    *size_ += sizeof(value);
  }

  void WriteVaruint(uint32_t value) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
    while (true) {
      auto this_byte = value & 0x7f;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006b4:	60fb      	str	r3, [r7, #12]
      value >>= 7;
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	09db      	lsrs	r3, r3, #7
 80006ba:	603b      	str	r3, [r7, #0]
      this_byte |= ((value != 0) ? 0x80 : 0x00);
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <_ZN6mjbots6moteus12WriteCanData12WriteVaruintEm+0x22>
 80006c2:	2380      	movs	r3, #128	@ 0x80
 80006c4:	e000      	b.n	80006c8 <_ZN6mjbots6moteus12WriteCanData12WriteVaruintEm+0x24>
 80006c6:	2300      	movs	r3, #0
 80006c8:	68fa      	ldr	r2, [r7, #12]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	60fb      	str	r3, [r7, #12]
      Write<int8_t>(this_byte);
 80006ce:	68f9      	ldr	r1, [r7, #12]
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f000 fee5 	bl	80014a0 <_ZN6mjbots6moteus12WriteCanData5WriteIamEEvT0_>

      if (value == 0) { break; }
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d000      	beq.n	80006de <_ZN6mjbots6moteus12WriteCanData12WriteVaruintEm+0x3a>
    }
 80006dc:	e7e7      	b.n	80006ae <_ZN6mjbots6moteus12WriteCanData12WriteVaruintEm+0xa>
      if (value == 0) { break; }
 80006de:	bf00      	nop
  }
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <_ZN6mjbots6moteus15MultiplexParser14ResolutionSizeENS0_10ResolutionE>:

  uint16_t remaining() const {
    return size_ - offset_;
  }

  static int8_t ResolutionSize(Resolution res) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
    switch (res) {
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	d812      	bhi.n	8000720 <_ZN6mjbots6moteus15MultiplexParser14ResolutionSizeENS0_10ResolutionE+0x38>
 80006fa:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <_ZN6mjbots6moteus15MultiplexParser14ResolutionSizeENS0_10ResolutionE+0x18>)
 80006fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000700:	08000711 	.word	0x08000711
 8000704:	08000715 	.word	0x08000715
 8000708:	08000719 	.word	0x08000719
 800070c:	0800071d 	.word	0x0800071d
      case Resolution::kInt8: return 1;
 8000710:	2301      	movs	r3, #1
 8000712:	e007      	b.n	8000724 <_ZN6mjbots6moteus15MultiplexParser14ResolutionSizeENS0_10ResolutionE+0x3c>
      case Resolution::kInt16: return 2;
 8000714:	2302      	movs	r3, #2
 8000716:	e005      	b.n	8000724 <_ZN6mjbots6moteus15MultiplexParser14ResolutionSizeENS0_10ResolutionE+0x3c>
      case Resolution::kInt32: return 4;
 8000718:	2304      	movs	r3, #4
 800071a:	e003      	b.n	8000724 <_ZN6mjbots6moteus15MultiplexParser14ResolutionSizeENS0_10ResolutionE+0x3c>
      case Resolution::kFloat: return 4;
 800071c:	2304      	movs	r3, #4
 800071e:	e001      	b.n	8000724 <_ZN6mjbots6moteus15MultiplexParser14ResolutionSizeENS0_10ResolutionE+0x3c>
      default: { break; }
 8000720:	bf00      	nop
    }
    return 1;
 8000722:	2301      	movs	r3, #1
  }
 8000724:	4618      	mov	r0, r3
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <_ZN6mjbots6moteus13WriteCombinerC1EPNS0_12WriteCanDataEatPKNS0_10ResolutionEt>:

/// Determines how to group registers when encoding them to minimize
/// the required bytes.
class WriteCombiner {
 public:
  WriteCombiner(WriteCanData* frame,
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	4611      	mov	r1, r2
 800073c:	461a      	mov	r2, r3
 800073e:	460b      	mov	r3, r1
 8000740:	71fb      	strb	r3, [r7, #7]
 8000742:	4613      	mov	r3, r2
 8000744:	80bb      	strh	r3, [r7, #4]
                int8_t base_command,
                uint16_t start_register,
                const Resolution* resolutions,
                uint16_t resolutions_size)
      : frame_(frame),
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	68ba      	ldr	r2, [r7, #8]
 800074a:	601a      	str	r2, [r3, #0]
        base_command_(base_command),
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	79fa      	ldrb	r2, [r7, #7]
 8000750:	711a      	strb	r2, [r3, #4]
        start_register_(start_register),
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	88ba      	ldrh	r2, [r7, #4]
 8000756:	80da      	strh	r2, [r3, #6]
        resolutions_(resolutions),
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	69ba      	ldr	r2, [r7, #24]
 800075c:	609a      	str	r2, [r3, #8]
        resolutions_size_(resolutions_size) {}
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	8bba      	ldrh	r2, [r7, #28]
 8000762:	819a      	strh	r2, [r3, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	2204      	movs	r2, #4
 8000768:	739a      	strb	r2, [r3, #14]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	2200      	movs	r2, #0
 800076e:	821a      	strh	r2, [r3, #16]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	2200      	movs	r2, #0
 8000774:	749a      	strb	r2, [r3, #18]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	4618      	mov	r0, r3
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <_ZN6mjbots6moteus13WriteCombinerD1Ev>:

  ~WriteCombiner() {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    if (offset_ != resolutions_size_) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	8a1a      	ldrh	r2, [r3, #16]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	899b      	ldrh	r3, [r3, #12]
 8000794:	429a      	cmp	r2, r3
 8000796:	d001      	beq.n	800079c <_ZN6mjbots6moteus13WriteCombinerD1Ev+0x18>
      ::abort();
 8000798:	f004 f91e 	bl	80049d8 <abort>
    }
  }
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <_ZNK6mjbots6moteus13WriteCombiner10reply_sizeEv>:

  uint8_t reply_size() const { return reply_size_; }
 80007a6:	b480      	push	{r7}
 80007a8:	b083      	sub	sp, #12
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	7c9b      	ldrb	r3, [r3, #18]
 80007b2:	4618      	mov	r0, r3
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
	...

080007c0 <_ZZN6mjbots6moteus13WriteCombiner10MaybeWriteEvENKUlvE_clEv>:
         i < resolutions_size_ && resolutions_[i] == new_resolution;
         i++) {
      count++;
    }

    int8_t write_command = base_command_ + [&]() {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
      switch (new_resolution) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f993 3000 	ldrsb.w	r3, [r3]
 80007d0:	2b04      	cmp	r3, #4
 80007d2:	d817      	bhi.n	8000804 <_ZZN6mjbots6moteus13WriteCombiner10MaybeWriteEvENKUlvE_clEv+0x44>
 80007d4:	a201      	add	r2, pc, #4	@ (adr r2, 80007dc <_ZZN6mjbots6moteus13WriteCombiner10MaybeWriteEvENKUlvE_clEv+0x1c>)
 80007d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007da:	bf00      	nop
 80007dc:	080007f1 	.word	0x080007f1
 80007e0:	080007f5 	.word	0x080007f5
 80007e4:	080007f9 	.word	0x080007f9
 80007e8:	080007fd 	.word	0x080007fd
 80007ec:	08000801 	.word	0x08000801
        case Resolution::kInt8: return 0x00;
 80007f0:	2300      	movs	r3, #0
 80007f2:	e008      	b.n	8000806 <_ZZN6mjbots6moteus13WriteCombiner10MaybeWriteEvENKUlvE_clEv+0x46>
        case Resolution::kInt16: return 0x04;
 80007f4:	2304      	movs	r3, #4
 80007f6:	e006      	b.n	8000806 <_ZZN6mjbots6moteus13WriteCombiner10MaybeWriteEvENKUlvE_clEv+0x46>
        case Resolution::kInt32: return 0x08;
 80007f8:	2308      	movs	r3, #8
 80007fa:	e004      	b.n	8000806 <_ZZN6mjbots6moteus13WriteCombiner10MaybeWriteEvENKUlvE_clEv+0x46>
        case Resolution::kFloat: return 0x0c;
 80007fc:	230c      	movs	r3, #12
 80007fe:	e002      	b.n	8000806 <_ZZN6mjbots6moteus13WriteCombiner10MaybeWriteEvENKUlvE_clEv+0x46>
        case Resolution::kIgnore: {
          abort();
 8000800:	f004 f8ea 	bl	80049d8 <abort>
        }
      }
      return 0x00;
 8000804:	2300      	movs	r3, #0
    }();
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop

08000810 <_ZN6mjbots6moteus13WriteCombiner10MaybeWriteEv>:
  bool MaybeWrite() {
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b089      	sub	sp, #36	@ 0x24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
    const auto this_offset = offset_;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	8a1b      	ldrh	r3, [r3, #16]
 800081c:	837b      	strh	r3, [r7, #26]
    offset_++;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	8a1b      	ldrh	r3, [r3, #16]
 8000822:	3301      	adds	r3, #1
 8000824:	b29a      	uxth	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	821a      	strh	r2, [r3, #16]
    if (current_resolution_ == resolutions_[this_offset]) {
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f993 200e 	ldrsb.w	r2, [r3, #14]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6899      	ldr	r1, [r3, #8]
 8000834:	8b7b      	ldrh	r3, [r7, #26]
 8000836:	440b      	add	r3, r1
 8000838:	f993 3000 	ldrsb.w	r3, [r3]
 800083c:	429a      	cmp	r2, r3
 800083e:	d108      	bne.n	8000852 <_ZN6mjbots6moteus13WriteCombiner10MaybeWriteEv+0x42>
      return current_resolution_ != Resolution::kIgnore;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8000846:	2b04      	cmp	r3, #4
 8000848:	bf14      	ite	ne
 800084a:	2301      	movne	r3, #1
 800084c:	2300      	moveq	r3, #0
 800084e:	b2db      	uxtb	r3, r3
 8000850:	e093      	b.n	800097a <_ZN6mjbots6moteus13WriteCombiner10MaybeWriteEv+0x16a>
    const auto new_resolution = resolutions_[this_offset];
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	689a      	ldr	r2, [r3, #8]
 8000856:	8b7b      	ldrh	r3, [r7, #26]
 8000858:	4413      	add	r3, r2
 800085a:	f993 3000 	ldrsb.w	r3, [r3]
 800085e:	73fb      	strb	r3, [r7, #15]
    current_resolution_ = new_resolution;
 8000860:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	739a      	strb	r2, [r3, #14]
    if (new_resolution == Resolution::kIgnore) {
 8000868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800086c:	2b04      	cmp	r3, #4
 800086e:	d101      	bne.n	8000874 <_ZN6mjbots6moteus13WriteCombiner10MaybeWriteEv+0x64>
      return false;
 8000870:	2300      	movs	r3, #0
 8000872:	e082      	b.n	800097a <_ZN6mjbots6moteus13WriteCombiner10MaybeWriteEv+0x16a>
    int16_t count = 1;
 8000874:	2301      	movs	r3, #1
 8000876:	83fb      	strh	r3, [r7, #30]
    for (uint16_t i = this_offset + 1;
 8000878:	8b7b      	ldrh	r3, [r7, #26]
 800087a:	3301      	adds	r3, #1
 800087c:	83bb      	strh	r3, [r7, #28]
 800087e:	e008      	b.n	8000892 <_ZN6mjbots6moteus13WriteCombiner10MaybeWriteEv+0x82>
      count++;
 8000880:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000884:	b29b      	uxth	r3, r3
 8000886:	3301      	adds	r3, #1
 8000888:	b29b      	uxth	r3, r3
 800088a:	83fb      	strh	r3, [r7, #30]
    for (uint16_t i = this_offset + 1;
 800088c:	8bbb      	ldrh	r3, [r7, #28]
 800088e:	3301      	adds	r3, #1
 8000890:	83bb      	strh	r3, [r7, #28]
         i < resolutions_size_ && resolutions_[i] == new_resolution;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	899b      	ldrh	r3, [r3, #12]
 8000896:	8bba      	ldrh	r2, [r7, #28]
 8000898:	429a      	cmp	r2, r3
 800089a:	d209      	bcs.n	80008b0 <_ZN6mjbots6moteus13WriteCombiner10MaybeWriteEv+0xa0>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	689a      	ldr	r2, [r3, #8]
 80008a0:	8bbb      	ldrh	r3, [r7, #28]
 80008a2:	4413      	add	r3, r2
 80008a4:	f993 2000 	ldrsb.w	r2, [r3]
 80008a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d0e7      	beq.n	8000880 <_ZN6mjbots6moteus13WriteCombiner10MaybeWriteEv+0x70>
    int8_t write_command = base_command_ + [&]() {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80008b6:	b2dc      	uxtb	r4, r3
 80008b8:	f107 030f 	add.w	r3, r7, #15
 80008bc:	613b      	str	r3, [r7, #16]
    }();
 80008be:	f107 0310 	add.w	r3, r7, #16
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ff7c 	bl	80007c0 <_ZZN6mjbots6moteus13WriteCombiner10MaybeWriteEvENKUlvE_clEv>
 80008c8:	4603      	mov	r3, r0
    int8_t write_command = base_command_ + [&]() {
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	4423      	add	r3, r4
 80008ce:	b2db      	uxtb	r3, r3
    }();
 80008d0:	767b      	strb	r3, [r7, #25]

    const auto start_size = frame_->size();
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fed7 	bl	800068a <_ZNK6mjbots6moteus12WriteCanData4sizeEv>
 80008dc:	4603      	mov	r3, r0
 80008de:	763b      	strb	r3, [r7, #24]
    if (count <= 3) {
 80008e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80008e4:	2b03      	cmp	r3, #3
 80008e6:	dc0a      	bgt.n	80008fe <_ZN6mjbots6moteus13WriteCombiner10MaybeWriteEv+0xee>
      // Use the shorthand formulation.
      frame_->Write<int8_t>(write_command + count);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6818      	ldr	r0, [r3, #0]
 80008ec:	f997 2019 	ldrsb.w	r2, [r7, #25]
 80008f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80008f4:	4413      	add	r3, r2
 80008f6:	4619      	mov	r1, r3
 80008f8:	f000 fe1a 	bl	8001530 <_ZN6mjbots6moteus12WriteCanData5WriteIaiEEvT0_>
 80008fc:	e00f      	b.n	800091e <_ZN6mjbots6moteus13WriteCombiner10MaybeWriteEv+0x10e>
    } else {
      // Nope, the long form.
      frame_->Write<int8_t>(write_command);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f997 2019 	ldrsb.w	r2, [r7, #25]
 8000906:	4611      	mov	r1, r2
 8000908:	4618      	mov	r0, r3
 800090a:	f000 fded 	bl	80014e8 <_ZN6mjbots6moteus12WriteCanData5WriteIaaEEvT0_>
      frame_->Write<int8_t>(count);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f000 fe2d 	bl	8001578 <_ZN6mjbots6moteus12WriteCanData5WriteIasEEvT0_>
    }
    frame_->WriteVaruint(start_register_ + this_offset);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	88db      	ldrh	r3, [r3, #6]
 8000926:	4619      	mov	r1, r3
 8000928:	8b7b      	ldrh	r3, [r7, #26]
 800092a:	440b      	add	r3, r1
 800092c:	4619      	mov	r1, r3
 800092e:	4610      	mov	r0, r2
 8000930:	f7ff feb8 	bl	80006a4 <_ZN6mjbots6moteus12WriteCanData12WriteVaruintEm>
    const auto end_size = frame_->size();
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fea6 	bl	800068a <_ZNK6mjbots6moteus12WriteCanData4sizeEv>
 800093e:	4603      	mov	r3, r0
 8000940:	75fb      	strb	r3, [r7, #23]

    reply_size_ += (end_size - start_size);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	7c9a      	ldrb	r2, [r3, #18]
 8000946:	7df9      	ldrb	r1, [r7, #23]
 8000948:	7e3b      	ldrb	r3, [r7, #24]
 800094a:	1acb      	subs	r3, r1, r3
 800094c:	b2db      	uxtb	r3, r3
 800094e:	4413      	add	r3, r2
 8000950:	b2da      	uxtb	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	749a      	strb	r2, [r3, #18]
    reply_size_ += count * MultiplexParser::ResolutionSize(new_resolution);
 8000956:	f9b7 401e 	ldrsh.w	r4, [r7, #30]
 800095a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fec2 	bl	80006e8 <_ZN6mjbots6moteus15MultiplexParser14ResolutionSizeENS0_10ResolutionE>
 8000964:	4603      	mov	r3, r0
 8000966:	fb03 f104 	mul.w	r1, r3, r4
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	7c9a      	ldrb	r2, [r3, #18]
 800096e:	b2cb      	uxtb	r3, r1
 8000970:	4413      	add	r3, r2
 8000972:	b2da      	uxtb	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	749a      	strb	r2, [r3, #18]

    return true;
 8000978:	2301      	movs	r3, #1
  }
 800097a:	4618      	mov	r0, r3
 800097c:	3724      	adds	r7, #36	@ 0x24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd90      	pop	{r4, r7, pc}

08000982 <_ZN6mjbots6moteus5Query9ItemValueC1Ev>:
    return 0;
  }
};

struct Query {
  struct ItemValue {
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
 800098a:	f7ff fe61 	bl	8000650 <_ZN6mjbots6moteus6detail14numeric_limitsIsE3maxEv>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	801a      	strh	r2, [r3, #0]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	f04f 0200 	mov.w	r2, #0
 800099c:	f04f 0300 	mov.w	r3, #0
 80009a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <_ZN6mjbots6moteus5Query6ResultC1Ev>:
    // we do it in the constructor.
    //
    // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=92385
    ItemValue extra[kMaxExtra];

    Result() : extra() {}
 80009ae:	b5b0      	push	{r4, r5, r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	f7ff fe36 	bl	800062c <_ZNSt14numeric_limitsIdE9quiet_NaNEv>
 80009c0:	eeb0 7a40 	vmov.f32	s14, s0
 80009c4:	eef0 7a60 	vmov.f32	s15, s1
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	ed83 7b02 	vstr	d7, [r3, #8]
 80009ce:	f7ff fe2d 	bl	800062c <_ZNSt14numeric_limitsIdE9quiet_NaNEv>
 80009d2:	eeb0 7a40 	vmov.f32	s14, s0
 80009d6:	eef0 7a60 	vmov.f32	s15, s1
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	ed83 7b04 	vstr	d7, [r3, #16]
 80009e0:	f7ff fe24 	bl	800062c <_ZNSt14numeric_limitsIdE9quiet_NaNEv>
 80009e4:	eeb0 7a40 	vmov.f32	s14, s0
 80009e8:	eef0 7a60 	vmov.f32	s15, s1
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	ed83 7b06 	vstr	d7, [r3, #24]
 80009f2:	f7ff fe1b 	bl	800062c <_ZNSt14numeric_limitsIdE9quiet_NaNEv>
 80009f6:	eeb0 7a40 	vmov.f32	s14, s0
 80009fa:	eef0 7a60 	vmov.f32	s15, s1
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	ed83 7b08 	vstr	d7, [r3, #32]
 8000a04:	f7ff fe12 	bl	800062c <_ZNSt14numeric_limitsIdE9quiet_NaNEv>
 8000a08:	eeb0 7a40 	vmov.f32	s14, s0
 8000a0c:	eef0 7a60 	vmov.f32	s15, s1
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 8000a16:	f7ff fe09 	bl	800062c <_ZNSt14numeric_limitsIdE9quiet_NaNEv>
 8000a1a:	eeb0 7a40 	vmov.f32	s14, s0
 8000a1e:	eef0 7a60 	vmov.f32	s15, s1
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
 8000a28:	f7ff fe00 	bl	800062c <_ZNSt14numeric_limitsIdE9quiet_NaNEv>
 8000a2c:	eeb0 7a40 	vmov.f32	s14, s0
 8000a30:	eef0 7a60 	vmov.f32	s15, s1
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2200      	movs	r2, #0
 8000a46:	645a      	str	r2, [r3, #68]	@ 0x44
 8000a48:	f7ff fdf0 	bl	800062c <_ZNSt14numeric_limitsIdE9quiet_NaNEv>
 8000a4c:	eeb0 7a40 	vmov.f32	s14, s0
 8000a50:	eef0 7a60 	vmov.f32	s15, s1
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
 8000a5a:	f7ff fde7 	bl	800062c <_ZNSt14numeric_limitsIdE9quiet_NaNEv>
 8000a5e:	eeb0 7a40 	vmov.f32	s14, s0
 8000a62:	eef0 7a60 	vmov.f32	s15, s1
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2200      	movs	r2, #0
 8000a78:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3360      	adds	r3, #96	@ 0x60
 8000a88:	250f      	movs	r5, #15
 8000a8a:	461c      	mov	r4, r3
 8000a8c:	e00c      	b.n	8000aa8 <_ZN6mjbots6moteus5Query6ResultC1Ev+0xfa>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	8023      	strh	r3, [r4, #0]
 8000a92:	f04f 0200 	mov.w	r2, #0
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8000a9e:	4620      	mov	r0, r4
 8000aa0:	f7ff ff6f 	bl	8000982 <_ZN6mjbots6moteus5Query9ItemValueC1Ev>
 8000aa4:	3d01      	subs	r5, #1
 8000aa6:	3410      	adds	r4, #16
 8000aa8:	2d00      	cmp	r5, #0
 8000aaa:	daf0      	bge.n	8000a8e <_ZN6mjbots6moteus5Query6ResultC1Ev+0xe0>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bdb0      	pop	{r4, r5, r7, pc}

08000ab6 <_ZN6mjbots6moteus5Query10ItemFormatC1Ev>:
  };

  struct ItemFormat {
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
 8000abe:	f7ff fdc7 	bl	8000650 <_ZN6mjbots6moteus6detail14numeric_limitsIsE3maxEv>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	801a      	strh	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2204      	movs	r2, #4
 8000ace:	709a      	strb	r2, [r3, #2]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <_ZN6mjbots6moteus5Query6FormatC1Ev>:

    // Any values here must be sorted by register number.
    ItemFormat extra[kMaxExtra];

    // gcc bug 92385 again
    Format() : extra() {}
 8000ada:	b5b0      	push	{r4, r5, r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2203      	movs	r2, #3
 8000aec:	705a      	strb	r2, [r3, #1]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2203      	movs	r2, #3
 8000af2:	709a      	strb	r2, [r3, #2]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2203      	movs	r2, #3
 8000af8:	70da      	strb	r2, [r3, #3]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2204      	movs	r2, #4
 8000afe:	711a      	strb	r2, [r3, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2204      	movs	r2, #4
 8000b04:	715a      	strb	r2, [r3, #5]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2204      	movs	r2, #4
 8000b0a:	719a      	strb	r2, [r3, #6]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2204      	movs	r2, #4
 8000b10:	71da      	strb	r2, [r3, #7]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2204      	movs	r2, #4
 8000b16:	721a      	strb	r2, [r3, #8]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	725a      	strb	r2, [r3, #9]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2200      	movs	r2, #0
 8000b22:	729a      	strb	r2, [r3, #10]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2200      	movs	r2, #0
 8000b28:	72da      	strb	r2, [r3, #11]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	731a      	strb	r2, [r3, #12]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2204      	movs	r2, #4
 8000b34:	735a      	strb	r2, [r3, #13]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2204      	movs	r2, #4
 8000b3a:	739a      	strb	r2, [r3, #14]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3310      	adds	r3, #16
 8000b40:	250f      	movs	r5, #15
 8000b42:	461c      	mov	r4, r3
 8000b44:	e008      	b.n	8000b58 <_ZN6mjbots6moteus5Query6FormatC1Ev+0x7e>
 8000b46:	2300      	movs	r3, #0
 8000b48:	8023      	strh	r3, [r4, #0]
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	70a3      	strb	r3, [r4, #2]
 8000b4e:	4620      	mov	r0, r4
 8000b50:	f7ff ffb1 	bl	8000ab6 <_ZN6mjbots6moteus5Query10ItemFormatC1Ev>
 8000b54:	3d01      	subs	r5, #1
 8000b56:	3404      	adds	r4, #4
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	daf4      	bge.n	8000b46 <_ZN6mjbots6moteus5Query6FormatC1Ev+0x6c>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bdb0      	pop	{r4, r5, r7, pc}

08000b66 <_ZZN6mjbots6moteus5Query4MakeEPNS0_12WriteCanDataERKNS1_6FormatEENKUlvE_clEv>:
      }
      reply_size += combiner.reply_size();
    }

    {
      const int16_t size = [&]() {
 8000b66:	b590      	push	{r4, r7, lr}
 8000b68:	b085      	sub	sp, #20
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
        for (int16_t i = 0; i < kMaxExtra; i++) {
 8000b6e:	2300      	movs	r3, #0
 8000b70:	81fb      	strh	r3, [r7, #14]
 8000b72:	e019      	b.n	8000ba8 <_ZZN6mjbots6moteus5Query4MakeEPNS0_12WriteCanDataERKNS1_6FormatEENKUlvE_clEv+0x42>
          if (format.extra[i].register_number ==
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000b7c:	3204      	adds	r2, #4
 8000b7e:	f933 4022 	ldrsh.w	r4, [r3, r2, lsl #2]
              detail::numeric_limits<int16_t>::max()) {
 8000b82:	f7ff fd65 	bl	8000650 <_ZN6mjbots6moteus6detail14numeric_limitsIsE3maxEv>
 8000b86:	4603      	mov	r3, r0
          if (format.extra[i].register_number ==
 8000b88:	429c      	cmp	r4, r3
 8000b8a:	bf0c      	ite	eq
 8000b8c:	2301      	moveq	r3, #1
 8000b8e:	2300      	movne	r3, #0
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d002      	beq.n	8000b9c <_ZZN6mjbots6moteus5Query4MakeEPNS0_12WriteCanDataERKNS1_6FormatEENKUlvE_clEv+0x36>
            return i;
 8000b96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b9a:	e00a      	b.n	8000bb2 <_ZZN6mjbots6moteus5Query4MakeEPNS0_12WriteCanDataERKNS1_6FormatEENKUlvE_clEv+0x4c>
        for (int16_t i = 0; i < kMaxExtra; i++) {
 8000b9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	81fb      	strh	r3, [r7, #14]
 8000ba8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	dde1      	ble.n	8000b74 <_ZZN6mjbots6moteus5Query4MakeEPNS0_12WriteCanDataERKNS1_6FormatEENKUlvE_clEv+0xe>
          }
        }
        return kMaxExtra;
 8000bb0:	2310      	movs	r3, #16
      }();
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd90      	pop	{r4, r7, pc}

08000bba <_ZN6mjbots6moteus5Query4MakeEPNS0_12WriteCanDataERKNS1_6FormatE>:
  static uint8_t Make(WriteCanData* frame, const Format& format) {
 8000bba:	b590      	push	{r4, r7, lr}
 8000bbc:	b0ab      	sub	sp, #172	@ 0xac
 8000bbe:	af02      	add	r7, sp, #8
 8000bc0:	6078      	str	r0, [r7, #4]
 8000bc2:	6039      	str	r1, [r7, #0]
    uint8_t reply_size = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
        format.mode,
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	f993 3000 	ldrsb.w	r3, [r3]
      };
 8000bd0:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        format.position,
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	f993 3001 	ldrsb.w	r3, [r3, #1]
      };
 8000bda:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
        format.velocity,
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	f993 3002 	ldrsb.w	r3, [r3, #2]
      };
 8000be4:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
        format.torque,
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	f993 3003 	ldrsb.w	r3, [r3, #3]
      };
 8000bee:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
        format.q_current,
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	f993 3004 	ldrsb.w	r3, [r3, #4]
      };
 8000bf8:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
        format.d_current,
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	f993 3005 	ldrsb.w	r3, [r3, #5]
      };
 8000c02:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
        format.abs_position,
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	f993 3006 	ldrsb.w	r3, [r3, #6]
      };
 8000c0c:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
      const uint16_t kResolutionsSize = sizeof(kResolutions) / sizeof(*kResolutions);
 8000c10:	2307      	movs	r3, #7
 8000c12:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
          kResolutions, kResolutionsSize);
 8000c16:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8000c1a:	2307      	movs	r3, #7
 8000c1c:	9301      	str	r3, [sp, #4]
 8000c1e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2300      	movs	r3, #0
 8000c26:	2210      	movs	r2, #16
 8000c28:	6879      	ldr	r1, [r7, #4]
 8000c2a:	f7ff fd81 	bl	8000730 <_ZN6mjbots6moteus13WriteCombinerC1EPNS0_12WriteCanDataEatPKNS0_10ResolutionEt>
      for (uint16_t i = 0; i < kResolutionsSize; i++) {
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8000c34:	e009      	b.n	8000c4a <_ZN6mjbots6moteus5Query4MakeEPNS0_12WriteCanDataERKNS1_6FormatE+0x90>
        combiner.MaybeWrite();
 8000c36:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fde8 	bl	8000810 <_ZN6mjbots6moteus13WriteCombiner10MaybeWriteEv>
      for (uint16_t i = 0; i < kResolutionsSize; i++) {
 8000c40:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8000c44:	3301      	adds	r3, #1
 8000c46:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8000c4a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8000c4e:	2b06      	cmp	r3, #6
 8000c50:	d9f1      	bls.n	8000c36 <_ZN6mjbots6moteus5Query4MakeEPNS0_12WriteCanDataERKNS1_6FormatE+0x7c>
      reply_size += combiner.reply_size();
 8000c52:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fda5 	bl	80007a6 <_ZNK6mjbots6moteus13WriteCombiner10reply_sizeEv>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	461a      	mov	r2, r3
 8000c60:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000c64:	4413      	add	r3, r2
 8000c66:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    }
 8000c6a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fd88 	bl	8000784 <_ZN6mjbots6moteus13WriteCombinerD1Ev>
        format.motor_temperature,
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	f993 3007 	ldrsb.w	r3, [r3, #7]
      };
 8000c7a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        format.trajectory_complete,
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	f993 3008 	ldrsb.w	r3, [r3, #8]
      };
 8000c84:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
        format.home_state,
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	f993 3009 	ldrsb.w	r3, [r3, #9]
      };
 8000c8e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
        format.voltage,
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	f993 300a 	ldrsb.w	r3, [r3, #10]
      };
 8000c98:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        format.temperature,
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	f993 300b 	ldrsb.w	r3, [r3, #11]
      };
 8000ca2:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
        format.fault,
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	f993 300c 	ldrsb.w	r3, [r3, #12]
      };
 8000cac:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
      const uint16_t kResolutionsSize = sizeof(kResolutions) / sizeof(*kResolutions);
 8000cb0:	2306      	movs	r3, #6
 8000cb2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
          kResolutions, kResolutionsSize);
 8000cb6:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000cba:	2306      	movs	r3, #6
 8000cbc:	9301      	str	r3, [sp, #4]
 8000cbe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	230a      	movs	r3, #10
 8000cc6:	2210      	movs	r2, #16
 8000cc8:	6879      	ldr	r1, [r7, #4]
 8000cca:	f7ff fd31 	bl	8000730 <_ZN6mjbots6moteus13WriteCombinerC1EPNS0_12WriteCanDataEatPKNS0_10ResolutionEt>
      for (uint16_t i = 0; i < kResolutionsSize; i++) {
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 8000cd4:	e009      	b.n	8000cea <_ZN6mjbots6moteus5Query4MakeEPNS0_12WriteCanDataERKNS1_6FormatE+0x130>
        combiner.MaybeWrite();
 8000cd6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fd98 	bl	8000810 <_ZN6mjbots6moteus13WriteCombiner10MaybeWriteEv>
      for (uint16_t i = 0; i < kResolutionsSize; i++) {
 8000ce0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 8000cea:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8000cee:	2b05      	cmp	r3, #5
 8000cf0:	d9f1      	bls.n	8000cd6 <_ZN6mjbots6moteus5Query4MakeEPNS0_12WriteCanDataERKNS1_6FormatE+0x11c>
      reply_size += combiner.reply_size();
 8000cf2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fd55 	bl	80007a6 <_ZNK6mjbots6moteus13WriteCombiner10reply_sizeEv>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	461a      	mov	r2, r3
 8000d00:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000d04:	4413      	add	r3, r2
 8000d06:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    }
 8000d0a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fd38 	bl	8000784 <_ZN6mjbots6moteus13WriteCombinerD1Ev>
        format.aux1_gpio,
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	f993 300d 	ldrsb.w	r3, [r3, #13]
      };
 8000d1a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        format.aux2_gpio,
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	f993 300e 	ldrsb.w	r3, [r3, #14]
      };
 8000d24:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
      const uint16_t kResolutionsSize = sizeof(kResolutions) / sizeof(*kResolutions);
 8000d28:	2302      	movs	r3, #2
 8000d2a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
          kResolutions, kResolutionsSize);
 8000d2e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000d32:	2302      	movs	r3, #2
 8000d34:	9301      	str	r3, [sp, #4]
 8000d36:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	235e      	movs	r3, #94	@ 0x5e
 8000d3e:	2210      	movs	r2, #16
 8000d40:	6879      	ldr	r1, [r7, #4]
 8000d42:	f7ff fcf5 	bl	8000730 <_ZN6mjbots6moteus13WriteCombinerC1EPNS0_12WriteCanDataEatPKNS0_10ResolutionEt>
      for (uint16_t i = 0; i < kResolutionsSize; i++) {
 8000d46:	2300      	movs	r3, #0
 8000d48:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
 8000d4c:	e009      	b.n	8000d62 <_ZN6mjbots6moteus5Query4MakeEPNS0_12WriteCanDataERKNS1_6FormatE+0x1a8>
        combiner.MaybeWrite();
 8000d4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fd5c 	bl	8000810 <_ZN6mjbots6moteus13WriteCombiner10MaybeWriteEv>
      for (uint16_t i = 0; i < kResolutionsSize; i++) {
 8000d58:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
 8000d62:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d9f1      	bls.n	8000d4e <_ZN6mjbots6moteus5Query4MakeEPNS0_12WriteCanDataERKNS1_6FormatE+0x194>
      reply_size += combiner.reply_size();
 8000d6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fd19 	bl	80007a6 <_ZNK6mjbots6moteus13WriteCombiner10reply_sizeEv>
 8000d74:	4603      	mov	r3, r0
 8000d76:	461a      	mov	r2, r3
 8000d78:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000d7c:	4413      	add	r3, r2
 8000d7e:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    }
 8000d82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fcfc 	bl	8000784 <_ZN6mjbots6moteus13WriteCombinerD1Ev>
      const int16_t size = [&]() {
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	67bb      	str	r3, [r7, #120]	@ 0x78
      }();
 8000d90:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fee6 	bl	8000b66 <_ZZN6mjbots6moteus5Query4MakeEPNS0_12WriteCanDataERKNS1_6FormatEENKUlvE_clEv>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a

      if (size == 0) { return reply_size; }
 8000da0:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	@ 0x8a
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d102      	bne.n	8000dae <_ZN6mjbots6moteus5Query4MakeEPNS0_12WriteCanDataERKNS1_6FormatE+0x1f4>
 8000da8:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000dac:	e0c6      	b.n	8000f3c <_ZN6mjbots6moteus5Query4MakeEPNS0_12WriteCanDataERKNS1_6FormatE+0x382>
      const int16_t min_register_number = format.extra[0].register_number;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	8a1b      	ldrh	r3, [r3, #16]
 8000db2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
      const int16_t max_register_number = format.extra[size - 1].register_number;
 8000db6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	@ 0x8a
 8000dba:	1e5a      	subs	r2, r3, #1
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	3204      	adds	r2, #4
 8000dc0:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8000dc4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

      const uint16_t required_registers =
          max_register_number - min_register_number + 1;
 8000dc8:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 8000dcc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	b29b      	uxth	r3, r3
      const uint16_t required_registers =
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84

      // An arbitrary limit to constrain the amount of stack we use
      // below.
      if (required_registers > 512) { ::abort(); }
 8000dda:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8000dde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000de2:	d901      	bls.n	8000de8 <_ZN6mjbots6moteus5Query4MakeEPNS0_12WriteCanDataERKNS1_6FormatE+0x22e>
 8000de4:	f003 fdf8 	bl	80049d8 <abort>

#ifndef ARDUINO
      std::vector<Resolution> resolutions(required_registers);
 8000de8:	f8b7 1084 	ldrh.w	r1, [r7, #132]	@ 0x84
 8000dec:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000df0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000df4:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 fbe0 	bl	80015c2 <_ZNSt6vectorIN6mjbots6moteus10ResolutionESaIS2_EEC1EjRKS3_>

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000e02:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 fc22 	bl	8001650 <_ZNSt15__new_allocatorIN6mjbots6moteus10ResolutionEED1Ev>
#else
      Resolution resolutions[required_registers];
#endif
      ::memset(&resolutions[0], 0, sizeof(Resolution) * required_registers);
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 fc0d 	bl	8001632 <_ZNSt6vectorIN6mjbots6moteus10ResolutionESaIS2_EEixEj>
 8000e18:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	2100      	movs	r1, #0
 8000e20:	f003 fef8 	bl	8004c14 <memset>

      for (int16_t this_register = min_register_number, index = 0;
 8000e24:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8000e28:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
 8000e32:	e03d      	b.n	8000eb0 <_ZN6mjbots6moteus5Query4MakeEPNS0_12WriteCanDataERKNS1_6FormatE+0x2f6>
           this_register <= max_register_number;
           this_register++) {
        if (format.extra[index].register_number == this_register) {
 8000e34:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	@ 0x96
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	3204      	adds	r2, #4
 8000e3c:	f933 3022 	ldrsh.w	r3, [r3, r2, lsl #2]
 8000e40:	f9b7 2098 	ldrsh.w	r2, [r7, #152]	@ 0x98
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d11d      	bne.n	8000e84 <_ZN6mjbots6moteus5Query4MakeEPNS0_12WriteCanDataERKNS1_6FormatE+0x2ca>
          resolutions[this_register - min_register_number] =
              format.extra[index].resolution;
 8000e48:	f9b7 4096 	ldrsh.w	r4, [r7, #150]	@ 0x96
          resolutions[this_register - min_register_number] =
 8000e4c:	f9b7 2098 	ldrsh.w	r2, [r7, #152]	@ 0x98
 8000e50:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	@ 0x88
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	461a      	mov	r2, r3
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4611      	mov	r1, r2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 fbe7 	bl	8001632 <_ZNSt6vectorIN6mjbots6moteus10ResolutionESaIS2_EEixEj>
 8000e64:	4601      	mov	r1, r0
              format.extra[index].resolution;
 8000e66:	683a      	ldr	r2, [r7, #0]
 8000e68:	1d23      	adds	r3, r4, #4
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	f993 3002 	ldrsb.w	r3, [r3, #2]
          resolutions[this_register - min_register_number] =
 8000e72:	700b      	strb	r3, [r1, #0]
          index++;
 8000e74:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	@ 0x96
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
 8000e82:	e00e      	b.n	8000ea2 <_ZN6mjbots6moteus5Query4MakeEPNS0_12WriteCanDataERKNS1_6FormatE+0x2e8>
        } else {
          resolutions[this_register - min_register_number] = kIgnore;
 8000e84:	f9b7 2098 	ldrsh.w	r2, [r7, #152]	@ 0x98
 8000e88:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	@ 0x88
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	461a      	mov	r2, r3
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4611      	mov	r1, r2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 fbcb 	bl	8001632 <_ZNSt6vectorIN6mjbots6moteus10ResolutionESaIS2_EEixEj>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2204      	movs	r2, #4
 8000ea0:	701a      	strb	r2, [r3, #0]
      for (int16_t this_register = min_register_number, index = 0;
 8000ea2:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	@ 0x98
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
           this_register <= max_register_number;
 8000eb0:	f9b7 2098 	ldrsh.w	r2, [r7, #152]	@ 0x98
 8000eb4:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	ddbb      	ble.n	8000e34 <_ZN6mjbots6moteus5Query4MakeEPNS0_12WriteCanDataERKNS1_6FormatE+0x27a>
        }
      }
      WriteCombiner combiner(
          frame, 0x10, min_register_number,
          &resolutions[0], required_registers);
 8000ebc:	f8b7 4088 	ldrh.w	r4, [r7, #136]	@ 0x88
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 fbb3 	bl	8001632 <_ZNSt6vectorIN6mjbots6moteus10ResolutionESaIS2_EEixEj>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	f107 0008 	add.w	r0, r7, #8
 8000ed2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	9200      	str	r2, [sp, #0]
 8000eda:	4623      	mov	r3, r4
 8000edc:	2210      	movs	r2, #16
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	f7ff fc26 	bl	8000730 <_ZN6mjbots6moteus13WriteCombinerC1EPNS0_12WriteCanDataEatPKNS0_10ResolutionEt>
      for (uint16_t i = 0; i < required_registers; i++) {
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8000eea:	e009      	b.n	8000f00 <_ZN6mjbots6moteus5Query4MakeEPNS0_12WriteCanDataERKNS1_6FormatE+0x346>
        combiner.MaybeWrite();
 8000eec:	f107 0308 	add.w	r3, r7, #8
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fc8d 	bl	8000810 <_ZN6mjbots6moteus13WriteCombiner10MaybeWriteEv>
      for (uint16_t i = 0; i < required_registers; i++) {
 8000ef6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000efa:	3301      	adds	r3, #1
 8000efc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8000f00:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8000f04:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d3ef      	bcc.n	8000eec <_ZN6mjbots6moteus5Query4MakeEPNS0_12WriteCanDataERKNS1_6FormatE+0x332>
      }
      reply_size += combiner.reply_size();
 8000f0c:	f107 0308 	add.w	r3, r7, #8
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fc48 	bl	80007a6 <_ZNK6mjbots6moteus13WriteCombiner10reply_sizeEv>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000f1e:	4413      	add	r3, r2
 8000f20:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    }
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fc2b 	bl	8000784 <_ZN6mjbots6moteus13WriteCombinerD1Ev>
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 fb5f 	bl	80015f6 <_ZNSt6vectorIN6mjbots6moteus10ResolutionESaIS2_EED1Ev>

    return reply_size;
 8000f38:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
  }
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	37a4      	adds	r7, #164	@ 0xa4
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}

08000f44 <_ZN6Moteus7OptionsC1Ev>:
    // command.
    bool default_query = true;

    uint16_t min_rcv_wait_us = 2000;

    Options() {}
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	705a      	strb	r2, [r3, #1]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fdbc 	bl	8000ada <_ZN6mjbots6moteus5Query6FormatC1Ev>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2201      	movs	r2, #1
 8000f76:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000f80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <_ZN6mjbots6moteus10CanFdFrameC1Ev>:
struct CanFdFrame {
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3308      	adds	r3, #8
 8000fa6:	2240      	movs	r2, #64	@ 0x40
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f003 fe32 	bl	8004c14 <memset>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <_ZN6Moteus6ResultC1Ev>:
    query_size_ = can_data.size;
    query_data_ = reinterpret_cast<char*>(realloc(query_data_, query_size_));
    ::memcpy(query_data_, &can_data.data[0], query_size_);
  }

  struct Result {
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3304      	adds	r3, #4
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ffba 	bl	8000f8e <_ZN6mjbots6moteus10CanFdFrameC1Ev>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3358      	adds	r3, #88	@ 0x58
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fcc5 	bl	80009ae <_ZN6mjbots6moteus5Query6ResultC1Ev>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <_ZN6MoteusC1ER19FDCAN_HandleTypeDefRKNS_7OptionsE>:
  Moteus(FDCAN_HandleTypeDef& can_bus,
 800102e:	b580      	push	{r7, lr}
 8001030:	b098      	sub	sp, #96	@ 0x60
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
      : can_bus_(can_bus),
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	601a      	str	r2, [r3, #0]
        options_(options) {
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	1d1a      	adds	r2, r3, #4
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4610      	mov	r0, r2
 8001048:	4619      	mov	r1, r3
 800104a:	2358      	movs	r3, #88	@ 0x58
 800104c:	461a      	mov	r2, r3
 800104e:	f003 fe69 	bl	8004d24 <memcpy>
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	3360      	adds	r3, #96	@ 0x60
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ffd3 	bl	8001002 <_ZN6Moteus6ResultC1Ev>
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2200      	movs	r2, #0
 8001060:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2200      	movs	r2, #0
 8001068:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    mm::CanData can_data;
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2240      	movs	r2, #64	@ 0x40
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f003 fdcd 	bl	8004c14 <memset>
 800107a:	2300      	movs	r3, #0
 800107c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    mm::WriteCanData query_write(&can_data);
 8001080:	f107 0214 	add.w	r2, r7, #20
 8001084:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001088:	4611      	mov	r1, r2
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fae9 	bl	8000662 <_ZN6mjbots6moteus12WriteCanDataC1EPNS0_7CanDataE>
    mm::Query::Make(&query_write, options_.query_format);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	1d9a      	adds	r2, r3, #6
 8001094:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001098:	4611      	mov	r1, r2
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fd8d 	bl	8000bba <_ZN6mjbots6moteus5Query4MakeEPNS0_12WriteCanDataERKNS1_6FormatE>
    query_size_ = can_data.size;
 80010a0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80010a4:	461a      	mov	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    query_data_ = reinterpret_cast<char*>(realloc(query_data_, query_size_));
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80010b8:	4619      	mov	r1, r3
 80010ba:	4610      	mov	r0, r2
 80010bc:	f003 fd52 	bl	8004b64 <realloc>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
    ::memcpy(query_data_, &can_data.data[0], query_size_);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f8d3 0218 	ldr.w	r0, [r3, #536]	@ 0x218
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	f003 fe23 	bl	8004d24 <memcpy>
  }
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4618      	mov	r0, r3
 80010e2:	3760      	adds	r7, #96	@ 0x60
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <_ZNK7moteus1MUlvE_clEv>:

/* USER CODE BEGIN PV */

char pbuf[256];

Moteus moteus1(hfdcan1, []() {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	  Moteus::Options options;
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ff26 	bl	8000f44 <_ZN6Moteus7OptionsC1Ev>
	  options.id = 1;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]
	  return options;
 80010fe:	bf00      	nop
}());
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b098      	sub	sp, #96	@ 0x60
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110e:	f000 ff5f 	bl	8001fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001112:	f000 f86d 	bl	80011f0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001116:	f000 f981 	bl	800141c <_ZL12MX_GPIO_Initv>
  MX_FDCAN1_Init();
 800111a:	f000 f8bf 	bl	800129c <_ZL14MX_FDCAN1_Initv>
  MX_USART2_UART_Init();
 800111e:	f000 f91d 	bl	800135c <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_FDCAN_Start(&hfdcan1);
 8001122:	482a      	ldr	r0, [pc, #168]	@ (80011cc <main+0xc4>)
 8001124:	f001 fabf 	bl	80026a6 <HAL_FDCAN_Start>

  sprintf(pbuf, "helo");
 8001128:	4929      	ldr	r1, [pc, #164]	@ (80011d0 <main+0xc8>)
 800112a:	482a      	ldr	r0, [pc, #168]	@ (80011d4 <main+0xcc>)
 800112c:	f003 fd50 	bl	8004bd0 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*) pbuf, strlen(pbuf), 10);
 8001130:	4828      	ldr	r0, [pc, #160]	@ (80011d4 <main+0xcc>)
 8001132:	f7ff f875 	bl	8000220 <strlen>
 8001136:	4603      	mov	r3, r0
 8001138:	b29a      	uxth	r2, r3
 800113a:	230a      	movs	r3, #10
 800113c:	4925      	ldr	r1, [pc, #148]	@ (80011d4 <main+0xcc>)
 800113e:	4826      	ldr	r0, [pc, #152]	@ (80011d8 <main+0xd0>)
 8001140:	f002 fd7a 	bl	8003c38 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8001144:	2000      	movs	r0, #0
 8001146:	f000 fe7b 	bl	8001e40 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800114a:	2101      	movs	r1, #1
 800114c:	2000      	movs	r0, #0
 800114e:	f000 fead 	bl	8001eac <BSP_PB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	const auto now = HAL_GetTick();
 8001152:	f000 ffa1 	bl	8002098 <HAL_GetTick>
 8001156:	65f8      	str	r0, [r7, #92]	@ 0x5c
	if (now - last_send >= 200) {
 8001158:	4b20      	ldr	r3, [pc, #128]	@ (80011dc <main+0xd4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2bc7      	cmp	r3, #199	@ 0xc7
 8001162:	d9f6      	bls.n	8001152 <main+0x4a>
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001164:	2120      	movs	r1, #32
 8001166:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800116a:	f001 fccb 	bl	8002b04 <HAL_GPIO_TogglePin>
		sprintf(pbuf, "blah\n");
 800116e:	491c      	ldr	r1, [pc, #112]	@ (80011e0 <main+0xd8>)
 8001170:	4818      	ldr	r0, [pc, #96]	@ (80011d4 <main+0xcc>)
 8001172:	f003 fd2d 	bl	8004bd0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) pbuf, strlen(pbuf), 10);
 8001176:	4817      	ldr	r0, [pc, #92]	@ (80011d4 <main+0xcc>)
 8001178:	f7ff f852 	bl	8000220 <strlen>
 800117c:	4603      	mov	r3, r0
 800117e:	b29a      	uxth	r2, r3
 8001180:	230a      	movs	r3, #10
 8001182:	4914      	ldr	r1, [pc, #80]	@ (80011d4 <main+0xcc>)
 8001184:	4814      	ldr	r0, [pc, #80]	@ (80011d8 <main+0xd0>)
 8001186:	f002 fd57 	bl	8003c38 <HAL_UART_Transmit>

		Moteus::PositionMode::Command cmd;
 800118a:	4a16      	ldr	r2, [pc, #88]	@ (80011e4 <main+0xdc>)
 800118c:	463b      	mov	r3, r7
 800118e:	4611      	mov	r1, r2
 8001190:	2258      	movs	r2, #88	@ 0x58
 8001192:	4618      	mov	r0, r3
 8001194:	f003 fdc6 	bl	8004d24 <memcpy>
		cmd.position = 0;
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	f04f 0300 	mov.w	r3, #0
 80011a0:	e9c7 2300 	strd	r2, r3, [r7]
		cmd.velocity = 0;
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	f04f 0300 	mov.w	r3, #0
 80011ac:	e9c7 2302 	strd	r2, r3, [r7, #8]
		cmd.accel_limit = 1;
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <main+0xe0>)
 80011b6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

//		moteus1.SetPosition(cmd);

		loop_count += 1;
 80011ba:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <main+0xe4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	4a0a      	ldr	r2, [pc, #40]	@ (80011ec <main+0xe4>)
 80011c2:	6013      	str	r3, [r2, #0]
		last_send = now;
 80011c4:	4a05      	ldr	r2, [pc, #20]	@ (80011dc <main+0xd4>)
 80011c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011c8:	6013      	str	r3, [r2, #0]
	}

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80011ca:	e7c2      	b.n	8001152 <main+0x4a>
 80011cc:	2000008c 	.word	0x2000008c
 80011d0:	080053f8 	.word	0x080053f8
 80011d4:	20000184 	.word	0x20000184
 80011d8:	200000f0 	.word	0x200000f0
 80011dc:	200004a8 	.word	0x200004a8
 80011e0:	08005400 	.word	0x08005400
 80011e4:	08005408 	.word	0x08005408
 80011e8:	3ff00000 	.word	0x3ff00000
 80011ec:	200004ac 	.word	0x200004ac

080011f0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b094      	sub	sp, #80	@ 0x50
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 0318 	add.w	r3, r7, #24
 80011fa:	2238      	movs	r2, #56	@ 0x38
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 fd08 	bl	8004c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001212:	2000      	movs	r0, #0
 8001214:	f001 fc90 	bl	8002b38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001218:	2302      	movs	r3, #2
 800121a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800121c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001220:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001222:	2340      	movs	r3, #64	@ 0x40
 8001224:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001226:	2302      	movs	r3, #2
 8001228:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800122a:	2302      	movs	r3, #2
 800122c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800122e:	2304      	movs	r3, #4
 8001230:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001232:	2355      	movs	r3, #85	@ 0x55
 8001234:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001236:	2302      	movs	r3, #2
 8001238:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800123a:	2302      	movs	r3, #2
 800123c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800123e:	2302      	movs	r3, #2
 8001240:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	4618      	mov	r0, r3
 8001248:	f001 fd2a 	bl	8002ca0 <HAL_RCC_OscConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	bf14      	ite	ne
 8001252:	2301      	movne	r3, #1
 8001254:	2300      	moveq	r3, #0
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 800125c:	f000 f91a 	bl	8001494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001260:	230f      	movs	r3, #15
 8001262:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001264:	2303      	movs	r3, #3
 8001266:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2104      	movs	r1, #4
 8001278:	4618      	mov	r0, r3
 800127a:	f002 f823 	bl	80032c4 <HAL_RCC_ClockConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	bf14      	ite	ne
 8001284:	2301      	movne	r3, #1
 8001286:	2300      	moveq	r3, #0
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800128e:	f000 f901 	bl	8001494 <Error_Handler>
  }
}
 8001292:	bf00      	nop
 8001294:	3750      	adds	r7, #80	@ 0x50
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80012a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001354 <_ZL14MX_FDCAN1_Initv+0xb8>)
 80012a4:	4a2c      	ldr	r2, [pc, #176]	@ (8001358 <_ZL14MX_FDCAN1_Initv+0xbc>)
 80012a6:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80012a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001354 <_ZL14MX_FDCAN1_Initv+0xb8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80012ae:	4b29      	ldr	r3, [pc, #164]	@ (8001354 <_ZL14MX_FDCAN1_Initv+0xb8>)
 80012b0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80012b4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_INTERNAL_LOOPBACK;
 80012b6:	4b27      	ldr	r3, [pc, #156]	@ (8001354 <_ZL14MX_FDCAN1_Initv+0xb8>)
 80012b8:	2203      	movs	r2, #3
 80012ba:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80012bc:	4b25      	ldr	r3, [pc, #148]	@ (8001354 <_ZL14MX_FDCAN1_Initv+0xb8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80012c2:	4b24      	ldr	r3, [pc, #144]	@ (8001354 <_ZL14MX_FDCAN1_Initv+0xb8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80012c8:	4b22      	ldr	r3, [pc, #136]	@ (8001354 <_ZL14MX_FDCAN1_Initv+0xb8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80012ce:	4b21      	ldr	r3, [pc, #132]	@ (8001354 <_ZL14MX_FDCAN1_Initv+0xb8>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 80012d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001354 <_ZL14MX_FDCAN1_Initv+0xb8>)
 80012d6:	2210      	movs	r2, #16
 80012d8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 80012da:	4b1e      	ldr	r3, [pc, #120]	@ (8001354 <_ZL14MX_FDCAN1_Initv+0xb8>)
 80012dc:	2238      	movs	r2, #56	@ 0x38
 80012de:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 28;
 80012e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <_ZL14MX_FDCAN1_Initv+0xb8>)
 80012e2:	221c      	movs	r2, #28
 80012e4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80012e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001354 <_ZL14MX_FDCAN1_Initv+0xb8>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80012ec:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <_ZL14MX_FDCAN1_Initv+0xb8>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 11;
 80012f2:	4b18      	ldr	r3, [pc, #96]	@ (8001354 <_ZL14MX_FDCAN1_Initv+0xb8>)
 80012f4:	220b      	movs	r2, #11
 80012f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 80012f8:	4b16      	ldr	r3, [pc, #88]	@ (8001354 <_ZL14MX_FDCAN1_Initv+0xb8>)
 80012fa:	2205      	movs	r2, #5
 80012fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <_ZL14MX_FDCAN1_Initv+0xb8>)
 8001300:	2200      	movs	r2, #0
 8001302:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001304:	4b13      	ldr	r3, [pc, #76]	@ (8001354 <_ZL14MX_FDCAN1_Initv+0xb8>)
 8001306:	2200      	movs	r2, #0
 8001308:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800130a:	4b12      	ldr	r3, [pc, #72]	@ (8001354 <_ZL14MX_FDCAN1_Initv+0xb8>)
 800130c:	2200      	movs	r2, #0
 800130e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001310:	4810      	ldr	r0, [pc, #64]	@ (8001354 <_ZL14MX_FDCAN1_Initv+0xb8>)
 8001312:	f001 f83d 	bl	8002390 <HAL_FDCAN_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	bf14      	ite	ne
 800131c:	2301      	movne	r3, #1
 800131e:	2300      	moveq	r3, #0
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <_ZL14MX_FDCAN1_Initv+0x8e>
  {
    Error_Handler();
 8001326:	f000 f8b5 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  if (HAL_FDCAN_ConfigGlobalFilter(
 800132a:	2300      	movs	r3, #0
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2300      	movs	r3, #0
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	4807      	ldr	r0, [pc, #28]	@ (8001354 <_ZL14MX_FDCAN1_Initv+0xb8>)
 8001336:	f001 f985 	bl	8002644 <HAL_FDCAN_ConfigGlobalFilter>
 800133a:	4603      	mov	r3, r0
          &hfdcan1,
          FDCAN_ACCEPT_IN_RX_FIFO0,
          FDCAN_ACCEPT_IN_RX_FIFO0,
          FDCAN_FILTER_REMOTE,
          FDCAN_FILTER_REMOTE) != HAL_OK) {
 800133c:	2b00      	cmp	r3, #0
 800133e:	bf14      	ite	ne
 8001340:	2301      	movne	r3, #1
 8001342:	2300      	moveq	r3, #0
 8001344:	b2db      	uxtb	r3, r3
  if (HAL_FDCAN_ConfigGlobalFilter(
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <_ZL14MX_FDCAN1_Initv+0xb2>
    Error_Handler();
 800134a:	f000 f8a3 	bl	8001494 <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	2000008c 	.word	0x2000008c
 8001358:	40006400 	.word	0x40006400

0800135c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001360:	4b2c      	ldr	r3, [pc, #176]	@ (8001414 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001362:	4a2d      	ldr	r2, [pc, #180]	@ (8001418 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001364:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001366:	4b2b      	ldr	r3, [pc, #172]	@ (8001414 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001368:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800136c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b29      	ldr	r3, [pc, #164]	@ (8001414 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b27      	ldr	r3, [pc, #156]	@ (8001414 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800137a:	4b26      	ldr	r3, [pc, #152]	@ (8001414 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b24      	ldr	r3, [pc, #144]	@ (8001414 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b23      	ldr	r3, [pc, #140]	@ (8001414 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b21      	ldr	r3, [pc, #132]	@ (8001414 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001392:	4b20      	ldr	r3, [pc, #128]	@ (8001414 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001398:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800139e:	4b1d      	ldr	r3, [pc, #116]	@ (8001414 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013a4:	481b      	ldr	r0, [pc, #108]	@ (8001414 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80013a6:	f002 fbf7 	bl	8003b98 <HAL_UART_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	bf14      	ite	ne
 80013b0:	2301      	movne	r3, #1
 80013b2:	2300      	moveq	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 80013ba:	f000 f86b 	bl	8001494 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013be:	2100      	movs	r1, #0
 80013c0:	4814      	ldr	r0, [pc, #80]	@ (8001414 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80013c2:	f003 fa1b 	bl	80047fc <HAL_UARTEx_SetTxFifoThreshold>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bf14      	ite	ne
 80013cc:	2301      	movne	r3, #1
 80013ce:	2300      	moveq	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 80013d6:	f000 f85d 	bl	8001494 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013da:	2100      	movs	r1, #0
 80013dc:	480d      	ldr	r0, [pc, #52]	@ (8001414 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80013de:	f003 fa4b 	bl	8004878 <HAL_UARTEx_SetRxFifoThreshold>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	bf14      	ite	ne
 80013e8:	2301      	movne	r3, #1
 80013ea:	2300      	moveq	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 80013f2:	f000 f84f 	bl	8001494 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013f6:	4807      	ldr	r0, [pc, #28]	@ (8001414 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80013f8:	f003 f9c7 	bl	800478a <HAL_UARTEx_DisableFifoMode>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	bf14      	ite	ne
 8001402:	2301      	movne	r3, #1
 8001404:	2300      	moveq	r3, #0
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 800140c:	f000 f842 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200000f0 	.word	0x200000f0
 8001418:	40004400 	.word	0x40004400

0800141c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001422:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <_ZL12MX_GPIO_Initv+0x74>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	4a1a      	ldr	r2, [pc, #104]	@ (8001490 <_ZL12MX_GPIO_Initv+0x74>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142e:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <_ZL12MX_GPIO_Initv+0x74>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <_ZL12MX_GPIO_Initv+0x74>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	4a14      	ldr	r2, [pc, #80]	@ (8001490 <_ZL12MX_GPIO_Initv+0x74>)
 8001440:	f043 0320 	orr.w	r3, r3, #32
 8001444:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001446:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <_ZL12MX_GPIO_Initv+0x74>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144a:	f003 0320 	and.w	r3, r3, #32
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <_ZL12MX_GPIO_Initv+0x74>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	4a0e      	ldr	r2, [pc, #56]	@ (8001490 <_ZL12MX_GPIO_Initv+0x74>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145e:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <_ZL12MX_GPIO_Initv+0x74>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <_ZL12MX_GPIO_Initv+0x74>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	4a08      	ldr	r2, [pc, #32]	@ (8001490 <_ZL12MX_GPIO_Initv+0x74>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <_ZL12MX_GPIO_Initv+0x74>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40021000 	.word	0x40021000

08001494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001498:	b672      	cpsid	i
}
 800149a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <Error_Handler+0x8>

080014a0 <_ZN6mjbots6moteus12WriteCanData5WriteIamEEvT0_>:
  void Write(X value_in) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
    T value = static_cast<T>(value_in);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	b25b      	sxtb	r3, r3
 80014ae:	73fb      	strb	r3, [r7, #15]
    if (sizeof(value) + *size_ > 64) {
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	3301      	adds	r3, #1
 80014b8:	2b40      	cmp	r3, #64	@ 0x40
 80014ba:	d901      	bls.n	80014c0 <_ZN6mjbots6moteus12WriteCanData5WriteIamEEvT0_+0x20>
      abort();
 80014bc:	f003 fa8c 	bl	80049d8 <abort>
    ::memcpy(&data_[*size_],
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6852      	ldr	r2, [r2, #4]
 80014c8:	7812      	ldrb	r2, [r2, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	701a      	strb	r2, [r3, #0]
    *size_ += sizeof(value);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	3201      	adds	r2, #1
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	701a      	strb	r2, [r3, #0]
  }
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <_ZN6mjbots6moteus12WriteCanData5WriteIaaEEvT0_>:
  void Write(X value_in) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
    T value = static_cast<T>(value_in);
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	73fb      	strb	r3, [r7, #15]
    if (sizeof(value) + *size_ > 64) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	3301      	adds	r3, #1
 8001500:	2b40      	cmp	r3, #64	@ 0x40
 8001502:	d901      	bls.n	8001508 <_ZN6mjbots6moteus12WriteCanData5WriteIaaEEvT0_+0x20>
      abort();
 8001504:	f003 fa68 	bl	80049d8 <abort>
    ::memcpy(&data_[*size_],
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6852      	ldr	r2, [r2, #4]
 8001510:	7812      	ldrb	r2, [r2, #0]
 8001512:	4413      	add	r3, r2
 8001514:	7bfa      	ldrb	r2, [r7, #15]
 8001516:	701a      	strb	r2, [r3, #0]
    *size_ += sizeof(value);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	781a      	ldrb	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	3201      	adds	r2, #1
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	701a      	strb	r2, [r3, #0]
  }
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <_ZN6mjbots6moteus12WriteCanData5WriteIaiEEvT0_>:
  void Write(X value_in) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
    T value = static_cast<T>(value_in);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b25b      	sxtb	r3, r3
 800153e:	73fb      	strb	r3, [r7, #15]
    if (sizeof(value) + *size_ > 64) {
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	3301      	adds	r3, #1
 8001548:	2b40      	cmp	r3, #64	@ 0x40
 800154a:	d901      	bls.n	8001550 <_ZN6mjbots6moteus12WriteCanData5WriteIaiEEvT0_+0x20>
      abort();
 800154c:	f003 fa44 	bl	80049d8 <abort>
    ::memcpy(&data_[*size_],
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	6852      	ldr	r2, [r2, #4]
 8001558:	7812      	ldrb	r2, [r2, #0]
 800155a:	4413      	add	r3, r2
 800155c:	7bfa      	ldrb	r2, [r7, #15]
 800155e:	701a      	strb	r2, [r3, #0]
    *size_ += sizeof(value);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	781a      	ldrb	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	3201      	adds	r2, #1
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	701a      	strb	r2, [r3, #0]
  }
 8001570:	bf00      	nop
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <_ZN6mjbots6moteus12WriteCanData5WriteIasEEvT0_>:
  void Write(X value_in) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	807b      	strh	r3, [r7, #2]
    T value = static_cast<T>(value_in);
 8001584:	887b      	ldrh	r3, [r7, #2]
 8001586:	b25b      	sxtb	r3, r3
 8001588:	73fb      	strb	r3, [r7, #15]
    if (sizeof(value) + *size_ > 64) {
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	3301      	adds	r3, #1
 8001592:	2b40      	cmp	r3, #64	@ 0x40
 8001594:	d901      	bls.n	800159a <_ZN6mjbots6moteus12WriteCanData5WriteIasEEvT0_+0x22>
      abort();
 8001596:	f003 fa1f 	bl	80049d8 <abort>
    ::memcpy(&data_[*size_],
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6852      	ldr	r2, [r2, #4]
 80015a2:	7812      	ldrb	r2, [r2, #0]
 80015a4:	4413      	add	r3, r2
 80015a6:	7bfa      	ldrb	r2, [r7, #15]
 80015a8:	701a      	strb	r2, [r3, #0]
    *size_ += sizeof(value);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	781a      	ldrb	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	3201      	adds	r2, #1
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]
  }
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <_ZNSt6vectorIN6mjbots6moteus10ResolutionESaIS2_EEC1EjRKS3_>:
       *  This constructor fills the %vector with @a __n default
       *  constructed elements.
       */
      explicit
      _GLIBCXX20_CONSTEXPR
      vector(size_type __n, const allocator_type& __a = allocator_type())
 80015c2:	b590      	push	{r4, r7, lr}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
      : _Base(_S_check_init_len(__n, __a), __a)
 80015ce:	68fc      	ldr	r4, [r7, #12]
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	68b8      	ldr	r0, [r7, #8]
 80015d4:	f000 f848 	bl	8001668 <_ZNSt6vectorIN6mjbots6moteus10ResolutionESaIS2_EE17_S_check_init_lenEjRKS3_>
 80015d8:	4603      	mov	r3, r0
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	4619      	mov	r1, r3
 80015de:	4620      	mov	r0, r4
 80015e0:	f000 f87a 	bl	80016d8 <_ZNSt12_Vector_baseIN6mjbots6moteus10ResolutionESaIS2_EEC1EjRKS3_>
      { _M_default_initialize(__n); }
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f000 f8a2 	bl	8001730 <_ZNSt6vectorIN6mjbots6moteus10ResolutionESaIS2_EE21_M_default_initializeEj>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd90      	pop	{r4, r7, pc}

080015f6 <_ZNSt6vectorIN6mjbots6moteus10ResolutionESaIS2_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 80015f6:	b5b0      	push	{r4, r5, r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681d      	ldr	r5, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685c      	ldr	r4, [r3, #4]
		      _M_get_Tp_allocator());
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4618      	mov	r0, r3
 800160a:	f000 f8a9 	bl	8001760 <_ZNSt12_Vector_baseIN6mjbots6moteus10ResolutionESaIS2_EE19_M_get_Tp_allocatorEv>
 800160e:	4603      	mov	r3, r0
 8001610:	617d      	str	r5, [r7, #20]
 8001612:	613c      	str	r4, [r7, #16]
 8001614:	60fb      	str	r3, [r7, #12]
    __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
	     allocator<_Tp>&)
    {
      std::_Destroy(__first, __last);
 8001616:	6939      	ldr	r1, [r7, #16]
 8001618:	6978      	ldr	r0, [r7, #20]
 800161a:	f000 f924 	bl	8001866 <_ZSt8_DestroyIPN6mjbots6moteus10ResolutionEEvT_S4_>
    }
 800161e:	bf00      	nop
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4618      	mov	r0, r3
 8001624:	f000 f86c 	bl	8001700 <_ZNSt12_Vector_baseIN6mjbots6moteus10ResolutionESaIS2_EED1Ev>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4618      	mov	r0, r3
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bdb0      	pop	{r4, r5, r7, pc}

08001632 <_ZNSt6vectorIN6mjbots6moteus10ResolutionESaIS2_EEixEj>:
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	4413      	add	r3, r2
      }
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_ZNSt15__new_allocatorIN6mjbots6moteus10ResolutionEED1Ev>:
#if __cplusplus >= 201103L
      __new_allocator& operator=(const __new_allocator&) = default;
#endif

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <_ZNSt6vectorIN6mjbots6moteus10ResolutionESaIS2_EE17_S_check_init_lenEjRKS3_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	f107 0308 	add.w	r3, r7, #8
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	60fb      	str	r3, [r7, #12]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8001680:	f107 0308 	add.w	r3, r7, #8
 8001684:	4618      	mov	r0, r3
 8001686:	f000 f876 	bl	8001776 <_ZNSt6vectorIN6mjbots6moteus10ResolutionESaIS2_EE11_S_max_sizeERKS3_>
 800168a:	4602      	mov	r2, r0
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4293      	cmp	r3, r2
 8001690:	bf8c      	ite	hi
 8001692:	2301      	movhi	r3, #1
 8001694:	2300      	movls	r3, #0
 8001696:	b2dc      	uxtb	r4, r3
 8001698:	f107 0308 	add.w	r3, r7, #8
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ffd7 	bl	8001650 <_ZNSt15__new_allocatorIN6mjbots6moteus10ResolutionEED1Ev>
 80016a2:	2c00      	cmp	r4, #0
 80016a4:	d002      	beq.n	80016ac <_ZNSt6vectorIN6mjbots6moteus10ResolutionESaIS2_EE17_S_check_init_lenEjRKS3_+0x44>
	  __throw_length_error(
 80016a6:	4804      	ldr	r0, [pc, #16]	@ (80016b8 <_ZNSt6vectorIN6mjbots6moteus10ResolutionESaIS2_EE17_S_check_init_lenEjRKS3_+0x50>)
 80016a8:	f003 f988 	bl	80049bc <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 80016ac:	687b      	ldr	r3, [r7, #4]
      }
 80016ae:	4618      	mov	r0, r3
 80016b0:	371c      	adds	r7, #28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd90      	pop	{r4, r7, pc}
 80016b6:	bf00      	nop
 80016b8:	08005460 	.word	0x08005460

080016bc <_ZNSt12_Vector_baseIN6mjbots6moteus10ResolutionESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f7ff ffc1 	bl	8001650 <_ZNSt15__new_allocatorIN6mjbots6moteus10ResolutionEED1Ev>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_ZNSt12_Vector_baseIN6mjbots6moteus10ResolutionESaIS2_EEC1EjRKS3_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 f864 	bl	80017b6 <_ZNSt12_Vector_baseIN6mjbots6moteus10ResolutionESaIS2_EE12_Vector_implC1ERKS3_>
      { _M_create_storage(__n); }
 80016ee:	68b9      	ldr	r1, [r7, #8]
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f000 f876 	bl	80017e2 <_ZNSt12_Vector_baseIN6mjbots6moteus10ResolutionESaIS2_EE17_M_create_storageEj>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <_ZNSt12_Vector_baseIN6mjbots6moteus10ResolutionESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8001716:	461a      	mov	r2, r3
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f87c 	bl	8001816 <_ZNSt12_Vector_baseIN6mjbots6moteus10ResolutionESaIS2_EE13_M_deallocateEPS2_j>
      }
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ffcb 	bl	80016bc <_ZNSt12_Vector_baseIN6mjbots6moteus10ResolutionESaIS2_EE12_Vector_implD1Ev>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <_ZNSt6vectorIN6mjbots6moteus10ResolutionESaIS2_EE21_M_default_initializeEj>:
      _M_default_initialize(size_type __n)
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681c      	ldr	r4, [r3, #0]
					   _M_get_Tp_allocator());
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4618      	mov	r0, r3
 8001742:	f000 f80d 	bl	8001760 <_ZNSt12_Vector_baseIN6mjbots6moteus10ResolutionESaIS2_EE19_M_get_Tp_allocatorEv>
 8001746:	4603      	mov	r3, r0
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8001748:	461a      	mov	r2, r3
 800174a:	6839      	ldr	r1, [r7, #0]
 800174c:	4620      	mov	r0, r4
 800174e:	f000 f87b 	bl	8001848 <_ZSt27__uninitialized_default_n_aIPN6mjbots6moteus10ResolutionEjS2_ET_S4_T0_RSaIT1_E>
 8001752:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	605a      	str	r2, [r3, #4]
      }
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bd90      	pop	{r4, r7, pc}

08001760 <_ZNSt12_Vector_baseIN6mjbots6moteus10ResolutionESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_ZNSt6vectorIN6mjbots6moteus10ResolutionESaIS2_EE11_S_max_sizeERKS3_>:

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001776:	b580      	push	{r7, lr}
 8001778:	b088      	sub	sp, #32
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800177e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	61fb      	str	r3, [r7, #28]
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	61bb      	str	r3, [r7, #24]
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	617b      	str	r3, [r7, #20]
      __attribute__((__always_inline__))
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001790:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
      { return _M_max_size(); }
 8001794:	bf00      	nop
	return __a.max_size();
 8001796:	bf00      	nop
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001798:	60fb      	str	r3, [r7, #12]
	return (std::min)(__diffmax, __allocmax);
 800179a:	f107 020c 	add.w	r2, r7, #12
 800179e:	f107 0310 	add.w	r3, r7, #16
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 f86b 	bl	8001880 <_ZSt3minIjERKT_S2_S2_>
 80017aa:	4603      	mov	r3, r0
 80017ac:	681b      	ldr	r3, [r3, #0]
      }
 80017ae:	4618      	mov	r0, r3
 80017b0:	3720      	adds	r7, #32
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <_ZNSt12_Vector_baseIN6mjbots6moteus10ResolutionESaIS2_EE12_Vector_implC1ERKS3_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	60bb      	str	r3, [r7, #8]
	: _Tp_alloc_type(__a)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f868 	bl	80018a8 <_ZNSt12_Vector_baseIN6mjbots6moteus10ResolutionESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <_ZNSt12_Vector_baseIN6mjbots6moteus10ResolutionESaIS2_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80017ec:	6839      	ldr	r1, [r7, #0]
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f86e 	bl	80018d0 <_ZNSt12_Vector_baseIN6mjbots6moteus10ResolutionESaIS2_EE11_M_allocateEj>
 80017f4:	4602      	mov	r2, r0
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	441a      	add	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	609a      	str	r2, [r3, #8]
      }
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <_ZNSt12_Vector_baseIN6mjbots6moteus10ResolutionESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001816:	b580      	push	{r7, lr}
 8001818:	b088      	sub	sp, #32
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
	if (__p)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00b      	beq.n	8001840 <_ZNSt12_Vector_baseIN6mjbots6moteus10ResolutionESaIS2_EE13_M_deallocateEPS2_j+0x2a>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	61bb      	str	r3, [r7, #24]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	617b      	str	r3, [r7, #20]
      { __a.deallocate(__p, __n); }
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	69b9      	ldr	r1, [r7, #24]
 8001838:	69f8      	ldr	r0, [r7, #28]
 800183a:	f000 f87d 	bl	8001938 <_ZNSt15__new_allocatorIN6mjbots6moteus10ResolutionEE10deallocateEPS2_j>
 800183e:	bf00      	nop
      }
 8001840:	bf00      	nop
 8001842:	3720      	adds	r7, #32
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <_ZSt27__uninitialized_default_n_aIPN6mjbots6moteus10ResolutionEjS2_ET_S4_T0_RSaIT1_E>:
  // __uninitialized_default_n_a specialization for std::allocator,
  // which ignores the allocator and value-initializes the elements.
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 8001854:	68b9      	ldr	r1, [r7, #8]
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 f853 	bl	8001902 <_ZSt25__uninitialized_default_nIPN6mjbots6moteus10ResolutionEjET_S4_T0_>
 800185c:	4603      	mov	r3, r0
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <_ZSt8_DestroyIPN6mjbots6moteus10ResolutionEEvT_S4_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return std::_Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8001870:	6839      	ldr	r1, [r7, #0]
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f855 	bl	8001922 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN6mjbots6moteus10ResolutionEEEvT_S6_>
    }
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d201      	bcs.n	800189a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	e000      	b.n	800189c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800189a:	687b      	ldr	r3, [r7, #4]
    }
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <_ZNSt12_Vector_baseIN6mjbots6moteus10ResolutionESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
	{ }
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <_ZNSt12_Vector_baseIN6mjbots6moteus10ResolutionESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00b      	beq.n	80018f8 <_ZNSt12_Vector_baseIN6mjbots6moteus10ResolutionESaIS2_EE11_M_allocateEj+0x28>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	60bb      	str	r3, [r7, #8]
      { return __a.allocate(__n); }
 80018e8:	2200      	movs	r2, #0
 80018ea:	68b9      	ldr	r1, [r7, #8]
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 f850 	bl	8001992 <_ZNSt15__new_allocatorIN6mjbots6moteus10ResolutionEE8allocateEjPKv>
 80018f2:	4603      	mov	r3, r0
 80018f4:	bf00      	nop
 80018f6:	e000      	b.n	80018fa <_ZNSt12_Vector_baseIN6mjbots6moteus10ResolutionESaIS2_EE11_M_allocateEj+0x2a>
 80018f8:	2300      	movs	r3, #0
      }
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_ZSt25__uninitialized_default_nIPN6mjbots6moteus10ResolutionEjET_S4_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 8001902:	b580      	push	{r7, lr}
 8001904:	b084      	sub	sp, #16
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
      constexpr bool __can_fill
 800190c:	2301      	movs	r3, #1
 800190e:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 8001910:	6839      	ldr	r1, [r7, #0]
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f81e 	bl	8001954 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPN6mjbots6moteus10ResolutionEjEET_S6_T0_>
 8001918:	4603      	mov	r3, r0
    }
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN6mjbots6moteus10ResolutionEEEvT_S6_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <_ZNSt15__new_allocatorIN6mjbots6moteus10ResolutionEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	68b8      	ldr	r0, [r7, #8]
 8001948:	f003 f822 	bl	8004990 <_ZdlPvj>
      }
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPN6mjbots6moteus10ResolutionEjEET_S6_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
	  if (__n > 0)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d011      	beq.n	8001988 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPN6mjbots6moteus10ResolutionEjEET_S6_T0_+0x34>
		= std::__addressof(*__first);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f835 	bl	80019d4 <_ZSt11__addressofIN6mjbots6moteus10ResolutionEEPT_RS3_>
 800196a:	60f8      	str	r0, [r7, #12]
	      std::_Construct(__val);
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f000 f83c 	bl	80019ea <_ZSt10_ConstructIN6mjbots6moteus10ResolutionEJEEvPT_DpOT0_>
	      ++__first;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3301      	adds	r3, #1
 8001976:	607b      	str	r3, [r7, #4]
	      __first = std::fill_n(__first, __n - 1, *__val);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	3b01      	subs	r3, #1
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	4619      	mov	r1, r3
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f842 	bl	8001a0a <_ZSt6fill_nIPN6mjbots6moteus10ResolutionEjS2_ET_S4_T0_RKT1_>
 8001986:	6078      	str	r0, [r7, #4]
	  return __first;
 8001988:	687b      	ldr	r3, [r7, #4]
	}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <_ZNSt15__new_allocatorIN6mjbots6moteus10ResolutionEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	617b      	str	r3, [r7, #20]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80019a2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	4293      	cmp	r3, r2
 80019aa:	bf8c      	ite	hi
 80019ac:	2301      	movhi	r3, #1
 80019ae:	2300      	movls	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	bf14      	ite	ne
 80019b6:	2301      	movne	r3, #1
 80019b8:	2300      	moveq	r3, #0
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <_ZNSt15__new_allocatorIN6mjbots6moteus10ResolutionEE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 80019c0:	f002 fff9 	bl	80049b6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80019c4:	68b8      	ldr	r0, [r7, #8]
 80019c6:	f002 ffe5 	bl	8004994 <_Znwj>
 80019ca:	4603      	mov	r3, r0
      }
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_ZSt11__addressofIN6mjbots6moteus10ResolutionEEPT_RS3_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <_ZSt10_ConstructIN6mjbots6moteus10ResolutionEJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4619      	mov	r1, r3
 80019f6:	2001      	movs	r0, #1
 80019f8:	f7fe fe00 	bl	80005fc <_ZnwjPv>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
    }
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <_ZSt6fill_nIPN6mjbots6moteus10ResolutionEjS2_ET_S4_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8001a0a:	b5b0      	push	{r4, r5, r7, lr}
 8001a0c:	b084      	sub	sp, #16
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, const _Tp&>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8001a16:	68fc      	ldr	r4, [r7, #12]
 8001a18:	68b8      	ldr	r0, [r7, #8]
 8001a1a:	f7fe fdfb 	bl	8000614 <_ZSt17__size_to_integerj>
 8001a1e:	4601      	mov	r1, r0
  template<typename _Iter>
    __attribute__((__always_inline__))
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001a20:	bf00      	nop
 8001a22:	462b      	mov	r3, r5
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	4620      	mov	r0, r4
 8001a28:	f000 f805 	bl	8001a36 <_ZSt10__fill_n_aIPN6mjbots6moteus10ResolutionEjS2_ET_S4_T0_RKT1_St26random_access_iterator_tag>
 8001a2c:	4603      	mov	r3, r0
			       std::__iterator_category(__first));
    }
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bdb0      	pop	{r4, r5, r7, pc}

08001a36 <_ZSt10__fill_n_aIPN6mjbots6moteus10ResolutionEjS2_ET_S4_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <_ZSt10__fill_n_aIPN6mjbots6moteus10ResolutionEjS2_ET_S4_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	e00a      	b.n	8001a64 <_ZSt10__fill_n_aIPN6mjbots6moteus10ResolutionEjS2_ET_S4_T0_RKT1_St26random_access_iterator_tag+0x2e>
      std::__fill_a(__first, __first + __n, __value);
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	4413      	add	r3, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	4619      	mov	r1, r3
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f000 f807 	bl	8001a6c <_ZSt8__fill_aIPN6mjbots6moteus10ResolutionES2_EvT_S4_RKT0_>
      return __first + __n;
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	4413      	add	r3, r2
    }
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <_ZSt8__fill_aIPN6mjbots6moteus10ResolutionES2_EvT_S4_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	68b9      	ldr	r1, [r7, #8]
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 f804 	bl	8001a8a <_ZSt9__fill_a1IPN6mjbots6moteus10ResolutionES2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SB_RKS7_>
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <_ZSt9__fill_a1IPN6mjbots6moteus10ResolutionES2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SB_RKS7_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8001a8a:	b480      	push	{r7}
 8001a8c:	b085      	sub	sp, #20
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 8001a96:	e007      	b.n	8001aa8 <_ZSt9__fill_a1IPN6mjbots6moteus10ResolutionES2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SB_RKS7_+0x1e>
	*__first = __value;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f993 2000 	ldrsb.w	r2, [r3]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	701a      	strb	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d1f3      	bne.n	8001a98 <_ZSt9__fill_a1IPN6mjbots6moteus10ResolutionES2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SB_RKS7_+0xe>
    }
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b098      	sub	sp, #96	@ 0x60
 8001ac4:	af00      	add	r7, sp, #0
}());
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fb0a 	bl	80010e8 <_ZNK7moteus1MUlvE_clEv>
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4903      	ldr	r1, [pc, #12]	@ (8001ae8 <_Z41__static_initialization_and_destruction_0v+0x28>)
 8001ada:	4804      	ldr	r0, [pc, #16]	@ (8001aec <_Z41__static_initialization_and_destruction_0v+0x2c>)
 8001adc:	f7ff faa7 	bl	800102e <_ZN6MoteusC1ER19FDCAN_HandleTypeDefRKNS_7OptionsE>
}
 8001ae0:	bf00      	nop
 8001ae2:	3760      	adds	r7, #96	@ 0x60
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	2000008c 	.word	0x2000008c
 8001aec:	20000288 	.word	0x20000288

08001af0 <_GLOBAL__sub_I_hfdcan1>:
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	f7ff ffe4 	bl	8001ac0 <_Z41__static_initialization_and_destruction_0v>
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b02:	4b0f      	ldr	r3, [pc, #60]	@ (8001b40 <HAL_MspInit+0x44>)
 8001b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b06:	4a0e      	ldr	r2, [pc, #56]	@ (8001b40 <HAL_MspInit+0x44>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <HAL_MspInit+0x44>)
 8001b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	4b09      	ldr	r3, [pc, #36]	@ (8001b40 <HAL_MspInit+0x44>)
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1e:	4a08      	ldr	r2, [pc, #32]	@ (8001b40 <HAL_MspInit+0x44>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b24:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b26:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <HAL_MspInit+0x44>)
 8001b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001b32:	f001 f8a5 	bl	8002c80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000

08001b44 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b09e      	sub	sp, #120	@ 0x78
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	2254      	movs	r2, #84	@ 0x54
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f003 f855 	bl	8004c14 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a20      	ldr	r2, [pc, #128]	@ (8001bf0 <HAL_FDCAN_MspInit+0xac>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d139      	bne.n	8001be8 <HAL_FDCAN_MspInit+0xa4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001b74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b78:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001b7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b80:	f107 0310 	add.w	r3, r7, #16
 8001b84:	4618      	mov	r0, r3
 8001b86:	f001 fdb9 	bl	80036fc <HAL_RCCEx_PeriphCLKConfig>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001b90:	f7ff fc80 	bl	8001494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001b94:	4b17      	ldr	r3, [pc, #92]	@ (8001bf4 <HAL_FDCAN_MspInit+0xb0>)
 8001b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b98:	4a16      	ldr	r2, [pc, #88]	@ (8001bf4 <HAL_FDCAN_MspInit+0xb0>)
 8001b9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ba0:	4b14      	ldr	r3, [pc, #80]	@ (8001bf4 <HAL_FDCAN_MspInit+0xb0>)
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bac:	4b11      	ldr	r3, [pc, #68]	@ (8001bf4 <HAL_FDCAN_MspInit+0xb0>)
 8001bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb0:	4a10      	ldr	r2, [pc, #64]	@ (8001bf4 <HAL_FDCAN_MspInit+0xb0>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf4 <HAL_FDCAN_MspInit+0xb0>)
 8001bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001bc4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001bc8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001bd6:	2309      	movs	r3, #9
 8001bd8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001bde:	4619      	mov	r1, r3
 8001be0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001be4:	f000 fdf4 	bl	80027d0 <HAL_GPIO_Init>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001be8:	bf00      	nop
 8001bea:	3778      	adds	r7, #120	@ 0x78
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40006400 	.word	0x40006400
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b09e      	sub	sp, #120	@ 0x78
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	2254      	movs	r2, #84	@ 0x54
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f002 fffb 	bl	8004c14 <memset>
  if(huart->Instance==USART2)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a1f      	ldr	r2, [pc, #124]	@ (8001ca0 <HAL_UART_MspInit+0xa8>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d136      	bne.n	8001c96 <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c30:	f107 0310 	add.w	r3, r7, #16
 8001c34:	4618      	mov	r0, r3
 8001c36:	f001 fd61 	bl	80036fc <HAL_RCCEx_PeriphCLKConfig>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c40:	f7ff fc28 	bl	8001494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c44:	4b17      	ldr	r3, [pc, #92]	@ (8001ca4 <HAL_UART_MspInit+0xac>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c48:	4a16      	ldr	r2, [pc, #88]	@ (8001ca4 <HAL_UART_MspInit+0xac>)
 8001c4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c50:	4b14      	ldr	r3, [pc, #80]	@ (8001ca4 <HAL_UART_MspInit+0xac>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <HAL_UART_MspInit+0xac>)
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c60:	4a10      	ldr	r2, [pc, #64]	@ (8001ca4 <HAL_UART_MspInit+0xac>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c68:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <HAL_UART_MspInit+0xac>)
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c74:	230c      	movs	r3, #12
 8001c76:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c84:	2307      	movs	r3, #7
 8001c86:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c88:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c92:	f000 fd9d 	bl	80027d0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c96:	bf00      	nop
 8001c98:	3778      	adds	r7, #120	@ 0x78
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40004400 	.word	0x40004400
 8001ca4:	40021000 	.word	0x40021000

08001ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <NMI_Handler+0x4>

08001cb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <HardFault_Handler+0x4>

08001cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <MemManage_Handler+0x4>

08001cc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <BusFault_Handler+0x4>

08001cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <UsageFault_Handler+0x4>

08001cd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cfe:	f000 f9b9 	bl	8002074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f000 f93c 	bl	8001f88 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return 1;
 8001d18:	2301      	movs	r3, #1
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <_kill>:

int _kill(int pid, int sig)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d2e:	f002 ffcd 	bl	8004ccc <__errno>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2216      	movs	r2, #22
 8001d36:	601a      	str	r2, [r3, #0]
  return -1;
 8001d38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <_exit>:

void _exit (int status)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ffe7 	bl	8001d24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d56:	bf00      	nop
 8001d58:	e7fd      	b.n	8001d56 <_exit+0x12>
	...

08001d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d64:	4a14      	ldr	r2, [pc, #80]	@ (8001db8 <_sbrk+0x5c>)
 8001d66:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <_sbrk+0x60>)
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d70:	4b13      	ldr	r3, [pc, #76]	@ (8001dc0 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d78:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <_sbrk+0x64>)
 8001d7a:	4a12      	ldr	r2, [pc, #72]	@ (8001dc4 <_sbrk+0x68>)
 8001d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7e:	4b10      	ldr	r3, [pc, #64]	@ (8001dc0 <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d207      	bcs.n	8001d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d8c:	f002 ff9e 	bl	8004ccc <__errno>
 8001d90:	4603      	mov	r3, r0
 8001d92:	220c      	movs	r2, #12
 8001d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9a:	e009      	b.n	8001db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d9c:	4b08      	ldr	r3, [pc, #32]	@ (8001dc0 <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da2:	4b07      	ldr	r3, [pc, #28]	@ (8001dc0 <_sbrk+0x64>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a05      	ldr	r2, [pc, #20]	@ (8001dc0 <_sbrk+0x64>)
 8001dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dae:	68fb      	ldr	r3, [r7, #12]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20020000 	.word	0x20020000
 8001dbc:	00000400 	.word	0x00000400
 8001dc0:	200004b0 	.word	0x200004b0
 8001dc4:	20000610 	.word	0x20000610

08001dc8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <SystemInit+0x20>)
 8001dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dd2:	4a05      	ldr	r2, [pc, #20]	@ (8001de8 <SystemInit+0x20>)
 8001dd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001dec:	480d      	ldr	r0, [pc, #52]	@ (8001e24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001df0:	f7ff ffea 	bl	8001dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001df4:	480c      	ldr	r0, [pc, #48]	@ (8001e28 <LoopForever+0x6>)
  ldr r1, =_edata
 8001df6:	490d      	ldr	r1, [pc, #52]	@ (8001e2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001df8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e30 <LoopForever+0xe>)
  movs r3, #0
 8001dfa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001dfc:	e002      	b.n	8001e04 <LoopCopyDataInit>

08001dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e02:	3304      	adds	r3, #4

08001e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e08:	d3f9      	bcc.n	8001dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001e38 <LoopForever+0x16>)
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e10:	e001      	b.n	8001e16 <LoopFillZerobss>

08001e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e14:	3204      	adds	r2, #4

08001e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e18:	d3fb      	bcc.n	8001e12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e1a:	f002 ff5d 	bl	8004cd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e1e:	f7ff f973 	bl	8001108 <main>

08001e22 <LoopForever>:

LoopForever:
    b LoopForever
 8001e22:	e7fe      	b.n	8001e22 <LoopForever>
  ldr   r0, =_estack
 8001e24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e2c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001e30:	08005520 	.word	0x08005520
  ldr r2, =_sbss
 8001e34:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e38:	2000060c 	.word	0x2000060c

08001e3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e3c:	e7fe      	b.n	8001e3c <ADC1_2_IRQHandler>
	...

08001e40 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8001e4a:	4b16      	ldr	r3, [pc, #88]	@ (8001ea4 <BSP_LED_Init+0x64>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4e:	4a15      	ldr	r2, [pc, #84]	@ (8001ea4 <BSP_LED_Init+0x64>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e56:	4b13      	ldr	r3, [pc, #76]	@ (8001ea4 <BSP_LED_Init+0x64>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8001e62:	2320      	movs	r3, #32
 8001e64:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001e66:	2301      	movs	r3, #1
 8001e68:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea8 <BSP_LED_Init+0x68>)
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	f107 020c 	add.w	r2, r7, #12
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fca5 	bl	80027d0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	4a07      	ldr	r2, [pc, #28]	@ (8001ea8 <BSP_LED_Init+0x68>)
 8001e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8e:	2120      	movs	r1, #32
 8001e90:	2200      	movs	r2, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fe1e 	bl	8002ad4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3720      	adds	r7, #32
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	20000004 	.word	0x20000004

08001eac <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	460a      	mov	r2, r1
 8001eb6:	71fb      	strb	r3, [r7, #7]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8001ebc:	4b2c      	ldr	r3, [pc, #176]	@ (8001f70 <BSP_PB_Init+0xc4>)
 8001ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec0:	4a2b      	ldr	r2, [pc, #172]	@ (8001f70 <BSP_PB_Init+0xc4>)
 8001ec2:	f043 0304 	orr.w	r3, r3, #4
 8001ec6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ec8:	4b29      	ldr	r3, [pc, #164]	@ (8001f70 <BSP_PB_Init+0xc4>)
 8001eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001ed4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ed8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001eda:	2302      	movs	r3, #2
 8001edc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001ee2:	79bb      	ldrb	r3, [r7, #6]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10c      	bne.n	8001f02 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	4a21      	ldr	r2, [pc, #132]	@ (8001f74 <BSP_PB_Init+0xc8>)
 8001ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef4:	f107 020c 	add.w	r2, r7, #12
 8001ef8:	4611      	mov	r1, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fc68 	bl	80027d0 <HAL_GPIO_Init>
 8001f00:	e031      	b.n	8001f66 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001f02:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f06:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	4a1a      	ldr	r2, [pc, #104]	@ (8001f74 <BSP_PB_Init+0xc8>)
 8001f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f10:	f107 020c 	add.w	r2, r7, #12
 8001f14:	4611      	mov	r1, r2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 fc5a 	bl	80027d0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4a15      	ldr	r2, [pc, #84]	@ (8001f78 <BSP_PB_Init+0xcc>)
 8001f22:	441a      	add	r2, r3
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	4915      	ldr	r1, [pc, #84]	@ (8001f7c <BSP_PB_Init+0xd0>)
 8001f28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4610      	mov	r0, r2
 8001f30:	f000 f9ea 	bl	8002308 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4a0f      	ldr	r2, [pc, #60]	@ (8001f78 <BSP_PB_Init+0xcc>)
 8001f3a:	1898      	adds	r0, r3, r2
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	4a10      	ldr	r2, [pc, #64]	@ (8001f80 <BSP_PB_Init+0xd4>)
 8001f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f44:	461a      	mov	r2, r3
 8001f46:	2100      	movs	r1, #0
 8001f48:	f000 f9c1 	bl	80022ce <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001f4c:	2028      	movs	r0, #40	@ 0x28
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	4a0c      	ldr	r2, [pc, #48]	@ (8001f84 <BSP_PB_Init+0xd8>)
 8001f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f56:	2200      	movs	r2, #0
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f000 f984 	bl	8002266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001f5e:	2328      	movs	r3, #40	@ 0x28
 8001f60:	4618      	mov	r0, r3
 8001f62:	f000 f99a 	bl	800229a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3720      	adds	r7, #32
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40021000 	.word	0x40021000
 8001f74:	20000008 	.word	0x20000008
 8001f78:	200004b4 	.word	0x200004b4
 8001f7c:	080054ac 	.word	0x080054ac
 8001f80:	2000000c 	.word	0x2000000c
 8001f84:	20000010 	.word	0x20000010

08001f88 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4a04      	ldr	r2, [pc, #16]	@ (8001fa8 <BSP_PB_IRQHandler+0x20>)
 8001f98:	4413      	add	r3, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 f9c8 	bl	8002330 <HAL_EXTI_IRQHandler>
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	200004b4 	.word	0x200004b4

08001fac <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f7ff fff0 	bl	8001fac <BSP_PB_Callback>
}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fda:	2003      	movs	r0, #3
 8001fdc:	f000 f938 	bl	8002250 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f000 f80d 	bl	8002000 <HAL_InitTick>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	71fb      	strb	r3, [r7, #7]
 8001ff0:	e001      	b.n	8001ff6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ff2:	f7ff fd83 	bl	8001afc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ff6:	79fb      	ldrb	r3, [r7, #7]

}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800200c:	4b16      	ldr	r3, [pc, #88]	@ (8002068 <HAL_InitTick+0x68>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d022      	beq.n	800205a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002014:	4b15      	ldr	r3, [pc, #84]	@ (800206c <HAL_InitTick+0x6c>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b13      	ldr	r3, [pc, #76]	@ (8002068 <HAL_InitTick+0x68>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002020:	fbb1 f3f3 	udiv	r3, r1, r3
 8002024:	fbb2 f3f3 	udiv	r3, r2, r3
 8002028:	4618      	mov	r0, r3
 800202a:	f000 f944 	bl	80022b6 <HAL_SYSTICK_Config>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10f      	bne.n	8002054 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b0f      	cmp	r3, #15
 8002038:	d809      	bhi.n	800204e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800203a:	2200      	movs	r2, #0
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	f04f 30ff 	mov.w	r0, #4294967295
 8002042:	f000 f910 	bl	8002266 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002046:	4a0a      	ldr	r2, [pc, #40]	@ (8002070 <HAL_InitTick+0x70>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	e007      	b.n	800205e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
 8002052:	e004      	b.n	800205e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
 8002058:	e001      	b.n	800205e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800205e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000018 	.word	0x20000018
 800206c:	20000000 	.word	0x20000000
 8002070:	20000014 	.word	0x20000014

08002074 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002078:	4b05      	ldr	r3, [pc, #20]	@ (8002090 <HAL_IncTick+0x1c>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b05      	ldr	r3, [pc, #20]	@ (8002094 <HAL_IncTick+0x20>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4413      	add	r3, r2
 8002082:	4a03      	ldr	r2, [pc, #12]	@ (8002090 <HAL_IncTick+0x1c>)
 8002084:	6013      	str	r3, [r2, #0]
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	200004bc 	.word	0x200004bc
 8002094:	20000018 	.word	0x20000018

08002098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return uwTick;
 800209c:	4b03      	ldr	r3, [pc, #12]	@ (80020ac <HAL_GetTick+0x14>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	200004bc 	.word	0x200004bc

080020b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c0:	4b0c      	ldr	r3, [pc, #48]	@ (80020f4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020cc:	4013      	ands	r3, r2
 80020ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020e2:	4a04      	ldr	r2, [pc, #16]	@ (80020f4 <__NVIC_SetPriorityGrouping+0x44>)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	60d3      	str	r3, [r2, #12]
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020fc:	4b04      	ldr	r3, [pc, #16]	@ (8002110 <__NVIC_GetPriorityGrouping+0x18>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	f003 0307 	and.w	r3, r3, #7
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	2b00      	cmp	r3, #0
 8002124:	db0b      	blt.n	800213e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	f003 021f 	and.w	r2, r3, #31
 800212c:	4907      	ldr	r1, [pc, #28]	@ (800214c <__NVIC_EnableIRQ+0x38>)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	2001      	movs	r0, #1
 8002136:	fa00 f202 	lsl.w	r2, r0, r2
 800213a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000e100 	.word	0xe000e100

08002150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	6039      	str	r1, [r7, #0]
 800215a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	2b00      	cmp	r3, #0
 8002162:	db0a      	blt.n	800217a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	490c      	ldr	r1, [pc, #48]	@ (800219c <__NVIC_SetPriority+0x4c>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	0112      	lsls	r2, r2, #4
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	440b      	add	r3, r1
 8002174:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002178:	e00a      	b.n	8002190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4908      	ldr	r1, [pc, #32]	@ (80021a0 <__NVIC_SetPriority+0x50>)
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	3b04      	subs	r3, #4
 8002188:	0112      	lsls	r2, r2, #4
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	440b      	add	r3, r1
 800218e:	761a      	strb	r2, [r3, #24]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000e100 	.word	0xe000e100
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	@ 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f1c3 0307 	rsb	r3, r3, #7
 80021be:	2b04      	cmp	r3, #4
 80021c0:	bf28      	it	cs
 80021c2:	2304      	movcs	r3, #4
 80021c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3304      	adds	r3, #4
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d902      	bls.n	80021d4 <NVIC_EncodePriority+0x30>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b03      	subs	r3, #3
 80021d2:	e000      	b.n	80021d6 <NVIC_EncodePriority+0x32>
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	f04f 32ff 	mov.w	r2, #4294967295
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	401a      	ands	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43d9      	mvns	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	4313      	orrs	r3, r2
         );
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3724      	adds	r7, #36	@ 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3b01      	subs	r3, #1
 8002218:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800221c:	d301      	bcc.n	8002222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221e:	2301      	movs	r3, #1
 8002220:	e00f      	b.n	8002242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002222:	4a0a      	ldr	r2, [pc, #40]	@ (800224c <SysTick_Config+0x40>)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800222a:	210f      	movs	r1, #15
 800222c:	f04f 30ff 	mov.w	r0, #4294967295
 8002230:	f7ff ff8e 	bl	8002150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002234:	4b05      	ldr	r3, [pc, #20]	@ (800224c <SysTick_Config+0x40>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223a:	4b04      	ldr	r3, [pc, #16]	@ (800224c <SysTick_Config+0x40>)
 800223c:	2207      	movs	r2, #7
 800223e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	e000e010 	.word	0xe000e010

08002250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff ff29 	bl	80020b0 <__NVIC_SetPriorityGrouping>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
 8002272:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002274:	f7ff ff40 	bl	80020f8 <__NVIC_GetPriorityGrouping>
 8002278:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	6978      	ldr	r0, [r7, #20]
 8002280:	f7ff ff90 	bl	80021a4 <NVIC_EncodePriority>
 8002284:	4602      	mov	r2, r0
 8002286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff5f 	bl	8002150 <__NVIC_SetPriority>
}
 8002292:	bf00      	nop
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff33 	bl	8002114 <__NVIC_EnableIRQ>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff ffa4 	bl	800220c <SysTick_Config>
 80022c4:	4603      	mov	r3, r0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80022ce:	b480      	push	{r7}
 80022d0:	b087      	sub	sp, #28
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	460b      	mov	r3, r1
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 80022e0:	7afb      	ldrb	r3, [r7, #11]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d103      	bne.n	80022ee <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	605a      	str	r2, [r3, #4]
      break;
 80022ec:	e005      	b.n	80022fa <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	75fb      	strb	r3, [r7, #23]
      break;
 80022f8:	bf00      	nop
  }

  return status;
 80022fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	371c      	adds	r7, #28
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e003      	b.n	8002324 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002322:	2300      	movs	r3, #0
  }
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	0c1b      	lsrs	r3, r3, #16
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	2201      	movs	r2, #1
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <HAL_EXTI_IRQHandler+0x5c>)
 800235a:	4413      	add	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4013      	ands	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	4798      	blx	r3
    }
  }
}
 8002382:	bf00      	nop
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40010414 	.word	0x40010414

08002390 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e147      	b.n	8002632 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff fbc4 	bl	8001b44 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0210 	bic.w	r2, r2, #16
 80023ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023cc:	f7ff fe64 	bl	8002098 <HAL_GetTick>
 80023d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80023d2:	e012      	b.n	80023fa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80023d4:	f7ff fe60 	bl	8002098 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b0a      	cmp	r3, #10
 80023e0:	d90b      	bls.n	80023fa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023e6:	f043 0201 	orr.w	r2, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2203      	movs	r2, #3
 80023f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e11b      	b.n	8002632 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b08      	cmp	r3, #8
 8002406:	d0e5      	beq.n	80023d4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699a      	ldr	r2, [r3, #24]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0201 	orr.w	r2, r2, #1
 8002416:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002418:	f7ff fe3e 	bl	8002098 <HAL_GetTick>
 800241c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800241e:	e012      	b.n	8002446 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002420:	f7ff fe3a 	bl	8002098 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b0a      	cmp	r3, #10
 800242c:	d90b      	bls.n	8002446 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002432:	f043 0201 	orr.w	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2203      	movs	r2, #3
 800243e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e0f5      	b.n	8002632 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0e5      	beq.n	8002420 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0202 	orr.w	r2, r2, #2
 8002462:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a74      	ldr	r2, [pc, #464]	@ (800263c <HAL_FDCAN_Init+0x2ac>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d103      	bne.n	8002476 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800246e:	4a74      	ldr	r2, [pc, #464]	@ (8002640 <HAL_FDCAN_Init+0x2b0>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	7c1b      	ldrb	r3, [r3, #16]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d108      	bne.n	8002490 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699a      	ldr	r2, [r3, #24]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800248c:	619a      	str	r2, [r3, #24]
 800248e:	e007      	b.n	80024a0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699a      	ldr	r2, [r3, #24]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800249e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	7c5b      	ldrb	r3, [r3, #17]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d108      	bne.n	80024ba <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024b6:	619a      	str	r2, [r3, #24]
 80024b8:	e007      	b.n	80024ca <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699a      	ldr	r2, [r3, #24]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80024c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	7c9b      	ldrb	r3, [r3, #18]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d108      	bne.n	80024e4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699a      	ldr	r2, [r3, #24]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80024e0:	619a      	str	r2, [r3, #24]
 80024e2:	e007      	b.n	80024f4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699a      	ldr	r2, [r3, #24]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80024f2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	699a      	ldr	r2, [r3, #24]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002518:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0210 	bic.w	r2, r2, #16
 8002528:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d108      	bne.n	8002544 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699a      	ldr	r2, [r3, #24]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0204 	orr.w	r2, r2, #4
 8002540:	619a      	str	r2, [r3, #24]
 8002542:	e02c      	b.n	800259e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d028      	beq.n	800259e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b02      	cmp	r3, #2
 8002552:	d01c      	beq.n	800258e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699a      	ldr	r2, [r3, #24]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002562:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	691a      	ldr	r2, [r3, #16]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0210 	orr.w	r2, r2, #16
 8002572:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	2b03      	cmp	r3, #3
 800257a:	d110      	bne.n	800259e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699a      	ldr	r2, [r3, #24]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0220 	orr.w	r2, r2, #32
 800258a:	619a      	str	r2, [r3, #24]
 800258c:	e007      	b.n	800259e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699a      	ldr	r2, [r3, #24]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 0220 	orr.w	r2, r2, #32
 800259c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80025ae:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80025b6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	3b01      	subs	r3, #1
 80025c0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80025c6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80025c8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80025d2:	d115      	bne.n	8002600 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025de:	3b01      	subs	r3, #1
 80025e0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80025e2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e8:	3b01      	subs	r3, #1
 80025ea:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80025ec:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	3b01      	subs	r3, #1
 80025f6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80025fc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80025fe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f86e 	bl	80026f8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40006400 	.word	0x40006400
 8002640:	40006500 	.word	0x40006500

08002644 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b01      	cmp	r3, #1
 800265c:	d116      	bne.n	800268c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002666:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	011a      	lsls	r2, r3, #4
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	431a      	orrs	r2, r3
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	431a      	orrs	r2, r3
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	431a      	orrs	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	e006      	b.n	800269a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002690:	f043 0204 	orr.w	r2, r3, #4
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
  }
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d110      	bne.n	80026dc <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2202      	movs	r2, #2
 80026be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	699a      	ldr	r2, [r3, #24]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0201 	bic.w	r2, r2, #1
 80026d0:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80026d8:	2300      	movs	r3, #0
 80026da:	e006      	b.n	80026ea <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026e0:	f043 0204 	orr.w	r2, r3, #4
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
  }
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002700:	4b30      	ldr	r3, [pc, #192]	@ (80027c4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8002702:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a2f      	ldr	r2, [pc, #188]	@ (80027c8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d103      	bne.n	8002716 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002714:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a2c      	ldr	r2, [pc, #176]	@ (80027cc <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d103      	bne.n	8002728 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8002726:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002736:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800273e:	041a      	lsls	r2, r3, #16
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800275c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002764:	061a      	lsls	r2, r3, #24
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	e005      	b.n	80027aa <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	3304      	adds	r3, #4
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d3f3      	bcc.n	800279e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80027b6:	bf00      	nop
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	4000a400 	.word	0x4000a400
 80027c8:	40006800 	.word	0x40006800
 80027cc:	40006c00 	.word	0x40006c00

080027d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80027de:	e15a      	b.n	8002a96 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	2101      	movs	r1, #1
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ec:	4013      	ands	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 814c 	beq.w	8002a90 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	2b01      	cmp	r3, #1
 8002802:	d005      	beq.n	8002810 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800280c:	2b02      	cmp	r3, #2
 800280e:	d130      	bne.n	8002872 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	2203      	movs	r2, #3
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4013      	ands	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002846:	2201      	movs	r2, #1
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	f003 0201 	and.w	r2, r3, #1
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b03      	cmp	r3, #3
 800287c:	d017      	beq.n	80028ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	2203      	movs	r2, #3
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4013      	ands	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d123      	bne.n	8002902 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	08da      	lsrs	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3208      	adds	r2, #8
 80028c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	220f      	movs	r2, #15
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4013      	ands	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	691a      	ldr	r2, [r3, #16]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	08da      	lsrs	r2, r3, #3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3208      	adds	r2, #8
 80028fc:	6939      	ldr	r1, [r7, #16]
 80028fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	2203      	movs	r2, #3
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4013      	ands	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 0203 	and.w	r2, r3, #3
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 80a6 	beq.w	8002a90 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002944:	4b5b      	ldr	r3, [pc, #364]	@ (8002ab4 <HAL_GPIO_Init+0x2e4>)
 8002946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002948:	4a5a      	ldr	r2, [pc, #360]	@ (8002ab4 <HAL_GPIO_Init+0x2e4>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002950:	4b58      	ldr	r3, [pc, #352]	@ (8002ab4 <HAL_GPIO_Init+0x2e4>)
 8002952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800295c:	4a56      	ldr	r2, [pc, #344]	@ (8002ab8 <HAL_GPIO_Init+0x2e8>)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	089b      	lsrs	r3, r3, #2
 8002962:	3302      	adds	r3, #2
 8002964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002968:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	220f      	movs	r2, #15
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002986:	d01f      	beq.n	80029c8 <HAL_GPIO_Init+0x1f8>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a4c      	ldr	r2, [pc, #304]	@ (8002abc <HAL_GPIO_Init+0x2ec>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d019      	beq.n	80029c4 <HAL_GPIO_Init+0x1f4>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a4b      	ldr	r2, [pc, #300]	@ (8002ac0 <HAL_GPIO_Init+0x2f0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d013      	beq.n	80029c0 <HAL_GPIO_Init+0x1f0>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a4a      	ldr	r2, [pc, #296]	@ (8002ac4 <HAL_GPIO_Init+0x2f4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d00d      	beq.n	80029bc <HAL_GPIO_Init+0x1ec>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a49      	ldr	r2, [pc, #292]	@ (8002ac8 <HAL_GPIO_Init+0x2f8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d007      	beq.n	80029b8 <HAL_GPIO_Init+0x1e8>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a48      	ldr	r2, [pc, #288]	@ (8002acc <HAL_GPIO_Init+0x2fc>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d101      	bne.n	80029b4 <HAL_GPIO_Init+0x1e4>
 80029b0:	2305      	movs	r3, #5
 80029b2:	e00a      	b.n	80029ca <HAL_GPIO_Init+0x1fa>
 80029b4:	2306      	movs	r3, #6
 80029b6:	e008      	b.n	80029ca <HAL_GPIO_Init+0x1fa>
 80029b8:	2304      	movs	r3, #4
 80029ba:	e006      	b.n	80029ca <HAL_GPIO_Init+0x1fa>
 80029bc:	2303      	movs	r3, #3
 80029be:	e004      	b.n	80029ca <HAL_GPIO_Init+0x1fa>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e002      	b.n	80029ca <HAL_GPIO_Init+0x1fa>
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <HAL_GPIO_Init+0x1fa>
 80029c8:	2300      	movs	r3, #0
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	f002 0203 	and.w	r2, r2, #3
 80029d0:	0092      	lsls	r2, r2, #2
 80029d2:	4093      	lsls	r3, r2
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029da:	4937      	ldr	r1, [pc, #220]	@ (8002ab8 <HAL_GPIO_Init+0x2e8>)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	089b      	lsrs	r3, r3, #2
 80029e0:	3302      	adds	r3, #2
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029e8:	4b39      	ldr	r3, [pc, #228]	@ (8002ad0 <HAL_GPIO_Init+0x300>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a0c:	4a30      	ldr	r2, [pc, #192]	@ (8002ad0 <HAL_GPIO_Init+0x300>)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a12:	4b2f      	ldr	r3, [pc, #188]	@ (8002ad0 <HAL_GPIO_Init+0x300>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a36:	4a26      	ldr	r2, [pc, #152]	@ (8002ad0 <HAL_GPIO_Init+0x300>)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002a3c:	4b24      	ldr	r3, [pc, #144]	@ (8002ad0 <HAL_GPIO_Init+0x300>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	43db      	mvns	r3, r3
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a60:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad0 <HAL_GPIO_Init+0x300>)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a66:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad0 <HAL_GPIO_Init+0x300>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4013      	ands	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a8a:	4a11      	ldr	r2, [pc, #68]	@ (8002ad0 <HAL_GPIO_Init+0x300>)
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	3301      	adds	r3, #1
 8002a94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f47f ae9d 	bne.w	80027e0 <HAL_GPIO_Init+0x10>
  }
}
 8002aa6:	bf00      	nop
 8002aa8:	bf00      	nop
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40010000 	.word	0x40010000
 8002abc:	48000400 	.word	0x48000400
 8002ac0:	48000800 	.word	0x48000800
 8002ac4:	48000c00 	.word	0x48000c00
 8002ac8:	48001000 	.word	0x48001000
 8002acc:	48001400 	.word	0x48001400
 8002ad0:	40010400 	.word	0x40010400

08002ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	807b      	strh	r3, [r7, #2]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ae4:	787b      	ldrb	r3, [r7, #1]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aea:	887a      	ldrh	r2, [r7, #2]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002af0:	e002      	b.n	8002af8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002af2:	887a      	ldrh	r2, [r7, #2]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b16:	887a      	ldrh	r2, [r7, #2]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	041a      	lsls	r2, r3, #16
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	43d9      	mvns	r1, r3
 8002b22:	887b      	ldrh	r3, [r7, #2]
 8002b24:	400b      	ands	r3, r1
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	619a      	str	r2, [r3, #24]
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d141      	bne.n	8002bca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b46:	4b4b      	ldr	r3, [pc, #300]	@ (8002c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b52:	d131      	bne.n	8002bb8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b54:	4b47      	ldr	r3, [pc, #284]	@ (8002c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b5a:	4a46      	ldr	r2, [pc, #280]	@ (8002c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b64:	4b43      	ldr	r3, [pc, #268]	@ (8002c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b6c:	4a41      	ldr	r2, [pc, #260]	@ (8002c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b74:	4b40      	ldr	r3, [pc, #256]	@ (8002c78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2232      	movs	r2, #50	@ 0x32
 8002b7a:	fb02 f303 	mul.w	r3, r2, r3
 8002b7e:	4a3f      	ldr	r2, [pc, #252]	@ (8002c7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b80:	fba2 2303 	umull	r2, r3, r2, r3
 8002b84:	0c9b      	lsrs	r3, r3, #18
 8002b86:	3301      	adds	r3, #1
 8002b88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b8a:	e002      	b.n	8002b92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b92:	4b38      	ldr	r3, [pc, #224]	@ (8002c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b9e:	d102      	bne.n	8002ba6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f2      	bne.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ba6:	4b33      	ldr	r3, [pc, #204]	@ (8002c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bb2:	d158      	bne.n	8002c66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e057      	b.n	8002c68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8002c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bbe:	4a2d      	ldr	r2, [pc, #180]	@ (8002c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002bc8:	e04d      	b.n	8002c66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bd0:	d141      	bne.n	8002c56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bd2:	4b28      	ldr	r3, [pc, #160]	@ (8002c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bde:	d131      	bne.n	8002c44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002be0:	4b24      	ldr	r3, [pc, #144]	@ (8002c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002be6:	4a23      	ldr	r2, [pc, #140]	@ (8002c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bf0:	4b20      	ldr	r3, [pc, #128]	@ (8002c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bf8:	4a1e      	ldr	r2, [pc, #120]	@ (8002c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c00:	4b1d      	ldr	r3, [pc, #116]	@ (8002c78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2232      	movs	r2, #50	@ 0x32
 8002c06:	fb02 f303 	mul.w	r3, r2, r3
 8002c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002c7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c10:	0c9b      	lsrs	r3, r3, #18
 8002c12:	3301      	adds	r3, #1
 8002c14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c16:	e002      	b.n	8002c1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c1e:	4b15      	ldr	r3, [pc, #84]	@ (8002c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c2a:	d102      	bne.n	8002c32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f2      	bne.n	8002c18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c32:	4b10      	ldr	r3, [pc, #64]	@ (8002c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c3e:	d112      	bne.n	8002c66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e011      	b.n	8002c68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c44:	4b0b      	ldr	r3, [pc, #44]	@ (8002c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c54:	e007      	b.n	8002c66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c56:	4b07      	ldr	r3, [pc, #28]	@ (8002c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c5e:	4a05      	ldr	r2, [pc, #20]	@ (8002c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	40007000 	.word	0x40007000
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	431bde83 	.word	0x431bde83

08002c80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002c84:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4a04      	ldr	r2, [pc, #16]	@ (8002c9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c8e:	6093      	str	r3, [r2, #8]
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40007000 	.word	0x40007000

08002ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e2fe      	b.n	80032b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d075      	beq.n	8002daa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cbe:	4b97      	ldr	r3, [pc, #604]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cc8:	4b94      	ldr	r3, [pc, #592]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	2b0c      	cmp	r3, #12
 8002cd6:	d102      	bne.n	8002cde <HAL_RCC_OscConfig+0x3e>
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d002      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x44>
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d10b      	bne.n	8002cfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce4:	4b8d      	ldr	r3, [pc, #564]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d05b      	beq.n	8002da8 <HAL_RCC_OscConfig+0x108>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d157      	bne.n	8002da8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e2d9      	b.n	80032b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d04:	d106      	bne.n	8002d14 <HAL_RCC_OscConfig+0x74>
 8002d06:	4b85      	ldr	r3, [pc, #532]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a84      	ldr	r2, [pc, #528]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	e01d      	b.n	8002d50 <HAL_RCC_OscConfig+0xb0>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x98>
 8002d1e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a7e      	ldr	r2, [pc, #504]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b7c      	ldr	r3, [pc, #496]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a7b      	ldr	r2, [pc, #492]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e00b      	b.n	8002d50 <HAL_RCC_OscConfig+0xb0>
 8002d38:	4b78      	ldr	r3, [pc, #480]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a77      	ldr	r2, [pc, #476]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	4b75      	ldr	r3, [pc, #468]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a74      	ldr	r2, [pc, #464]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d013      	beq.n	8002d80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d58:	f7ff f99e 	bl	8002098 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d60:	f7ff f99a 	bl	8002098 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	@ 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e29e      	b.n	80032b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d72:	4b6a      	ldr	r3, [pc, #424]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0xc0>
 8002d7e:	e014      	b.n	8002daa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7ff f98a 	bl	8002098 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d88:	f7ff f986 	bl	8002098 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	@ 0x64
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e28a      	b.n	80032b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d9a:	4b60      	ldr	r3, [pc, #384]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0xe8>
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d075      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db6:	4b59      	ldr	r3, [pc, #356]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dc0:	4b56      	ldr	r3, [pc, #344]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	2b0c      	cmp	r3, #12
 8002dce:	d102      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x136>
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d002      	beq.n	8002ddc <HAL_RCC_OscConfig+0x13c>
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d11f      	bne.n	8002e1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ddc:	4b4f      	ldr	r3, [pc, #316]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <HAL_RCC_OscConfig+0x154>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e25d      	b.n	80032b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df4:	4b49      	ldr	r3, [pc, #292]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	061b      	lsls	r3, r3, #24
 8002e02:	4946      	ldr	r1, [pc, #280]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e08:	4b45      	ldr	r3, [pc, #276]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff f8f7 	bl	8002000 <HAL_InitTick>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d043      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e249      	b.n	80032b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d023      	beq.n	8002e6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e24:	4b3d      	ldr	r3, [pc, #244]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a3c      	ldr	r2, [pc, #240]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002e2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e30:	f7ff f932 	bl	8002098 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e38:	f7ff f92e 	bl	8002098 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e232      	b.n	80032b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e4a:	4b34      	ldr	r3, [pc, #208]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e56:	4b31      	ldr	r3, [pc, #196]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	061b      	lsls	r3, r3, #24
 8002e64:	492d      	ldr	r1, [pc, #180]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
 8002e6a:	e01a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e6c:	4b2b      	ldr	r3, [pc, #172]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a2a      	ldr	r2, [pc, #168]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002e72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7ff f90e 	bl	8002098 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e80:	f7ff f90a 	bl	8002098 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e20e      	b.n	80032b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e92:	4b22      	ldr	r3, [pc, #136]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x1e0>
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ea0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d041      	beq.n	8002f32 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d01c      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb6:	4b19      	ldr	r3, [pc, #100]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ebc:	4a17      	ldr	r2, [pc, #92]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec6:	f7ff f8e7 	bl	8002098 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ece:	f7ff f8e3 	bl	8002098 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e1e7      	b.n	80032b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0ef      	beq.n	8002ece <HAL_RCC_OscConfig+0x22e>
 8002eee:	e020      	b.n	8002f32 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ef6:	4a09      	ldr	r2, [pc, #36]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002ef8:	f023 0301 	bic.w	r3, r3, #1
 8002efc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7ff f8ca 	bl	8002098 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f06:	e00d      	b.n	8002f24 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f08:	f7ff f8c6 	bl	8002098 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d906      	bls.n	8002f24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e1ca      	b.n	80032b0 <HAL_RCC_OscConfig+0x610>
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f24:	4b8c      	ldr	r3, [pc, #560]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8002f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1ea      	bne.n	8002f08 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 80a6 	beq.w	800308c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f40:	2300      	movs	r3, #0
 8002f42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f44:	4b84      	ldr	r3, [pc, #528]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8002f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_OscConfig+0x2b4>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <HAL_RCC_OscConfig+0x2b6>
 8002f54:	2300      	movs	r3, #0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00d      	beq.n	8002f76 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f5a:	4b7f      	ldr	r3, [pc, #508]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5e:	4a7e      	ldr	r2, [pc, #504]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8002f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f64:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f66:	4b7c      	ldr	r3, [pc, #496]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8002f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f72:	2301      	movs	r3, #1
 8002f74:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f76:	4b79      	ldr	r3, [pc, #484]	@ (800315c <HAL_RCC_OscConfig+0x4bc>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d118      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f82:	4b76      	ldr	r3, [pc, #472]	@ (800315c <HAL_RCC_OscConfig+0x4bc>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a75      	ldr	r2, [pc, #468]	@ (800315c <HAL_RCC_OscConfig+0x4bc>)
 8002f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f8e:	f7ff f883 	bl	8002098 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f96:	f7ff f87f 	bl	8002098 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e183      	b.n	80032b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fa8:	4b6c      	ldr	r3, [pc, #432]	@ (800315c <HAL_RCC_OscConfig+0x4bc>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f0      	beq.n	8002f96 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d108      	bne.n	8002fce <HAL_RCC_OscConfig+0x32e>
 8002fbc:	4b66      	ldr	r3, [pc, #408]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8002fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc2:	4a65      	ldr	r2, [pc, #404]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fcc:	e024      	b.n	8003018 <HAL_RCC_OscConfig+0x378>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b05      	cmp	r3, #5
 8002fd4:	d110      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x358>
 8002fd6:	4b60      	ldr	r3, [pc, #384]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8002fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fdc:	4a5e      	ldr	r2, [pc, #376]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8002fde:	f043 0304 	orr.w	r3, r3, #4
 8002fe2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fe6:	4b5c      	ldr	r3, [pc, #368]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8002fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fec:	4a5a      	ldr	r2, [pc, #360]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ff6:	e00f      	b.n	8003018 <HAL_RCC_OscConfig+0x378>
 8002ff8:	4b57      	ldr	r3, [pc, #348]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ffe:	4a56      	ldr	r2, [pc, #344]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8003000:	f023 0301 	bic.w	r3, r3, #1
 8003004:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003008:	4b53      	ldr	r3, [pc, #332]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800300e:	4a52      	ldr	r2, [pc, #328]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8003010:	f023 0304 	bic.w	r3, r3, #4
 8003014:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d016      	beq.n	800304e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003020:	f7ff f83a 	bl	8002098 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003026:	e00a      	b.n	800303e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003028:	f7ff f836 	bl	8002098 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e138      	b.n	80032b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800303e:	4b46      	ldr	r3, [pc, #280]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8003040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0ed      	beq.n	8003028 <HAL_RCC_OscConfig+0x388>
 800304c:	e015      	b.n	800307a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304e:	f7ff f823 	bl	8002098 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003054:	e00a      	b.n	800306c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003056:	f7ff f81f 	bl	8002098 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003064:	4293      	cmp	r3, r2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e121      	b.n	80032b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800306c:	4b3a      	ldr	r3, [pc, #232]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1ed      	bne.n	8003056 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800307a:	7ffb      	ldrb	r3, [r7, #31]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d105      	bne.n	800308c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003080:	4b35      	ldr	r3, [pc, #212]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8003082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003084:	4a34      	ldr	r2, [pc, #208]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8003086:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800308a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	2b00      	cmp	r3, #0
 8003096:	d03c      	beq.n	8003112 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d01c      	beq.n	80030da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 80030a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b0:	f7fe fff2 	bl	8002098 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030b8:	f7fe ffee 	bl	8002098 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e0f2      	b.n	80032b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030ca:	4b23      	ldr	r3, [pc, #140]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 80030cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ef      	beq.n	80030b8 <HAL_RCC_OscConfig+0x418>
 80030d8:	e01b      	b.n	8003112 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030da:	4b1f      	ldr	r3, [pc, #124]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 80030dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ea:	f7fe ffd5 	bl	8002098 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030f2:	f7fe ffd1 	bl	8002098 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e0d5      	b.n	80032b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003104:	4b14      	ldr	r3, [pc, #80]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8003106:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1ef      	bne.n	80030f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 80c9 	beq.w	80032ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800311c:	4b0e      	ldr	r3, [pc, #56]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 030c 	and.w	r3, r3, #12
 8003124:	2b0c      	cmp	r3, #12
 8003126:	f000 8083 	beq.w	8003230 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d15e      	bne.n	80031f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003132:	4b09      	ldr	r3, [pc, #36]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a08      	ldr	r2, [pc, #32]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8003138:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800313c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313e:	f7fe ffab 	bl	8002098 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003144:	e00c      	b.n	8003160 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003146:	f7fe ffa7 	bl	8002098 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d905      	bls.n	8003160 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e0ab      	b.n	80032b0 <HAL_RCC_OscConfig+0x610>
 8003158:	40021000 	.word	0x40021000
 800315c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003160:	4b55      	ldr	r3, [pc, #340]	@ (80032b8 <HAL_RCC_OscConfig+0x618>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1ec      	bne.n	8003146 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800316c:	4b52      	ldr	r3, [pc, #328]	@ (80032b8 <HAL_RCC_OscConfig+0x618>)
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	4b52      	ldr	r3, [pc, #328]	@ (80032bc <HAL_RCC_OscConfig+0x61c>)
 8003172:	4013      	ands	r3, r2
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6a11      	ldr	r1, [r2, #32]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800317c:	3a01      	subs	r2, #1
 800317e:	0112      	lsls	r2, r2, #4
 8003180:	4311      	orrs	r1, r2
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003186:	0212      	lsls	r2, r2, #8
 8003188:	4311      	orrs	r1, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800318e:	0852      	lsrs	r2, r2, #1
 8003190:	3a01      	subs	r2, #1
 8003192:	0552      	lsls	r2, r2, #21
 8003194:	4311      	orrs	r1, r2
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800319a:	0852      	lsrs	r2, r2, #1
 800319c:	3a01      	subs	r2, #1
 800319e:	0652      	lsls	r2, r2, #25
 80031a0:	4311      	orrs	r1, r2
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80031a6:	06d2      	lsls	r2, r2, #27
 80031a8:	430a      	orrs	r2, r1
 80031aa:	4943      	ldr	r1, [pc, #268]	@ (80032b8 <HAL_RCC_OscConfig+0x618>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b0:	4b41      	ldr	r3, [pc, #260]	@ (80032b8 <HAL_RCC_OscConfig+0x618>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a40      	ldr	r2, [pc, #256]	@ (80032b8 <HAL_RCC_OscConfig+0x618>)
 80031b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031bc:	4b3e      	ldr	r3, [pc, #248]	@ (80032b8 <HAL_RCC_OscConfig+0x618>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	4a3d      	ldr	r2, [pc, #244]	@ (80032b8 <HAL_RCC_OscConfig+0x618>)
 80031c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fe ff66 	bl	8002098 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d0:	f7fe ff62 	bl	8002098 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e066      	b.n	80032b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031e2:	4b35      	ldr	r3, [pc, #212]	@ (80032b8 <HAL_RCC_OscConfig+0x618>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0x530>
 80031ee:	e05e      	b.n	80032ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f0:	4b31      	ldr	r3, [pc, #196]	@ (80032b8 <HAL_RCC_OscConfig+0x618>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a30      	ldr	r2, [pc, #192]	@ (80032b8 <HAL_RCC_OscConfig+0x618>)
 80031f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7fe ff4c 	bl	8002098 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003204:	f7fe ff48 	bl	8002098 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e04c      	b.n	80032b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003216:	4b28      	ldr	r3, [pc, #160]	@ (80032b8 <HAL_RCC_OscConfig+0x618>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003222:	4b25      	ldr	r3, [pc, #148]	@ (80032b8 <HAL_RCC_OscConfig+0x618>)
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	4924      	ldr	r1, [pc, #144]	@ (80032b8 <HAL_RCC_OscConfig+0x618>)
 8003228:	4b25      	ldr	r3, [pc, #148]	@ (80032c0 <HAL_RCC_OscConfig+0x620>)
 800322a:	4013      	ands	r3, r2
 800322c:	60cb      	str	r3, [r1, #12]
 800322e:	e03e      	b.n	80032ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e039      	b.n	80032b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800323c:	4b1e      	ldr	r3, [pc, #120]	@ (80032b8 <HAL_RCC_OscConfig+0x618>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f003 0203 	and.w	r2, r3, #3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	429a      	cmp	r2, r3
 800324e:	d12c      	bne.n	80032aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325a:	3b01      	subs	r3, #1
 800325c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325e:	429a      	cmp	r2, r3
 8003260:	d123      	bne.n	80032aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800326e:	429a      	cmp	r2, r3
 8003270:	d11b      	bne.n	80032aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800327e:	429a      	cmp	r2, r3
 8003280:	d113      	bne.n	80032aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328c:	085b      	lsrs	r3, r3, #1
 800328e:	3b01      	subs	r3, #1
 8003290:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003292:	429a      	cmp	r2, r3
 8003294:	d109      	bne.n	80032aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032a0:	085b      	lsrs	r3, r3, #1
 80032a2:	3b01      	subs	r3, #1
 80032a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d001      	beq.n	80032ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3720      	adds	r7, #32
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40021000 	.word	0x40021000
 80032bc:	019f800c 	.word	0x019f800c
 80032c0:	feeefffc 	.word	0xfeeefffc

080032c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e11e      	b.n	800351a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032dc:	4b91      	ldr	r3, [pc, #580]	@ (8003524 <HAL_RCC_ClockConfig+0x260>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d910      	bls.n	800330c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b8e      	ldr	r3, [pc, #568]	@ (8003524 <HAL_RCC_ClockConfig+0x260>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 020f 	bic.w	r2, r3, #15
 80032f2:	498c      	ldr	r1, [pc, #560]	@ (8003524 <HAL_RCC_ClockConfig+0x260>)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fa:	4b8a      	ldr	r3, [pc, #552]	@ (8003524 <HAL_RCC_ClockConfig+0x260>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d001      	beq.n	800330c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e106      	b.n	800351a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d073      	beq.n	8003400 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b03      	cmp	r3, #3
 800331e:	d129      	bne.n	8003374 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003320:	4b81      	ldr	r3, [pc, #516]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0f4      	b.n	800351a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003330:	f000 f99e 	bl	8003670 <RCC_GetSysClockFreqFromPLLSource>
 8003334:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4a7c      	ldr	r2, [pc, #496]	@ (800352c <HAL_RCC_ClockConfig+0x268>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d93f      	bls.n	80033be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800333e:	4b7a      	ldr	r3, [pc, #488]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d009      	beq.n	800335e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003352:	2b00      	cmp	r3, #0
 8003354:	d033      	beq.n	80033be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800335a:	2b00      	cmp	r3, #0
 800335c:	d12f      	bne.n	80033be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800335e:	4b72      	ldr	r3, [pc, #456]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003366:	4a70      	ldr	r2, [pc, #448]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 8003368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800336c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800336e:	2380      	movs	r3, #128	@ 0x80
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	e024      	b.n	80033be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b02      	cmp	r3, #2
 800337a:	d107      	bne.n	800338c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800337c:	4b6a      	ldr	r3, [pc, #424]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d109      	bne.n	800339c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0c6      	b.n	800351a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800338c:	4b66      	ldr	r3, [pc, #408]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0be      	b.n	800351a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800339c:	f000 f8ce 	bl	800353c <HAL_RCC_GetSysClockFreq>
 80033a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4a61      	ldr	r2, [pc, #388]	@ (800352c <HAL_RCC_ClockConfig+0x268>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d909      	bls.n	80033be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033b2:	4a5d      	ldr	r2, [pc, #372]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 80033b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80033ba:	2380      	movs	r3, #128	@ 0x80
 80033bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033be:	4b5a      	ldr	r3, [pc, #360]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f023 0203 	bic.w	r2, r3, #3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	4957      	ldr	r1, [pc, #348]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033d0:	f7fe fe62 	bl	8002098 <HAL_GetTick>
 80033d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d6:	e00a      	b.n	80033ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d8:	f7fe fe5e 	bl	8002098 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e095      	b.n	800351a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ee:	4b4e      	ldr	r3, [pc, #312]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 020c 	and.w	r2, r3, #12
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d1eb      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d023      	beq.n	8003454 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003418:	4b43      	ldr	r3, [pc, #268]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	4a42      	ldr	r2, [pc, #264]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 800341e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003422:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b00      	cmp	r3, #0
 800342e:	d007      	beq.n	8003440 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003430:	4b3d      	ldr	r3, [pc, #244]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003438:	4a3b      	ldr	r2, [pc, #236]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 800343a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800343e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003440:	4b39      	ldr	r3, [pc, #228]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4936      	ldr	r1, [pc, #216]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 800344e:	4313      	orrs	r3, r2
 8003450:	608b      	str	r3, [r1, #8]
 8003452:	e008      	b.n	8003466 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2b80      	cmp	r3, #128	@ 0x80
 8003458:	d105      	bne.n	8003466 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800345a:	4b33      	ldr	r3, [pc, #204]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	4a32      	ldr	r2, [pc, #200]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 8003460:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003464:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003466:	4b2f      	ldr	r3, [pc, #188]	@ (8003524 <HAL_RCC_ClockConfig+0x260>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d21d      	bcs.n	80034b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003474:	4b2b      	ldr	r3, [pc, #172]	@ (8003524 <HAL_RCC_ClockConfig+0x260>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f023 020f 	bic.w	r2, r3, #15
 800347c:	4929      	ldr	r1, [pc, #164]	@ (8003524 <HAL_RCC_ClockConfig+0x260>)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	4313      	orrs	r3, r2
 8003482:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003484:	f7fe fe08 	bl	8002098 <HAL_GetTick>
 8003488:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800348a:	e00a      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800348c:	f7fe fe04 	bl	8002098 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e03b      	b.n	800351a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a2:	4b20      	ldr	r3, [pc, #128]	@ (8003524 <HAL_RCC_ClockConfig+0x260>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d1ed      	bne.n	800348c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d008      	beq.n	80034ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	4917      	ldr	r1, [pc, #92]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d009      	beq.n	80034ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034da:	4b13      	ldr	r3, [pc, #76]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	490f      	ldr	r1, [pc, #60]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034ee:	f000 f825 	bl	800353c <HAL_RCC_GetSysClockFreq>
 80034f2:	4602      	mov	r2, r0
 80034f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003528 <HAL_RCC_ClockConfig+0x264>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	091b      	lsrs	r3, r3, #4
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	490c      	ldr	r1, [pc, #48]	@ (8003530 <HAL_RCC_ClockConfig+0x26c>)
 8003500:	5ccb      	ldrb	r3, [r1, r3]
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	fa22 f303 	lsr.w	r3, r2, r3
 800350a:	4a0a      	ldr	r2, [pc, #40]	@ (8003534 <HAL_RCC_ClockConfig+0x270>)
 800350c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800350e:	4b0a      	ldr	r3, [pc, #40]	@ (8003538 <HAL_RCC_ClockConfig+0x274>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe fd74 	bl	8002000 <HAL_InitTick>
 8003518:	4603      	mov	r3, r0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40022000 	.word	0x40022000
 8003528:	40021000 	.word	0x40021000
 800352c:	04c4b400 	.word	0x04c4b400
 8003530:	08005494 	.word	0x08005494
 8003534:	20000000 	.word	0x20000000
 8003538:	20000014 	.word	0x20000014

0800353c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003542:	4b2c      	ldr	r3, [pc, #176]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b04      	cmp	r3, #4
 800354c:	d102      	bne.n	8003554 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800354e:	4b2a      	ldr	r3, [pc, #168]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	e047      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003554:	4b27      	ldr	r3, [pc, #156]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 030c 	and.w	r3, r3, #12
 800355c:	2b08      	cmp	r3, #8
 800355e:	d102      	bne.n	8003566 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003560:	4b26      	ldr	r3, [pc, #152]	@ (80035fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	e03e      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003566:	4b23      	ldr	r3, [pc, #140]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 030c 	and.w	r3, r3, #12
 800356e:	2b0c      	cmp	r3, #12
 8003570:	d136      	bne.n	80035e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003572:	4b20      	ldr	r3, [pc, #128]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800357c:	4b1d      	ldr	r3, [pc, #116]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	091b      	lsrs	r3, r3, #4
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	3301      	adds	r3, #1
 8003588:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d10c      	bne.n	80035aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003590:	4a1a      	ldr	r2, [pc, #104]	@ (80035fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	4a16      	ldr	r2, [pc, #88]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800359a:	68d2      	ldr	r2, [r2, #12]
 800359c:	0a12      	lsrs	r2, r2, #8
 800359e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	617b      	str	r3, [r7, #20]
      break;
 80035a8:	e00c      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035aa:	4a13      	ldr	r2, [pc, #76]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b2:	4a10      	ldr	r2, [pc, #64]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035b4:	68d2      	ldr	r2, [r2, #12]
 80035b6:	0a12      	lsrs	r2, r2, #8
 80035b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035bc:	fb02 f303 	mul.w	r3, r2, r3
 80035c0:	617b      	str	r3, [r7, #20]
      break;
 80035c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035c4:	4b0b      	ldr	r3, [pc, #44]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	0e5b      	lsrs	r3, r3, #25
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	3301      	adds	r3, #1
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	e001      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80035e4:	693b      	ldr	r3, [r7, #16]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40021000 	.word	0x40021000
 80035f8:	00f42400 	.word	0x00f42400
 80035fc:	016e3600 	.word	0x016e3600

08003600 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003604:	4b03      	ldr	r3, [pc, #12]	@ (8003614 <HAL_RCC_GetHCLKFreq+0x14>)
 8003606:	681b      	ldr	r3, [r3, #0]
}
 8003608:	4618      	mov	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	20000000 	.word	0x20000000

08003618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800361c:	f7ff fff0 	bl	8003600 <HAL_RCC_GetHCLKFreq>
 8003620:	4602      	mov	r2, r0
 8003622:	4b06      	ldr	r3, [pc, #24]	@ (800363c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	0a1b      	lsrs	r3, r3, #8
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	4904      	ldr	r1, [pc, #16]	@ (8003640 <HAL_RCC_GetPCLK1Freq+0x28>)
 800362e:	5ccb      	ldrb	r3, [r1, r3]
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003638:	4618      	mov	r0, r3
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40021000 	.word	0x40021000
 8003640:	080054a4 	.word	0x080054a4

08003644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003648:	f7ff ffda 	bl	8003600 <HAL_RCC_GetHCLKFreq>
 800364c:	4602      	mov	r2, r0
 800364e:	4b06      	ldr	r3, [pc, #24]	@ (8003668 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	0adb      	lsrs	r3, r3, #11
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	4904      	ldr	r1, [pc, #16]	@ (800366c <HAL_RCC_GetPCLK2Freq+0x28>)
 800365a:	5ccb      	ldrb	r3, [r1, r3]
 800365c:	f003 031f 	and.w	r3, r3, #31
 8003660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003664:	4618      	mov	r0, r3
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000
 800366c:	080054a4 	.word	0x080054a4

08003670 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003676:	4b1e      	ldr	r3, [pc, #120]	@ (80036f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003680:	4b1b      	ldr	r3, [pc, #108]	@ (80036f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	3301      	adds	r3, #1
 800368c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	2b03      	cmp	r3, #3
 8003692:	d10c      	bne.n	80036ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003694:	4a17      	ldr	r2, [pc, #92]	@ (80036f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	fbb2 f3f3 	udiv	r3, r2, r3
 800369c:	4a14      	ldr	r2, [pc, #80]	@ (80036f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800369e:	68d2      	ldr	r2, [r2, #12]
 80036a0:	0a12      	lsrs	r2, r2, #8
 80036a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	617b      	str	r3, [r7, #20]
    break;
 80036ac:	e00c      	b.n	80036c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036ae:	4a12      	ldr	r2, [pc, #72]	@ (80036f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b6:	4a0e      	ldr	r2, [pc, #56]	@ (80036f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036b8:	68d2      	ldr	r2, [r2, #12]
 80036ba:	0a12      	lsrs	r2, r2, #8
 80036bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036c0:	fb02 f303 	mul.w	r3, r2, r3
 80036c4:	617b      	str	r3, [r7, #20]
    break;
 80036c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036c8:	4b09      	ldr	r3, [pc, #36]	@ (80036f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	0e5b      	lsrs	r3, r3, #25
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	3301      	adds	r3, #1
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80036e2:	687b      	ldr	r3, [r7, #4]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	40021000 	.word	0x40021000
 80036f4:	016e3600 	.word	0x016e3600
 80036f8:	00f42400 	.word	0x00f42400

080036fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003704:	2300      	movs	r3, #0
 8003706:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003708:	2300      	movs	r3, #0
 800370a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 8098 	beq.w	800384a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800371a:	2300      	movs	r3, #0
 800371c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800371e:	4b43      	ldr	r3, [pc, #268]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10d      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800372a:	4b40      	ldr	r3, [pc, #256]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800372c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372e:	4a3f      	ldr	r2, [pc, #252]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003734:	6593      	str	r3, [r2, #88]	@ 0x58
 8003736:	4b3d      	ldr	r3, [pc, #244]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003742:	2301      	movs	r3, #1
 8003744:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003746:	4b3a      	ldr	r3, [pc, #232]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a39      	ldr	r2, [pc, #228]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800374c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003750:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003752:	f7fe fca1 	bl	8002098 <HAL_GetTick>
 8003756:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003758:	e009      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375a:	f7fe fc9d 	bl	8002098 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d902      	bls.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	74fb      	strb	r3, [r7, #19]
        break;
 800376c:	e005      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800376e:	4b30      	ldr	r3, [pc, #192]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0ef      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800377a:	7cfb      	ldrb	r3, [r7, #19]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d159      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003780:	4b2a      	ldr	r3, [pc, #168]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003786:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800378a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d01e      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	429a      	cmp	r2, r3
 800379a:	d019      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800379c:	4b23      	ldr	r3, [pc, #140]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800379e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037a8:	4b20      	ldr	r3, [pc, #128]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ae:	4a1f      	ldr	r2, [pc, #124]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037b8:	4b1c      	ldr	r3, [pc, #112]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037be:	4a1b      	ldr	r2, [pc, #108]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037c8:	4a18      	ldr	r2, [pc, #96]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d016      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037da:	f7fe fc5d 	bl	8002098 <HAL_GetTick>
 80037de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037e0:	e00b      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e2:	f7fe fc59 	bl	8002098 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d902      	bls.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	74fb      	strb	r3, [r7, #19]
            break;
 80037f8:	e006      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037fa:	4b0c      	ldr	r3, [pc, #48]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0ec      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003808:	7cfb      	ldrb	r3, [r7, #19]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10b      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800380e:	4b07      	ldr	r3, [pc, #28]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003814:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800381c:	4903      	ldr	r1, [pc, #12]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003824:	e008      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003826:	7cfb      	ldrb	r3, [r7, #19]
 8003828:	74bb      	strb	r3, [r7, #18]
 800382a:	e005      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800382c:	40021000 	.word	0x40021000
 8003830:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003834:	7cfb      	ldrb	r3, [r7, #19]
 8003836:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003838:	7c7b      	ldrb	r3, [r7, #17]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d105      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800383e:	4ba7      	ldr	r3, [pc, #668]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003842:	4aa6      	ldr	r2, [pc, #664]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003844:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003848:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003856:	4ba1      	ldr	r3, [pc, #644]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385c:	f023 0203 	bic.w	r2, r3, #3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	499d      	ldr	r1, [pc, #628]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003878:	4b98      	ldr	r3, [pc, #608]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387e:	f023 020c 	bic.w	r2, r3, #12
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	4995      	ldr	r1, [pc, #596]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800389a:	4b90      	ldr	r3, [pc, #576]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	498c      	ldr	r1, [pc, #560]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038bc:	4b87      	ldr	r3, [pc, #540]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	4984      	ldr	r1, [pc, #528]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0310 	and.w	r3, r3, #16
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038de:	4b7f      	ldr	r3, [pc, #508]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	497b      	ldr	r1, [pc, #492]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003900:	4b76      	ldr	r3, [pc, #472]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003906:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	4973      	ldr	r1, [pc, #460]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003922:	4b6e      	ldr	r3, [pc, #440]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003928:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	496a      	ldr	r1, [pc, #424]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003944:	4b65      	ldr	r3, [pc, #404]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	4962      	ldr	r1, [pc, #392]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003966:	4b5d      	ldr	r3, [pc, #372]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003974:	4959      	ldr	r1, [pc, #356]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003988:	4b54      	ldr	r3, [pc, #336]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800398e:	f023 0203 	bic.w	r2, r3, #3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003996:	4951      	ldr	r1, [pc, #324]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039aa:	4b4c      	ldr	r3, [pc, #304]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b8:	4948      	ldr	r1, [pc, #288]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d015      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039cc:	4b43      	ldr	r3, [pc, #268]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039da:	4940      	ldr	r1, [pc, #256]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039ea:	d105      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039ec:	4b3b      	ldr	r3, [pc, #236]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	4a3a      	ldr	r2, [pc, #232]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039f6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d015      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a04:	4b35      	ldr	r3, [pc, #212]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a12:	4932      	ldr	r1, [pc, #200]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a22:	d105      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a24:	4b2d      	ldr	r3, [pc, #180]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	4a2c      	ldr	r2, [pc, #176]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a2e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d015      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a3c:	4b27      	ldr	r3, [pc, #156]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a42:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4a:	4924      	ldr	r1, [pc, #144]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a5a:	d105      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	4a1e      	ldr	r2, [pc, #120]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a66:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d015      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a74:	4b19      	ldr	r3, [pc, #100]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a82:	4916      	ldr	r1, [pc, #88]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a92:	d105      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a94:	4b11      	ldr	r3, [pc, #68]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4a10      	ldr	r2, [pc, #64]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a9e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d019      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003aac:	4b0b      	ldr	r3, [pc, #44]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aba:	4908      	ldr	r1, [pc, #32]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003aca:	d109      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003acc:	4b03      	ldr	r3, [pc, #12]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4a02      	ldr	r2, [pc, #8]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ad6:	60d3      	str	r3, [r2, #12]
 8003ad8:	e002      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003ada:	bf00      	nop
 8003adc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d015      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003aec:	4b29      	ldr	r3, [pc, #164]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003afa:	4926      	ldr	r1, [pc, #152]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b0a:	d105      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b0c:	4b21      	ldr	r3, [pc, #132]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4a20      	ldr	r2, [pc, #128]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b16:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d015      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003b24:	4b1b      	ldr	r3, [pc, #108]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b32:	4918      	ldr	r1, [pc, #96]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b42:	d105      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b44:	4b13      	ldr	r3, [pc, #76]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4a12      	ldr	r2, [pc, #72]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b4e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d015      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b6a:	490a      	ldr	r1, [pc, #40]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b7a:	d105      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b7c:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4a04      	ldr	r2, [pc, #16]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b86:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003b88:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40021000 	.word	0x40021000

08003b98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e042      	b.n	8003c30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d106      	bne.n	8003bc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7fe f81b 	bl	8001bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2224      	movs	r2, #36	@ 0x24
 8003bc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0201 	bic.w	r2, r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fbb2 	bl	800434c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f8b3 	bl	8003d54 <UART_SetConfig>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e01b      	b.n	8003c30 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fc31 	bl	8004490 <UART_CheckIdleState>
 8003c2e:	4603      	mov	r3, r0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08a      	sub	sp, #40	@ 0x28
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	4613      	mov	r3, r2
 8003c46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4e:	2b20      	cmp	r3, #32
 8003c50:	d17b      	bne.n	8003d4a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <HAL_UART_Transmit+0x26>
 8003c58:	88fb      	ldrh	r3, [r7, #6]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e074      	b.n	8003d4c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2221      	movs	r2, #33	@ 0x21
 8003c6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c72:	f7fe fa11 	bl	8002098 <HAL_GetTick>
 8003c76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	88fa      	ldrh	r2, [r7, #6]
 8003c7c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	88fa      	ldrh	r2, [r7, #6]
 8003c84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c90:	d108      	bne.n	8003ca4 <HAL_UART_Transmit+0x6c>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d104      	bne.n	8003ca4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	61bb      	str	r3, [r7, #24]
 8003ca2:	e003      	b.n	8003cac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cac:	e030      	b.n	8003d10 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2180      	movs	r1, #128	@ 0x80
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 fc93 	bl	80045e4 <UART_WaitOnFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e03d      	b.n	8003d4c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10b      	bne.n	8003cee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ce4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	3302      	adds	r3, #2
 8003cea:	61bb      	str	r3, [r7, #24]
 8003cec:	e007      	b.n	8003cfe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1c8      	bne.n	8003cae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	2200      	movs	r2, #0
 8003d24:	2140      	movs	r1, #64	@ 0x40
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 fc5c 	bl	80045e4 <UART_WaitOnFlagUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d005      	beq.n	8003d3e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e006      	b.n	8003d4c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	e000      	b.n	8003d4c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003d4a:	2302      	movs	r3, #2
  }
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3720      	adds	r7, #32
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d58:	b08c      	sub	sp, #48	@ 0x30
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	4baa      	ldr	r3, [pc, #680]	@ (800402c <UART_SetConfig+0x2d8>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a9f      	ldr	r2, [pc, #636]	@ (8004030 <UART_SetConfig+0x2dc>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d004      	beq.n	8003dc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003dca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dd4:	430b      	orrs	r3, r1
 8003dd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dde:	f023 010f 	bic.w	r1, r3, #15
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a90      	ldr	r2, [pc, #576]	@ (8004034 <UART_SetConfig+0x2e0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d125      	bne.n	8003e44 <UART_SetConfig+0xf0>
 8003df8:	4b8f      	ldr	r3, [pc, #572]	@ (8004038 <UART_SetConfig+0x2e4>)
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	d81a      	bhi.n	8003e3c <UART_SetConfig+0xe8>
 8003e06:	a201      	add	r2, pc, #4	@ (adr r2, 8003e0c <UART_SetConfig+0xb8>)
 8003e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0c:	08003e1d 	.word	0x08003e1d
 8003e10:	08003e2d 	.word	0x08003e2d
 8003e14:	08003e25 	.word	0x08003e25
 8003e18:	08003e35 	.word	0x08003e35
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e22:	e116      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003e24:	2302      	movs	r3, #2
 8003e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e2a:	e112      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e32:	e10e      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003e34:	2308      	movs	r3, #8
 8003e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e3a:	e10a      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003e3c:	2310      	movs	r3, #16
 8003e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e42:	e106      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a7c      	ldr	r2, [pc, #496]	@ (800403c <UART_SetConfig+0x2e8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d138      	bne.n	8003ec0 <UART_SetConfig+0x16c>
 8003e4e:	4b7a      	ldr	r3, [pc, #488]	@ (8004038 <UART_SetConfig+0x2e4>)
 8003e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e54:	f003 030c 	and.w	r3, r3, #12
 8003e58:	2b0c      	cmp	r3, #12
 8003e5a:	d82d      	bhi.n	8003eb8 <UART_SetConfig+0x164>
 8003e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e64 <UART_SetConfig+0x110>)
 8003e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e62:	bf00      	nop
 8003e64:	08003e99 	.word	0x08003e99
 8003e68:	08003eb9 	.word	0x08003eb9
 8003e6c:	08003eb9 	.word	0x08003eb9
 8003e70:	08003eb9 	.word	0x08003eb9
 8003e74:	08003ea9 	.word	0x08003ea9
 8003e78:	08003eb9 	.word	0x08003eb9
 8003e7c:	08003eb9 	.word	0x08003eb9
 8003e80:	08003eb9 	.word	0x08003eb9
 8003e84:	08003ea1 	.word	0x08003ea1
 8003e88:	08003eb9 	.word	0x08003eb9
 8003e8c:	08003eb9 	.word	0x08003eb9
 8003e90:	08003eb9 	.word	0x08003eb9
 8003e94:	08003eb1 	.word	0x08003eb1
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e9e:	e0d8      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ea6:	e0d4      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eae:	e0d0      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003eb0:	2308      	movs	r3, #8
 8003eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eb6:	e0cc      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003eb8:	2310      	movs	r3, #16
 8003eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ebe:	e0c8      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a5e      	ldr	r2, [pc, #376]	@ (8004040 <UART_SetConfig+0x2ec>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d125      	bne.n	8003f16 <UART_SetConfig+0x1c2>
 8003eca:	4b5b      	ldr	r3, [pc, #364]	@ (8004038 <UART_SetConfig+0x2e4>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ed4:	2b30      	cmp	r3, #48	@ 0x30
 8003ed6:	d016      	beq.n	8003f06 <UART_SetConfig+0x1b2>
 8003ed8:	2b30      	cmp	r3, #48	@ 0x30
 8003eda:	d818      	bhi.n	8003f0e <UART_SetConfig+0x1ba>
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	d00a      	beq.n	8003ef6 <UART_SetConfig+0x1a2>
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	d814      	bhi.n	8003f0e <UART_SetConfig+0x1ba>
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <UART_SetConfig+0x19a>
 8003ee8:	2b10      	cmp	r3, #16
 8003eea:	d008      	beq.n	8003efe <UART_SetConfig+0x1aa>
 8003eec:	e00f      	b.n	8003f0e <UART_SetConfig+0x1ba>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ef4:	e0ad      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003efc:	e0a9      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003efe:	2304      	movs	r3, #4
 8003f00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f04:	e0a5      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003f06:	2308      	movs	r3, #8
 8003f08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f0c:	e0a1      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003f0e:	2310      	movs	r3, #16
 8003f10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f14:	e09d      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a4a      	ldr	r2, [pc, #296]	@ (8004044 <UART_SetConfig+0x2f0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d125      	bne.n	8003f6c <UART_SetConfig+0x218>
 8003f20:	4b45      	ldr	r3, [pc, #276]	@ (8004038 <UART_SetConfig+0x2e4>)
 8003f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f2c:	d016      	beq.n	8003f5c <UART_SetConfig+0x208>
 8003f2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f30:	d818      	bhi.n	8003f64 <UART_SetConfig+0x210>
 8003f32:	2b80      	cmp	r3, #128	@ 0x80
 8003f34:	d00a      	beq.n	8003f4c <UART_SetConfig+0x1f8>
 8003f36:	2b80      	cmp	r3, #128	@ 0x80
 8003f38:	d814      	bhi.n	8003f64 <UART_SetConfig+0x210>
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <UART_SetConfig+0x1f0>
 8003f3e:	2b40      	cmp	r3, #64	@ 0x40
 8003f40:	d008      	beq.n	8003f54 <UART_SetConfig+0x200>
 8003f42:	e00f      	b.n	8003f64 <UART_SetConfig+0x210>
 8003f44:	2300      	movs	r3, #0
 8003f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f4a:	e082      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f52:	e07e      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003f54:	2304      	movs	r3, #4
 8003f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f5a:	e07a      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003f5c:	2308      	movs	r3, #8
 8003f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f62:	e076      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003f64:	2310      	movs	r3, #16
 8003f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f6a:	e072      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a35      	ldr	r2, [pc, #212]	@ (8004048 <UART_SetConfig+0x2f4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d12a      	bne.n	8003fcc <UART_SetConfig+0x278>
 8003f76:	4b30      	ldr	r3, [pc, #192]	@ (8004038 <UART_SetConfig+0x2e4>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f84:	d01a      	beq.n	8003fbc <UART_SetConfig+0x268>
 8003f86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f8a:	d81b      	bhi.n	8003fc4 <UART_SetConfig+0x270>
 8003f8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f90:	d00c      	beq.n	8003fac <UART_SetConfig+0x258>
 8003f92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f96:	d815      	bhi.n	8003fc4 <UART_SetConfig+0x270>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <UART_SetConfig+0x250>
 8003f9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fa0:	d008      	beq.n	8003fb4 <UART_SetConfig+0x260>
 8003fa2:	e00f      	b.n	8003fc4 <UART_SetConfig+0x270>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003faa:	e052      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003fac:	2302      	movs	r3, #2
 8003fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fb2:	e04e      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fba:	e04a      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003fbc:	2308      	movs	r3, #8
 8003fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fc2:	e046      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003fc4:	2310      	movs	r3, #16
 8003fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fca:	e042      	b.n	8004052 <UART_SetConfig+0x2fe>
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a17      	ldr	r2, [pc, #92]	@ (8004030 <UART_SetConfig+0x2dc>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d13a      	bne.n	800404c <UART_SetConfig+0x2f8>
 8003fd6:	4b18      	ldr	r3, [pc, #96]	@ (8004038 <UART_SetConfig+0x2e4>)
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fdc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003fe0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fe4:	d01a      	beq.n	800401c <UART_SetConfig+0x2c8>
 8003fe6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fea:	d81b      	bhi.n	8004024 <UART_SetConfig+0x2d0>
 8003fec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ff0:	d00c      	beq.n	800400c <UART_SetConfig+0x2b8>
 8003ff2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ff6:	d815      	bhi.n	8004024 <UART_SetConfig+0x2d0>
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <UART_SetConfig+0x2b0>
 8003ffc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004000:	d008      	beq.n	8004014 <UART_SetConfig+0x2c0>
 8004002:	e00f      	b.n	8004024 <UART_SetConfig+0x2d0>
 8004004:	2300      	movs	r3, #0
 8004006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800400a:	e022      	b.n	8004052 <UART_SetConfig+0x2fe>
 800400c:	2302      	movs	r3, #2
 800400e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004012:	e01e      	b.n	8004052 <UART_SetConfig+0x2fe>
 8004014:	2304      	movs	r3, #4
 8004016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800401a:	e01a      	b.n	8004052 <UART_SetConfig+0x2fe>
 800401c:	2308      	movs	r3, #8
 800401e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004022:	e016      	b.n	8004052 <UART_SetConfig+0x2fe>
 8004024:	2310      	movs	r3, #16
 8004026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800402a:	e012      	b.n	8004052 <UART_SetConfig+0x2fe>
 800402c:	cfff69f3 	.word	0xcfff69f3
 8004030:	40008000 	.word	0x40008000
 8004034:	40013800 	.word	0x40013800
 8004038:	40021000 	.word	0x40021000
 800403c:	40004400 	.word	0x40004400
 8004040:	40004800 	.word	0x40004800
 8004044:	40004c00 	.word	0x40004c00
 8004048:	40005000 	.word	0x40005000
 800404c:	2310      	movs	r3, #16
 800404e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4aae      	ldr	r2, [pc, #696]	@ (8004310 <UART_SetConfig+0x5bc>)
 8004058:	4293      	cmp	r3, r2
 800405a:	f040 8097 	bne.w	800418c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800405e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004062:	2b08      	cmp	r3, #8
 8004064:	d823      	bhi.n	80040ae <UART_SetConfig+0x35a>
 8004066:	a201      	add	r2, pc, #4	@ (adr r2, 800406c <UART_SetConfig+0x318>)
 8004068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406c:	08004091 	.word	0x08004091
 8004070:	080040af 	.word	0x080040af
 8004074:	08004099 	.word	0x08004099
 8004078:	080040af 	.word	0x080040af
 800407c:	0800409f 	.word	0x0800409f
 8004080:	080040af 	.word	0x080040af
 8004084:	080040af 	.word	0x080040af
 8004088:	080040af 	.word	0x080040af
 800408c:	080040a7 	.word	0x080040a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004090:	f7ff fac2 	bl	8003618 <HAL_RCC_GetPCLK1Freq>
 8004094:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004096:	e010      	b.n	80040ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004098:	4b9e      	ldr	r3, [pc, #632]	@ (8004314 <UART_SetConfig+0x5c0>)
 800409a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800409c:	e00d      	b.n	80040ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800409e:	f7ff fa4d 	bl	800353c <HAL_RCC_GetSysClockFreq>
 80040a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040a4:	e009      	b.n	80040ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80040ac:	e005      	b.n	80040ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80040b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 8130 	beq.w	8004322 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	4a94      	ldr	r2, [pc, #592]	@ (8004318 <UART_SetConfig+0x5c4>)
 80040c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040cc:	461a      	mov	r2, r3
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	4413      	add	r3, r2
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d305      	bcc.n	80040f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d903      	bls.n	80040fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80040f8:	e113      	b.n	8004322 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fc:	2200      	movs	r2, #0
 80040fe:	60bb      	str	r3, [r7, #8]
 8004100:	60fa      	str	r2, [r7, #12]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	4a84      	ldr	r2, [pc, #528]	@ (8004318 <UART_SetConfig+0x5c4>)
 8004108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800410c:	b29b      	uxth	r3, r3
 800410e:	2200      	movs	r2, #0
 8004110:	603b      	str	r3, [r7, #0]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004118:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800411c:	f7fc f8d8 	bl	80002d0 <__aeabi_uldivmod>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	4610      	mov	r0, r2
 8004126:	4619      	mov	r1, r3
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	020b      	lsls	r3, r1, #8
 8004132:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004136:	0202      	lsls	r2, r0, #8
 8004138:	6979      	ldr	r1, [r7, #20]
 800413a:	6849      	ldr	r1, [r1, #4]
 800413c:	0849      	lsrs	r1, r1, #1
 800413e:	2000      	movs	r0, #0
 8004140:	460c      	mov	r4, r1
 8004142:	4605      	mov	r5, r0
 8004144:	eb12 0804 	adds.w	r8, r2, r4
 8004148:	eb43 0905 	adc.w	r9, r3, r5
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	469a      	mov	sl, r3
 8004154:	4693      	mov	fp, r2
 8004156:	4652      	mov	r2, sl
 8004158:	465b      	mov	r3, fp
 800415a:	4640      	mov	r0, r8
 800415c:	4649      	mov	r1, r9
 800415e:	f7fc f8b7 	bl	80002d0 <__aeabi_uldivmod>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4613      	mov	r3, r2
 8004168:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004170:	d308      	bcc.n	8004184 <UART_SetConfig+0x430>
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004178:	d204      	bcs.n	8004184 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6a3a      	ldr	r2, [r7, #32]
 8004180:	60da      	str	r2, [r3, #12]
 8004182:	e0ce      	b.n	8004322 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800418a:	e0ca      	b.n	8004322 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004194:	d166      	bne.n	8004264 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004196:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800419a:	2b08      	cmp	r3, #8
 800419c:	d827      	bhi.n	80041ee <UART_SetConfig+0x49a>
 800419e:	a201      	add	r2, pc, #4	@ (adr r2, 80041a4 <UART_SetConfig+0x450>)
 80041a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a4:	080041c9 	.word	0x080041c9
 80041a8:	080041d1 	.word	0x080041d1
 80041ac:	080041d9 	.word	0x080041d9
 80041b0:	080041ef 	.word	0x080041ef
 80041b4:	080041df 	.word	0x080041df
 80041b8:	080041ef 	.word	0x080041ef
 80041bc:	080041ef 	.word	0x080041ef
 80041c0:	080041ef 	.word	0x080041ef
 80041c4:	080041e7 	.word	0x080041e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041c8:	f7ff fa26 	bl	8003618 <HAL_RCC_GetPCLK1Freq>
 80041cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041ce:	e014      	b.n	80041fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041d0:	f7ff fa38 	bl	8003644 <HAL_RCC_GetPCLK2Freq>
 80041d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041d6:	e010      	b.n	80041fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041d8:	4b4e      	ldr	r3, [pc, #312]	@ (8004314 <UART_SetConfig+0x5c0>)
 80041da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041dc:	e00d      	b.n	80041fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041de:	f7ff f9ad 	bl	800353c <HAL_RCC_GetSysClockFreq>
 80041e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041e4:	e009      	b.n	80041fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041ec:	e005      	b.n	80041fa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80041f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 8090 	beq.w	8004322 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004206:	4a44      	ldr	r2, [pc, #272]	@ (8004318 <UART_SetConfig+0x5c4>)
 8004208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800420c:	461a      	mov	r2, r3
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	fbb3 f3f2 	udiv	r3, r3, r2
 8004214:	005a      	lsls	r2, r3, #1
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	085b      	lsrs	r3, r3, #1
 800421c:	441a      	add	r2, r3
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	fbb2 f3f3 	udiv	r3, r2, r3
 8004226:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	2b0f      	cmp	r3, #15
 800422c:	d916      	bls.n	800425c <UART_SetConfig+0x508>
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004234:	d212      	bcs.n	800425c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	b29b      	uxth	r3, r3
 800423a:	f023 030f 	bic.w	r3, r3, #15
 800423e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	085b      	lsrs	r3, r3, #1
 8004244:	b29b      	uxth	r3, r3
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	b29a      	uxth	r2, r3
 800424c:	8bfb      	ldrh	r3, [r7, #30]
 800424e:	4313      	orrs	r3, r2
 8004250:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	8bfa      	ldrh	r2, [r7, #30]
 8004258:	60da      	str	r2, [r3, #12]
 800425a:	e062      	b.n	8004322 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004262:	e05e      	b.n	8004322 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004264:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004268:	2b08      	cmp	r3, #8
 800426a:	d828      	bhi.n	80042be <UART_SetConfig+0x56a>
 800426c:	a201      	add	r2, pc, #4	@ (adr r2, 8004274 <UART_SetConfig+0x520>)
 800426e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004272:	bf00      	nop
 8004274:	08004299 	.word	0x08004299
 8004278:	080042a1 	.word	0x080042a1
 800427c:	080042a9 	.word	0x080042a9
 8004280:	080042bf 	.word	0x080042bf
 8004284:	080042af 	.word	0x080042af
 8004288:	080042bf 	.word	0x080042bf
 800428c:	080042bf 	.word	0x080042bf
 8004290:	080042bf 	.word	0x080042bf
 8004294:	080042b7 	.word	0x080042b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004298:	f7ff f9be 	bl	8003618 <HAL_RCC_GetPCLK1Freq>
 800429c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800429e:	e014      	b.n	80042ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042a0:	f7ff f9d0 	bl	8003644 <HAL_RCC_GetPCLK2Freq>
 80042a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042a6:	e010      	b.n	80042ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004314 <UART_SetConfig+0x5c0>)
 80042aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042ac:	e00d      	b.n	80042ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ae:	f7ff f945 	bl	800353c <HAL_RCC_GetSysClockFreq>
 80042b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042b4:	e009      	b.n	80042ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042bc:	e005      	b.n	80042ca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80042c8:	bf00      	nop
    }

    if (pclk != 0U)
 80042ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d028      	beq.n	8004322 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	4a10      	ldr	r2, [pc, #64]	@ (8004318 <UART_SetConfig+0x5c4>)
 80042d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042da:	461a      	mov	r2, r3
 80042dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042de:	fbb3 f2f2 	udiv	r2, r3, r2
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	085b      	lsrs	r3, r3, #1
 80042e8:	441a      	add	r2, r3
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	2b0f      	cmp	r3, #15
 80042f8:	d910      	bls.n	800431c <UART_SetConfig+0x5c8>
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004300:	d20c      	bcs.n	800431c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	b29a      	uxth	r2, r3
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60da      	str	r2, [r3, #12]
 800430c:	e009      	b.n	8004322 <UART_SetConfig+0x5ce>
 800430e:	bf00      	nop
 8004310:	40008000 	.word	0x40008000
 8004314:	00f42400 	.word	0x00f42400
 8004318:	080054b0 	.word	0x080054b0
      }
      else
      {
        ret = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2201      	movs	r2, #1
 8004326:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2201      	movs	r2, #1
 800432e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2200      	movs	r2, #0
 8004336:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2200      	movs	r2, #0
 800433c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800433e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004342:	4618      	mov	r0, r3
 8004344:	3730      	adds	r7, #48	@ 0x30
 8004346:	46bd      	mov	sp, r7
 8004348:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800434c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	430a      	orrs	r2, r1
 8004396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01a      	beq.n	8004462 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004446:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800444a:	d10a      	bne.n	8004462 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	605a      	str	r2, [r3, #4]
  }
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b098      	sub	sp, #96	@ 0x60
 8004494:	af02      	add	r7, sp, #8
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044a0:	f7fd fdfa 	bl	8002098 <HAL_GetTick>
 80044a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d12f      	bne.n	8004514 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044bc:	2200      	movs	r2, #0
 80044be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f88e 	bl	80045e4 <UART_WaitOnFlagUntilTimeout>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d022      	beq.n	8004514 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e6      	bne.n	80044ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2220      	movs	r2, #32
 8004504:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e063      	b.n	80045dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0304 	and.w	r3, r3, #4
 800451e:	2b04      	cmp	r3, #4
 8004520:	d149      	bne.n	80045b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004522:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800452a:	2200      	movs	r2, #0
 800452c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f857 	bl	80045e4 <UART_WaitOnFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d03c      	beq.n	80045b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	623b      	str	r3, [r7, #32]
   return(result);
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004550:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800455a:	633b      	str	r3, [r7, #48]	@ 0x30
 800455c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004560:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e6      	bne.n	800453c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3308      	adds	r3, #8
 8004574:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	60fb      	str	r3, [r7, #12]
   return(result);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f023 0301 	bic.w	r3, r3, #1
 8004584:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3308      	adds	r3, #8
 800458c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800458e:	61fa      	str	r2, [r7, #28]
 8004590:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	69b9      	ldr	r1, [r7, #24]
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	617b      	str	r3, [r7, #20]
   return(result);
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e5      	bne.n	800456e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e012      	b.n	80045dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3758      	adds	r7, #88	@ 0x58
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	4613      	mov	r3, r2
 80045f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f4:	e04f      	b.n	8004696 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fc:	d04b      	beq.n	8004696 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fe:	f7fd fd4b 	bl	8002098 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	429a      	cmp	r2, r3
 800460c:	d302      	bcc.n	8004614 <UART_WaitOnFlagUntilTimeout+0x30>
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e04e      	b.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	d037      	beq.n	8004696 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b80      	cmp	r3, #128	@ 0x80
 800462a:	d034      	beq.n	8004696 <UART_WaitOnFlagUntilTimeout+0xb2>
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b40      	cmp	r3, #64	@ 0x40
 8004630:	d031      	beq.n	8004696 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b08      	cmp	r3, #8
 800463e:	d110      	bne.n	8004662 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2208      	movs	r2, #8
 8004646:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f838 	bl	80046be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2208      	movs	r2, #8
 8004652:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e029      	b.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800466c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004670:	d111      	bne.n	8004696 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800467a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 f81e 	bl	80046be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2220      	movs	r2, #32
 8004686:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e00f      	b.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	69da      	ldr	r2, [r3, #28]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4013      	ands	r3, r2
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	bf0c      	ite	eq
 80046a6:	2301      	moveq	r3, #1
 80046a8:	2300      	movne	r3, #0
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	461a      	mov	r2, r3
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d0a0      	beq.n	80045f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046be:	b480      	push	{r7}
 80046c0:	b095      	sub	sp, #84	@ 0x54
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ce:	e853 3f00 	ldrex	r3, [r3]
 80046d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80046e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046ec:	e841 2300 	strex	r3, r2, [r1]
 80046f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e6      	bne.n	80046c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3308      	adds	r3, #8
 80046fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	61fb      	str	r3, [r7, #28]
   return(result);
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800470e:	f023 0301 	bic.w	r3, r3, #1
 8004712:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3308      	adds	r3, #8
 800471a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800471c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800471e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004720:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004724:	e841 2300 	strex	r3, r2, [r1]
 8004728:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e3      	bne.n	80046f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d118      	bne.n	800476a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	60bb      	str	r3, [r7, #8]
   return(result);
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f023 0310 	bic.w	r3, r3, #16
 800474c:	647b      	str	r3, [r7, #68]	@ 0x44
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	461a      	mov	r2, r3
 8004754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004756:	61bb      	str	r3, [r7, #24]
 8004758:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	6979      	ldr	r1, [r7, #20]
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	e841 2300 	strex	r3, r2, [r1]
 8004762:	613b      	str	r3, [r7, #16]
   return(result);
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e6      	bne.n	8004738 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2220      	movs	r2, #32
 800476e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800477e:	bf00      	nop
 8004780:	3754      	adds	r7, #84	@ 0x54
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800478a:	b480      	push	{r7}
 800478c:	b085      	sub	sp, #20
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004798:	2b01      	cmp	r3, #1
 800479a:	d101      	bne.n	80047a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800479c:	2302      	movs	r3, #2
 800479e:	e027      	b.n	80047f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2224      	movs	r2, #36	@ 0x24
 80047ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0201 	bic.w	r2, r2, #1
 80047c6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80047ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004810:	2302      	movs	r3, #2
 8004812:	e02d      	b.n	8004870 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2224      	movs	r2, #36	@ 0x24
 8004820:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0201 	bic.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f84f 	bl	80048f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2220      	movs	r2, #32
 8004862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800488c:	2302      	movs	r3, #2
 800488e:	e02d      	b.n	80048ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2224      	movs	r2, #36	@ 0x24
 800489c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0201 	bic.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f811 	bl	80048f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004900:	2b00      	cmp	r3, #0
 8004902:	d108      	bne.n	8004916 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004914:	e031      	b.n	800497a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004916:	2308      	movs	r3, #8
 8004918:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800491a:	2308      	movs	r3, #8
 800491c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	0e5b      	lsrs	r3, r3, #25
 8004926:	b2db      	uxtb	r3, r3
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	0f5b      	lsrs	r3, r3, #29
 8004936:	b2db      	uxtb	r3, r3
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800493e:	7bbb      	ldrb	r3, [r7, #14]
 8004940:	7b3a      	ldrb	r2, [r7, #12]
 8004942:	4911      	ldr	r1, [pc, #68]	@ (8004988 <UARTEx_SetNbDataToProcess+0x94>)
 8004944:	5c8a      	ldrb	r2, [r1, r2]
 8004946:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800494a:	7b3a      	ldrb	r2, [r7, #12]
 800494c:	490f      	ldr	r1, [pc, #60]	@ (800498c <UARTEx_SetNbDataToProcess+0x98>)
 800494e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004950:	fb93 f3f2 	sdiv	r3, r3, r2
 8004954:	b29a      	uxth	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800495c:	7bfb      	ldrb	r3, [r7, #15]
 800495e:	7b7a      	ldrb	r2, [r7, #13]
 8004960:	4909      	ldr	r1, [pc, #36]	@ (8004988 <UARTEx_SetNbDataToProcess+0x94>)
 8004962:	5c8a      	ldrb	r2, [r1, r2]
 8004964:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004968:	7b7a      	ldrb	r2, [r7, #13]
 800496a:	4908      	ldr	r1, [pc, #32]	@ (800498c <UARTEx_SetNbDataToProcess+0x98>)
 800496c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800496e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004972:	b29a      	uxth	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	080054c8 	.word	0x080054c8
 800498c:	080054d0 	.word	0x080054d0

08004990 <_ZdlPvj>:
 8004990:	f000 b817 	b.w	80049c2 <_ZdlPv>

08004994 <_Znwj>:
 8004994:	2801      	cmp	r0, #1
 8004996:	bf38      	it	cc
 8004998:	2001      	movcc	r0, #1
 800499a:	b510      	push	{r4, lr}
 800499c:	4604      	mov	r4, r0
 800499e:	4620      	mov	r0, r4
 80049a0:	f000 f822 	bl	80049e8 <malloc>
 80049a4:	b100      	cbz	r0, 80049a8 <_Znwj+0x14>
 80049a6:	bd10      	pop	{r4, pc}
 80049a8:	f000 f80e 	bl	80049c8 <_ZSt15get_new_handlerv>
 80049ac:	b908      	cbnz	r0, 80049b2 <_Znwj+0x1e>
 80049ae:	f000 f813 	bl	80049d8 <abort>
 80049b2:	4780      	blx	r0
 80049b4:	e7f3      	b.n	800499e <_Znwj+0xa>

080049b6 <_ZSt17__throw_bad_allocv>:
 80049b6:	b508      	push	{r3, lr}
 80049b8:	f000 f80e 	bl	80049d8 <abort>

080049bc <_ZSt20__throw_length_errorPKc>:
 80049bc:	b508      	push	{r3, lr}
 80049be:	f000 f80b 	bl	80049d8 <abort>

080049c2 <_ZdlPv>:
 80049c2:	f000 b819 	b.w	80049f8 <free>
	...

080049c8 <_ZSt15get_new_handlerv>:
 80049c8:	4b02      	ldr	r3, [pc, #8]	@ (80049d4 <_ZSt15get_new_handlerv+0xc>)
 80049ca:	6818      	ldr	r0, [r3, #0]
 80049cc:	f3bf 8f5b 	dmb	ish
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	200004c0 	.word	0x200004c0

080049d8 <abort>:
 80049d8:	b508      	push	{r3, lr}
 80049da:	2006      	movs	r0, #6
 80049dc:	f000 f94a 	bl	8004c74 <raise>
 80049e0:	2001      	movs	r0, #1
 80049e2:	f7fd f9af 	bl	8001d44 <_exit>
	...

080049e8 <malloc>:
 80049e8:	4b02      	ldr	r3, [pc, #8]	@ (80049f4 <malloc+0xc>)
 80049ea:	4601      	mov	r1, r0
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	f000 b82d 	b.w	8004a4c <_malloc_r>
 80049f2:	bf00      	nop
 80049f4:	2000001c 	.word	0x2000001c

080049f8 <free>:
 80049f8:	4b02      	ldr	r3, [pc, #8]	@ (8004a04 <free+0xc>)
 80049fa:	4601      	mov	r1, r0
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	f000 b99f 	b.w	8004d40 <_free_r>
 8004a02:	bf00      	nop
 8004a04:	2000001c 	.word	0x2000001c

08004a08 <sbrk_aligned>:
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	4e0f      	ldr	r6, [pc, #60]	@ (8004a48 <sbrk_aligned+0x40>)
 8004a0c:	460c      	mov	r4, r1
 8004a0e:	6831      	ldr	r1, [r6, #0]
 8004a10:	4605      	mov	r5, r0
 8004a12:	b911      	cbnz	r1, 8004a1a <sbrk_aligned+0x12>
 8004a14:	f000 f94a 	bl	8004cac <_sbrk_r>
 8004a18:	6030      	str	r0, [r6, #0]
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	f000 f945 	bl	8004cac <_sbrk_r>
 8004a22:	1c43      	adds	r3, r0, #1
 8004a24:	d103      	bne.n	8004a2e <sbrk_aligned+0x26>
 8004a26:	f04f 34ff 	mov.w	r4, #4294967295
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	bd70      	pop	{r4, r5, r6, pc}
 8004a2e:	1cc4      	adds	r4, r0, #3
 8004a30:	f024 0403 	bic.w	r4, r4, #3
 8004a34:	42a0      	cmp	r0, r4
 8004a36:	d0f8      	beq.n	8004a2a <sbrk_aligned+0x22>
 8004a38:	1a21      	subs	r1, r4, r0
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	f000 f936 	bl	8004cac <_sbrk_r>
 8004a40:	3001      	adds	r0, #1
 8004a42:	d1f2      	bne.n	8004a2a <sbrk_aligned+0x22>
 8004a44:	e7ef      	b.n	8004a26 <sbrk_aligned+0x1e>
 8004a46:	bf00      	nop
 8004a48:	200004c4 	.word	0x200004c4

08004a4c <_malloc_r>:
 8004a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a50:	1ccd      	adds	r5, r1, #3
 8004a52:	f025 0503 	bic.w	r5, r5, #3
 8004a56:	3508      	adds	r5, #8
 8004a58:	2d0c      	cmp	r5, #12
 8004a5a:	bf38      	it	cc
 8004a5c:	250c      	movcc	r5, #12
 8004a5e:	2d00      	cmp	r5, #0
 8004a60:	4606      	mov	r6, r0
 8004a62:	db01      	blt.n	8004a68 <_malloc_r+0x1c>
 8004a64:	42a9      	cmp	r1, r5
 8004a66:	d904      	bls.n	8004a72 <_malloc_r+0x26>
 8004a68:	230c      	movs	r3, #12
 8004a6a:	6033      	str	r3, [r6, #0]
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b48 <_malloc_r+0xfc>
 8004a76:	f000 f869 	bl	8004b4c <__malloc_lock>
 8004a7a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a7e:	461c      	mov	r4, r3
 8004a80:	bb44      	cbnz	r4, 8004ad4 <_malloc_r+0x88>
 8004a82:	4629      	mov	r1, r5
 8004a84:	4630      	mov	r0, r6
 8004a86:	f7ff ffbf 	bl	8004a08 <sbrk_aligned>
 8004a8a:	1c43      	adds	r3, r0, #1
 8004a8c:	4604      	mov	r4, r0
 8004a8e:	d158      	bne.n	8004b42 <_malloc_r+0xf6>
 8004a90:	f8d8 4000 	ldr.w	r4, [r8]
 8004a94:	4627      	mov	r7, r4
 8004a96:	2f00      	cmp	r7, #0
 8004a98:	d143      	bne.n	8004b22 <_malloc_r+0xd6>
 8004a9a:	2c00      	cmp	r4, #0
 8004a9c:	d04b      	beq.n	8004b36 <_malloc_r+0xea>
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	4639      	mov	r1, r7
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	eb04 0903 	add.w	r9, r4, r3
 8004aa8:	f000 f900 	bl	8004cac <_sbrk_r>
 8004aac:	4581      	cmp	r9, r0
 8004aae:	d142      	bne.n	8004b36 <_malloc_r+0xea>
 8004ab0:	6821      	ldr	r1, [r4, #0]
 8004ab2:	1a6d      	subs	r5, r5, r1
 8004ab4:	4629      	mov	r1, r5
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	f7ff ffa6 	bl	8004a08 <sbrk_aligned>
 8004abc:	3001      	adds	r0, #1
 8004abe:	d03a      	beq.n	8004b36 <_malloc_r+0xea>
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	442b      	add	r3, r5
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	f8d8 3000 	ldr.w	r3, [r8]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	bb62      	cbnz	r2, 8004b28 <_malloc_r+0xdc>
 8004ace:	f8c8 7000 	str.w	r7, [r8]
 8004ad2:	e00f      	b.n	8004af4 <_malloc_r+0xa8>
 8004ad4:	6822      	ldr	r2, [r4, #0]
 8004ad6:	1b52      	subs	r2, r2, r5
 8004ad8:	d420      	bmi.n	8004b1c <_malloc_r+0xd0>
 8004ada:	2a0b      	cmp	r2, #11
 8004adc:	d917      	bls.n	8004b0e <_malloc_r+0xc2>
 8004ade:	1961      	adds	r1, r4, r5
 8004ae0:	42a3      	cmp	r3, r4
 8004ae2:	6025      	str	r5, [r4, #0]
 8004ae4:	bf18      	it	ne
 8004ae6:	6059      	strne	r1, [r3, #4]
 8004ae8:	6863      	ldr	r3, [r4, #4]
 8004aea:	bf08      	it	eq
 8004aec:	f8c8 1000 	streq.w	r1, [r8]
 8004af0:	5162      	str	r2, [r4, r5]
 8004af2:	604b      	str	r3, [r1, #4]
 8004af4:	4630      	mov	r0, r6
 8004af6:	f000 f82f 	bl	8004b58 <__malloc_unlock>
 8004afa:	f104 000b 	add.w	r0, r4, #11
 8004afe:	1d23      	adds	r3, r4, #4
 8004b00:	f020 0007 	bic.w	r0, r0, #7
 8004b04:	1ac2      	subs	r2, r0, r3
 8004b06:	bf1c      	itt	ne
 8004b08:	1a1b      	subne	r3, r3, r0
 8004b0a:	50a3      	strne	r3, [r4, r2]
 8004b0c:	e7af      	b.n	8004a6e <_malloc_r+0x22>
 8004b0e:	6862      	ldr	r2, [r4, #4]
 8004b10:	42a3      	cmp	r3, r4
 8004b12:	bf0c      	ite	eq
 8004b14:	f8c8 2000 	streq.w	r2, [r8]
 8004b18:	605a      	strne	r2, [r3, #4]
 8004b1a:	e7eb      	b.n	8004af4 <_malloc_r+0xa8>
 8004b1c:	4623      	mov	r3, r4
 8004b1e:	6864      	ldr	r4, [r4, #4]
 8004b20:	e7ae      	b.n	8004a80 <_malloc_r+0x34>
 8004b22:	463c      	mov	r4, r7
 8004b24:	687f      	ldr	r7, [r7, #4]
 8004b26:	e7b6      	b.n	8004a96 <_malloc_r+0x4a>
 8004b28:	461a      	mov	r2, r3
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	42a3      	cmp	r3, r4
 8004b2e:	d1fb      	bne.n	8004b28 <_malloc_r+0xdc>
 8004b30:	2300      	movs	r3, #0
 8004b32:	6053      	str	r3, [r2, #4]
 8004b34:	e7de      	b.n	8004af4 <_malloc_r+0xa8>
 8004b36:	230c      	movs	r3, #12
 8004b38:	6033      	str	r3, [r6, #0]
 8004b3a:	4630      	mov	r0, r6
 8004b3c:	f000 f80c 	bl	8004b58 <__malloc_unlock>
 8004b40:	e794      	b.n	8004a6c <_malloc_r+0x20>
 8004b42:	6005      	str	r5, [r0, #0]
 8004b44:	e7d6      	b.n	8004af4 <_malloc_r+0xa8>
 8004b46:	bf00      	nop
 8004b48:	200004c8 	.word	0x200004c8

08004b4c <__malloc_lock>:
 8004b4c:	4801      	ldr	r0, [pc, #4]	@ (8004b54 <__malloc_lock+0x8>)
 8004b4e:	f000 b8e7 	b.w	8004d20 <__retarget_lock_acquire_recursive>
 8004b52:	bf00      	nop
 8004b54:	20000608 	.word	0x20000608

08004b58 <__malloc_unlock>:
 8004b58:	4801      	ldr	r0, [pc, #4]	@ (8004b60 <__malloc_unlock+0x8>)
 8004b5a:	f000 b8e2 	b.w	8004d22 <__retarget_lock_release_recursive>
 8004b5e:	bf00      	nop
 8004b60:	20000608 	.word	0x20000608

08004b64 <realloc>:
 8004b64:	4b02      	ldr	r3, [pc, #8]	@ (8004b70 <realloc+0xc>)
 8004b66:	460a      	mov	r2, r1
 8004b68:	4601      	mov	r1, r0
 8004b6a:	6818      	ldr	r0, [r3, #0]
 8004b6c:	f000 b802 	b.w	8004b74 <_realloc_r>
 8004b70:	2000001c 	.word	0x2000001c

08004b74 <_realloc_r>:
 8004b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b78:	4607      	mov	r7, r0
 8004b7a:	4614      	mov	r4, r2
 8004b7c:	460d      	mov	r5, r1
 8004b7e:	b921      	cbnz	r1, 8004b8a <_realloc_r+0x16>
 8004b80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b84:	4611      	mov	r1, r2
 8004b86:	f7ff bf61 	b.w	8004a4c <_malloc_r>
 8004b8a:	b92a      	cbnz	r2, 8004b98 <_realloc_r+0x24>
 8004b8c:	f000 f8d8 	bl	8004d40 <_free_r>
 8004b90:	4625      	mov	r5, r4
 8004b92:	4628      	mov	r0, r5
 8004b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b98:	f000 f91c 	bl	8004dd4 <_malloc_usable_size_r>
 8004b9c:	4284      	cmp	r4, r0
 8004b9e:	4606      	mov	r6, r0
 8004ba0:	d802      	bhi.n	8004ba8 <_realloc_r+0x34>
 8004ba2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ba6:	d8f4      	bhi.n	8004b92 <_realloc_r+0x1e>
 8004ba8:	4621      	mov	r1, r4
 8004baa:	4638      	mov	r0, r7
 8004bac:	f7ff ff4e 	bl	8004a4c <_malloc_r>
 8004bb0:	4680      	mov	r8, r0
 8004bb2:	b908      	cbnz	r0, 8004bb8 <_realloc_r+0x44>
 8004bb4:	4645      	mov	r5, r8
 8004bb6:	e7ec      	b.n	8004b92 <_realloc_r+0x1e>
 8004bb8:	42b4      	cmp	r4, r6
 8004bba:	4622      	mov	r2, r4
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	bf28      	it	cs
 8004bc0:	4632      	movcs	r2, r6
 8004bc2:	f000 f8af 	bl	8004d24 <memcpy>
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	4638      	mov	r0, r7
 8004bca:	f000 f8b9 	bl	8004d40 <_free_r>
 8004bce:	e7f1      	b.n	8004bb4 <_realloc_r+0x40>

08004bd0 <siprintf>:
 8004bd0:	b40e      	push	{r1, r2, r3}
 8004bd2:	b510      	push	{r4, lr}
 8004bd4:	b09d      	sub	sp, #116	@ 0x74
 8004bd6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004bd8:	9002      	str	r0, [sp, #8]
 8004bda:	9006      	str	r0, [sp, #24]
 8004bdc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004be0:	480a      	ldr	r0, [pc, #40]	@ (8004c0c <siprintf+0x3c>)
 8004be2:	9107      	str	r1, [sp, #28]
 8004be4:	9104      	str	r1, [sp, #16]
 8004be6:	490a      	ldr	r1, [pc, #40]	@ (8004c10 <siprintf+0x40>)
 8004be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bec:	9105      	str	r1, [sp, #20]
 8004bee:	2400      	movs	r4, #0
 8004bf0:	a902      	add	r1, sp, #8
 8004bf2:	6800      	ldr	r0, [r0, #0]
 8004bf4:	9301      	str	r3, [sp, #4]
 8004bf6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004bf8:	f000 f950 	bl	8004e9c <_svfiprintf_r>
 8004bfc:	9b02      	ldr	r3, [sp, #8]
 8004bfe:	701c      	strb	r4, [r3, #0]
 8004c00:	b01d      	add	sp, #116	@ 0x74
 8004c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c06:	b003      	add	sp, #12
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	2000001c 	.word	0x2000001c
 8004c10:	ffff0208 	.word	0xffff0208

08004c14 <memset>:
 8004c14:	4402      	add	r2, r0
 8004c16:	4603      	mov	r3, r0
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d100      	bne.n	8004c1e <memset+0xa>
 8004c1c:	4770      	bx	lr
 8004c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c22:	e7f9      	b.n	8004c18 <memset+0x4>

08004c24 <_raise_r>:
 8004c24:	291f      	cmp	r1, #31
 8004c26:	b538      	push	{r3, r4, r5, lr}
 8004c28:	4605      	mov	r5, r0
 8004c2a:	460c      	mov	r4, r1
 8004c2c:	d904      	bls.n	8004c38 <_raise_r+0x14>
 8004c2e:	2316      	movs	r3, #22
 8004c30:	6003      	str	r3, [r0, #0]
 8004c32:	f04f 30ff 	mov.w	r0, #4294967295
 8004c36:	bd38      	pop	{r3, r4, r5, pc}
 8004c38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004c3a:	b112      	cbz	r2, 8004c42 <_raise_r+0x1e>
 8004c3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004c40:	b94b      	cbnz	r3, 8004c56 <_raise_r+0x32>
 8004c42:	4628      	mov	r0, r5
 8004c44:	f000 f830 	bl	8004ca8 <_getpid_r>
 8004c48:	4622      	mov	r2, r4
 8004c4a:	4601      	mov	r1, r0
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c52:	f000 b817 	b.w	8004c84 <_kill_r>
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d00a      	beq.n	8004c70 <_raise_r+0x4c>
 8004c5a:	1c59      	adds	r1, r3, #1
 8004c5c:	d103      	bne.n	8004c66 <_raise_r+0x42>
 8004c5e:	2316      	movs	r3, #22
 8004c60:	6003      	str	r3, [r0, #0]
 8004c62:	2001      	movs	r0, #1
 8004c64:	e7e7      	b.n	8004c36 <_raise_r+0x12>
 8004c66:	2100      	movs	r1, #0
 8004c68:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	4798      	blx	r3
 8004c70:	2000      	movs	r0, #0
 8004c72:	e7e0      	b.n	8004c36 <_raise_r+0x12>

08004c74 <raise>:
 8004c74:	4b02      	ldr	r3, [pc, #8]	@ (8004c80 <raise+0xc>)
 8004c76:	4601      	mov	r1, r0
 8004c78:	6818      	ldr	r0, [r3, #0]
 8004c7a:	f7ff bfd3 	b.w	8004c24 <_raise_r>
 8004c7e:	bf00      	nop
 8004c80:	2000001c 	.word	0x2000001c

08004c84 <_kill_r>:
 8004c84:	b538      	push	{r3, r4, r5, lr}
 8004c86:	4d07      	ldr	r5, [pc, #28]	@ (8004ca4 <_kill_r+0x20>)
 8004c88:	2300      	movs	r3, #0
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	4608      	mov	r0, r1
 8004c8e:	4611      	mov	r1, r2
 8004c90:	602b      	str	r3, [r5, #0]
 8004c92:	f7fd f847 	bl	8001d24 <_kill>
 8004c96:	1c43      	adds	r3, r0, #1
 8004c98:	d102      	bne.n	8004ca0 <_kill_r+0x1c>
 8004c9a:	682b      	ldr	r3, [r5, #0]
 8004c9c:	b103      	cbz	r3, 8004ca0 <_kill_r+0x1c>
 8004c9e:	6023      	str	r3, [r4, #0]
 8004ca0:	bd38      	pop	{r3, r4, r5, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000604 	.word	0x20000604

08004ca8 <_getpid_r>:
 8004ca8:	f7fd b834 	b.w	8001d14 <_getpid>

08004cac <_sbrk_r>:
 8004cac:	b538      	push	{r3, r4, r5, lr}
 8004cae:	4d06      	ldr	r5, [pc, #24]	@ (8004cc8 <_sbrk_r+0x1c>)
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	4604      	mov	r4, r0
 8004cb4:	4608      	mov	r0, r1
 8004cb6:	602b      	str	r3, [r5, #0]
 8004cb8:	f7fd f850 	bl	8001d5c <_sbrk>
 8004cbc:	1c43      	adds	r3, r0, #1
 8004cbe:	d102      	bne.n	8004cc6 <_sbrk_r+0x1a>
 8004cc0:	682b      	ldr	r3, [r5, #0]
 8004cc2:	b103      	cbz	r3, 8004cc6 <_sbrk_r+0x1a>
 8004cc4:	6023      	str	r3, [r4, #0]
 8004cc6:	bd38      	pop	{r3, r4, r5, pc}
 8004cc8:	20000604 	.word	0x20000604

08004ccc <__errno>:
 8004ccc:	4b01      	ldr	r3, [pc, #4]	@ (8004cd4 <__errno+0x8>)
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	2000001c 	.word	0x2000001c

08004cd8 <__libc_init_array>:
 8004cd8:	b570      	push	{r4, r5, r6, lr}
 8004cda:	4d0d      	ldr	r5, [pc, #52]	@ (8004d10 <__libc_init_array+0x38>)
 8004cdc:	4c0d      	ldr	r4, [pc, #52]	@ (8004d14 <__libc_init_array+0x3c>)
 8004cde:	1b64      	subs	r4, r4, r5
 8004ce0:	10a4      	asrs	r4, r4, #2
 8004ce2:	2600      	movs	r6, #0
 8004ce4:	42a6      	cmp	r6, r4
 8004ce6:	d109      	bne.n	8004cfc <__libc_init_array+0x24>
 8004ce8:	4d0b      	ldr	r5, [pc, #44]	@ (8004d18 <__libc_init_array+0x40>)
 8004cea:	4c0c      	ldr	r4, [pc, #48]	@ (8004d1c <__libc_init_array+0x44>)
 8004cec:	f000 fb78 	bl	80053e0 <_init>
 8004cf0:	1b64      	subs	r4, r4, r5
 8004cf2:	10a4      	asrs	r4, r4, #2
 8004cf4:	2600      	movs	r6, #0
 8004cf6:	42a6      	cmp	r6, r4
 8004cf8:	d105      	bne.n	8004d06 <__libc_init_array+0x2e>
 8004cfa:	bd70      	pop	{r4, r5, r6, pc}
 8004cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d00:	4798      	blx	r3
 8004d02:	3601      	adds	r6, #1
 8004d04:	e7ee      	b.n	8004ce4 <__libc_init_array+0xc>
 8004d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d0a:	4798      	blx	r3
 8004d0c:	3601      	adds	r6, #1
 8004d0e:	e7f2      	b.n	8004cf6 <__libc_init_array+0x1e>
 8004d10:	08005514 	.word	0x08005514
 8004d14:	08005514 	.word	0x08005514
 8004d18:	08005514 	.word	0x08005514
 8004d1c:	0800551c 	.word	0x0800551c

08004d20 <__retarget_lock_acquire_recursive>:
 8004d20:	4770      	bx	lr

08004d22 <__retarget_lock_release_recursive>:
 8004d22:	4770      	bx	lr

08004d24 <memcpy>:
 8004d24:	440a      	add	r2, r1
 8004d26:	4291      	cmp	r1, r2
 8004d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d2c:	d100      	bne.n	8004d30 <memcpy+0xc>
 8004d2e:	4770      	bx	lr
 8004d30:	b510      	push	{r4, lr}
 8004d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d3a:	4291      	cmp	r1, r2
 8004d3c:	d1f9      	bne.n	8004d32 <memcpy+0xe>
 8004d3e:	bd10      	pop	{r4, pc}

08004d40 <_free_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	4605      	mov	r5, r0
 8004d44:	2900      	cmp	r1, #0
 8004d46:	d041      	beq.n	8004dcc <_free_r+0x8c>
 8004d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d4c:	1f0c      	subs	r4, r1, #4
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	bfb8      	it	lt
 8004d52:	18e4      	addlt	r4, r4, r3
 8004d54:	f7ff fefa 	bl	8004b4c <__malloc_lock>
 8004d58:	4a1d      	ldr	r2, [pc, #116]	@ (8004dd0 <_free_r+0x90>)
 8004d5a:	6813      	ldr	r3, [r2, #0]
 8004d5c:	b933      	cbnz	r3, 8004d6c <_free_r+0x2c>
 8004d5e:	6063      	str	r3, [r4, #4]
 8004d60:	6014      	str	r4, [r2, #0]
 8004d62:	4628      	mov	r0, r5
 8004d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d68:	f7ff bef6 	b.w	8004b58 <__malloc_unlock>
 8004d6c:	42a3      	cmp	r3, r4
 8004d6e:	d908      	bls.n	8004d82 <_free_r+0x42>
 8004d70:	6820      	ldr	r0, [r4, #0]
 8004d72:	1821      	adds	r1, r4, r0
 8004d74:	428b      	cmp	r3, r1
 8004d76:	bf01      	itttt	eq
 8004d78:	6819      	ldreq	r1, [r3, #0]
 8004d7a:	685b      	ldreq	r3, [r3, #4]
 8004d7c:	1809      	addeq	r1, r1, r0
 8004d7e:	6021      	streq	r1, [r4, #0]
 8004d80:	e7ed      	b.n	8004d5e <_free_r+0x1e>
 8004d82:	461a      	mov	r2, r3
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	b10b      	cbz	r3, 8004d8c <_free_r+0x4c>
 8004d88:	42a3      	cmp	r3, r4
 8004d8a:	d9fa      	bls.n	8004d82 <_free_r+0x42>
 8004d8c:	6811      	ldr	r1, [r2, #0]
 8004d8e:	1850      	adds	r0, r2, r1
 8004d90:	42a0      	cmp	r0, r4
 8004d92:	d10b      	bne.n	8004dac <_free_r+0x6c>
 8004d94:	6820      	ldr	r0, [r4, #0]
 8004d96:	4401      	add	r1, r0
 8004d98:	1850      	adds	r0, r2, r1
 8004d9a:	4283      	cmp	r3, r0
 8004d9c:	6011      	str	r1, [r2, #0]
 8004d9e:	d1e0      	bne.n	8004d62 <_free_r+0x22>
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	6053      	str	r3, [r2, #4]
 8004da6:	4408      	add	r0, r1
 8004da8:	6010      	str	r0, [r2, #0]
 8004daa:	e7da      	b.n	8004d62 <_free_r+0x22>
 8004dac:	d902      	bls.n	8004db4 <_free_r+0x74>
 8004dae:	230c      	movs	r3, #12
 8004db0:	602b      	str	r3, [r5, #0]
 8004db2:	e7d6      	b.n	8004d62 <_free_r+0x22>
 8004db4:	6820      	ldr	r0, [r4, #0]
 8004db6:	1821      	adds	r1, r4, r0
 8004db8:	428b      	cmp	r3, r1
 8004dba:	bf04      	itt	eq
 8004dbc:	6819      	ldreq	r1, [r3, #0]
 8004dbe:	685b      	ldreq	r3, [r3, #4]
 8004dc0:	6063      	str	r3, [r4, #4]
 8004dc2:	bf04      	itt	eq
 8004dc4:	1809      	addeq	r1, r1, r0
 8004dc6:	6021      	streq	r1, [r4, #0]
 8004dc8:	6054      	str	r4, [r2, #4]
 8004dca:	e7ca      	b.n	8004d62 <_free_r+0x22>
 8004dcc:	bd38      	pop	{r3, r4, r5, pc}
 8004dce:	bf00      	nop
 8004dd0:	200004c8 	.word	0x200004c8

08004dd4 <_malloc_usable_size_r>:
 8004dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dd8:	1f18      	subs	r0, r3, #4
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	bfbc      	itt	lt
 8004dde:	580b      	ldrlt	r3, [r1, r0]
 8004de0:	18c0      	addlt	r0, r0, r3
 8004de2:	4770      	bx	lr

08004de4 <__ssputs_r>:
 8004de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004de8:	688e      	ldr	r6, [r1, #8]
 8004dea:	461f      	mov	r7, r3
 8004dec:	42be      	cmp	r6, r7
 8004dee:	680b      	ldr	r3, [r1, #0]
 8004df0:	4682      	mov	sl, r0
 8004df2:	460c      	mov	r4, r1
 8004df4:	4690      	mov	r8, r2
 8004df6:	d82d      	bhi.n	8004e54 <__ssputs_r+0x70>
 8004df8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004dfc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e00:	d026      	beq.n	8004e50 <__ssputs_r+0x6c>
 8004e02:	6965      	ldr	r5, [r4, #20]
 8004e04:	6909      	ldr	r1, [r1, #16]
 8004e06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e0a:	eba3 0901 	sub.w	r9, r3, r1
 8004e0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e12:	1c7b      	adds	r3, r7, #1
 8004e14:	444b      	add	r3, r9
 8004e16:	106d      	asrs	r5, r5, #1
 8004e18:	429d      	cmp	r5, r3
 8004e1a:	bf38      	it	cc
 8004e1c:	461d      	movcc	r5, r3
 8004e1e:	0553      	lsls	r3, r2, #21
 8004e20:	d527      	bpl.n	8004e72 <__ssputs_r+0x8e>
 8004e22:	4629      	mov	r1, r5
 8004e24:	f7ff fe12 	bl	8004a4c <_malloc_r>
 8004e28:	4606      	mov	r6, r0
 8004e2a:	b360      	cbz	r0, 8004e86 <__ssputs_r+0xa2>
 8004e2c:	6921      	ldr	r1, [r4, #16]
 8004e2e:	464a      	mov	r2, r9
 8004e30:	f7ff ff78 	bl	8004d24 <memcpy>
 8004e34:	89a3      	ldrh	r3, [r4, #12]
 8004e36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e3e:	81a3      	strh	r3, [r4, #12]
 8004e40:	6126      	str	r6, [r4, #16]
 8004e42:	6165      	str	r5, [r4, #20]
 8004e44:	444e      	add	r6, r9
 8004e46:	eba5 0509 	sub.w	r5, r5, r9
 8004e4a:	6026      	str	r6, [r4, #0]
 8004e4c:	60a5      	str	r5, [r4, #8]
 8004e4e:	463e      	mov	r6, r7
 8004e50:	42be      	cmp	r6, r7
 8004e52:	d900      	bls.n	8004e56 <__ssputs_r+0x72>
 8004e54:	463e      	mov	r6, r7
 8004e56:	6820      	ldr	r0, [r4, #0]
 8004e58:	4632      	mov	r2, r6
 8004e5a:	4641      	mov	r1, r8
 8004e5c:	f000 faa6 	bl	80053ac <memmove>
 8004e60:	68a3      	ldr	r3, [r4, #8]
 8004e62:	1b9b      	subs	r3, r3, r6
 8004e64:	60a3      	str	r3, [r4, #8]
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	4433      	add	r3, r6
 8004e6a:	6023      	str	r3, [r4, #0]
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e72:	462a      	mov	r2, r5
 8004e74:	f7ff fe7e 	bl	8004b74 <_realloc_r>
 8004e78:	4606      	mov	r6, r0
 8004e7a:	2800      	cmp	r0, #0
 8004e7c:	d1e0      	bne.n	8004e40 <__ssputs_r+0x5c>
 8004e7e:	6921      	ldr	r1, [r4, #16]
 8004e80:	4650      	mov	r0, sl
 8004e82:	f7ff ff5d 	bl	8004d40 <_free_r>
 8004e86:	230c      	movs	r3, #12
 8004e88:	f8ca 3000 	str.w	r3, [sl]
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e92:	81a3      	strh	r3, [r4, #12]
 8004e94:	f04f 30ff 	mov.w	r0, #4294967295
 8004e98:	e7e9      	b.n	8004e6e <__ssputs_r+0x8a>
	...

08004e9c <_svfiprintf_r>:
 8004e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea0:	4698      	mov	r8, r3
 8004ea2:	898b      	ldrh	r3, [r1, #12]
 8004ea4:	061b      	lsls	r3, r3, #24
 8004ea6:	b09d      	sub	sp, #116	@ 0x74
 8004ea8:	4607      	mov	r7, r0
 8004eaa:	460d      	mov	r5, r1
 8004eac:	4614      	mov	r4, r2
 8004eae:	d510      	bpl.n	8004ed2 <_svfiprintf_r+0x36>
 8004eb0:	690b      	ldr	r3, [r1, #16]
 8004eb2:	b973      	cbnz	r3, 8004ed2 <_svfiprintf_r+0x36>
 8004eb4:	2140      	movs	r1, #64	@ 0x40
 8004eb6:	f7ff fdc9 	bl	8004a4c <_malloc_r>
 8004eba:	6028      	str	r0, [r5, #0]
 8004ebc:	6128      	str	r0, [r5, #16]
 8004ebe:	b930      	cbnz	r0, 8004ece <_svfiprintf_r+0x32>
 8004ec0:	230c      	movs	r3, #12
 8004ec2:	603b      	str	r3, [r7, #0]
 8004ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec8:	b01d      	add	sp, #116	@ 0x74
 8004eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ece:	2340      	movs	r3, #64	@ 0x40
 8004ed0:	616b      	str	r3, [r5, #20]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ed6:	2320      	movs	r3, #32
 8004ed8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004edc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ee0:	2330      	movs	r3, #48	@ 0x30
 8004ee2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005080 <_svfiprintf_r+0x1e4>
 8004ee6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004eea:	f04f 0901 	mov.w	r9, #1
 8004eee:	4623      	mov	r3, r4
 8004ef0:	469a      	mov	sl, r3
 8004ef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ef6:	b10a      	cbz	r2, 8004efc <_svfiprintf_r+0x60>
 8004ef8:	2a25      	cmp	r2, #37	@ 0x25
 8004efa:	d1f9      	bne.n	8004ef0 <_svfiprintf_r+0x54>
 8004efc:	ebba 0b04 	subs.w	fp, sl, r4
 8004f00:	d00b      	beq.n	8004f1a <_svfiprintf_r+0x7e>
 8004f02:	465b      	mov	r3, fp
 8004f04:	4622      	mov	r2, r4
 8004f06:	4629      	mov	r1, r5
 8004f08:	4638      	mov	r0, r7
 8004f0a:	f7ff ff6b 	bl	8004de4 <__ssputs_r>
 8004f0e:	3001      	adds	r0, #1
 8004f10:	f000 80a7 	beq.w	8005062 <_svfiprintf_r+0x1c6>
 8004f14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f16:	445a      	add	r2, fp
 8004f18:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f000 809f 	beq.w	8005062 <_svfiprintf_r+0x1c6>
 8004f24:	2300      	movs	r3, #0
 8004f26:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f2e:	f10a 0a01 	add.w	sl, sl, #1
 8004f32:	9304      	str	r3, [sp, #16]
 8004f34:	9307      	str	r3, [sp, #28]
 8004f36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f3c:	4654      	mov	r4, sl
 8004f3e:	2205      	movs	r2, #5
 8004f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f44:	484e      	ldr	r0, [pc, #312]	@ (8005080 <_svfiprintf_r+0x1e4>)
 8004f46:	f7fb f973 	bl	8000230 <memchr>
 8004f4a:	9a04      	ldr	r2, [sp, #16]
 8004f4c:	b9d8      	cbnz	r0, 8004f86 <_svfiprintf_r+0xea>
 8004f4e:	06d0      	lsls	r0, r2, #27
 8004f50:	bf44      	itt	mi
 8004f52:	2320      	movmi	r3, #32
 8004f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f58:	0711      	lsls	r1, r2, #28
 8004f5a:	bf44      	itt	mi
 8004f5c:	232b      	movmi	r3, #43	@ 0x2b
 8004f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f62:	f89a 3000 	ldrb.w	r3, [sl]
 8004f66:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f68:	d015      	beq.n	8004f96 <_svfiprintf_r+0xfa>
 8004f6a:	9a07      	ldr	r2, [sp, #28]
 8004f6c:	4654      	mov	r4, sl
 8004f6e:	2000      	movs	r0, #0
 8004f70:	f04f 0c0a 	mov.w	ip, #10
 8004f74:	4621      	mov	r1, r4
 8004f76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f7a:	3b30      	subs	r3, #48	@ 0x30
 8004f7c:	2b09      	cmp	r3, #9
 8004f7e:	d94b      	bls.n	8005018 <_svfiprintf_r+0x17c>
 8004f80:	b1b0      	cbz	r0, 8004fb0 <_svfiprintf_r+0x114>
 8004f82:	9207      	str	r2, [sp, #28]
 8004f84:	e014      	b.n	8004fb0 <_svfiprintf_r+0x114>
 8004f86:	eba0 0308 	sub.w	r3, r0, r8
 8004f8a:	fa09 f303 	lsl.w	r3, r9, r3
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	9304      	str	r3, [sp, #16]
 8004f92:	46a2      	mov	sl, r4
 8004f94:	e7d2      	b.n	8004f3c <_svfiprintf_r+0xa0>
 8004f96:	9b03      	ldr	r3, [sp, #12]
 8004f98:	1d19      	adds	r1, r3, #4
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	9103      	str	r1, [sp, #12]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	bfbb      	ittet	lt
 8004fa2:	425b      	neglt	r3, r3
 8004fa4:	f042 0202 	orrlt.w	r2, r2, #2
 8004fa8:	9307      	strge	r3, [sp, #28]
 8004faa:	9307      	strlt	r3, [sp, #28]
 8004fac:	bfb8      	it	lt
 8004fae:	9204      	strlt	r2, [sp, #16]
 8004fb0:	7823      	ldrb	r3, [r4, #0]
 8004fb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fb4:	d10a      	bne.n	8004fcc <_svfiprintf_r+0x130>
 8004fb6:	7863      	ldrb	r3, [r4, #1]
 8004fb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fba:	d132      	bne.n	8005022 <_svfiprintf_r+0x186>
 8004fbc:	9b03      	ldr	r3, [sp, #12]
 8004fbe:	1d1a      	adds	r2, r3, #4
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	9203      	str	r2, [sp, #12]
 8004fc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004fc8:	3402      	adds	r4, #2
 8004fca:	9305      	str	r3, [sp, #20]
 8004fcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005090 <_svfiprintf_r+0x1f4>
 8004fd0:	7821      	ldrb	r1, [r4, #0]
 8004fd2:	2203      	movs	r2, #3
 8004fd4:	4650      	mov	r0, sl
 8004fd6:	f7fb f92b 	bl	8000230 <memchr>
 8004fda:	b138      	cbz	r0, 8004fec <_svfiprintf_r+0x150>
 8004fdc:	9b04      	ldr	r3, [sp, #16]
 8004fde:	eba0 000a 	sub.w	r0, r0, sl
 8004fe2:	2240      	movs	r2, #64	@ 0x40
 8004fe4:	4082      	lsls	r2, r0
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	3401      	adds	r4, #1
 8004fea:	9304      	str	r3, [sp, #16]
 8004fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ff0:	4824      	ldr	r0, [pc, #144]	@ (8005084 <_svfiprintf_r+0x1e8>)
 8004ff2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ff6:	2206      	movs	r2, #6
 8004ff8:	f7fb f91a 	bl	8000230 <memchr>
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d036      	beq.n	800506e <_svfiprintf_r+0x1d2>
 8005000:	4b21      	ldr	r3, [pc, #132]	@ (8005088 <_svfiprintf_r+0x1ec>)
 8005002:	bb1b      	cbnz	r3, 800504c <_svfiprintf_r+0x1b0>
 8005004:	9b03      	ldr	r3, [sp, #12]
 8005006:	3307      	adds	r3, #7
 8005008:	f023 0307 	bic.w	r3, r3, #7
 800500c:	3308      	adds	r3, #8
 800500e:	9303      	str	r3, [sp, #12]
 8005010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005012:	4433      	add	r3, r6
 8005014:	9309      	str	r3, [sp, #36]	@ 0x24
 8005016:	e76a      	b.n	8004eee <_svfiprintf_r+0x52>
 8005018:	fb0c 3202 	mla	r2, ip, r2, r3
 800501c:	460c      	mov	r4, r1
 800501e:	2001      	movs	r0, #1
 8005020:	e7a8      	b.n	8004f74 <_svfiprintf_r+0xd8>
 8005022:	2300      	movs	r3, #0
 8005024:	3401      	adds	r4, #1
 8005026:	9305      	str	r3, [sp, #20]
 8005028:	4619      	mov	r1, r3
 800502a:	f04f 0c0a 	mov.w	ip, #10
 800502e:	4620      	mov	r0, r4
 8005030:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005034:	3a30      	subs	r2, #48	@ 0x30
 8005036:	2a09      	cmp	r2, #9
 8005038:	d903      	bls.n	8005042 <_svfiprintf_r+0x1a6>
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0c6      	beq.n	8004fcc <_svfiprintf_r+0x130>
 800503e:	9105      	str	r1, [sp, #20]
 8005040:	e7c4      	b.n	8004fcc <_svfiprintf_r+0x130>
 8005042:	fb0c 2101 	mla	r1, ip, r1, r2
 8005046:	4604      	mov	r4, r0
 8005048:	2301      	movs	r3, #1
 800504a:	e7f0      	b.n	800502e <_svfiprintf_r+0x192>
 800504c:	ab03      	add	r3, sp, #12
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	462a      	mov	r2, r5
 8005052:	4b0e      	ldr	r3, [pc, #56]	@ (800508c <_svfiprintf_r+0x1f0>)
 8005054:	a904      	add	r1, sp, #16
 8005056:	4638      	mov	r0, r7
 8005058:	f3af 8000 	nop.w
 800505c:	1c42      	adds	r2, r0, #1
 800505e:	4606      	mov	r6, r0
 8005060:	d1d6      	bne.n	8005010 <_svfiprintf_r+0x174>
 8005062:	89ab      	ldrh	r3, [r5, #12]
 8005064:	065b      	lsls	r3, r3, #25
 8005066:	f53f af2d 	bmi.w	8004ec4 <_svfiprintf_r+0x28>
 800506a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800506c:	e72c      	b.n	8004ec8 <_svfiprintf_r+0x2c>
 800506e:	ab03      	add	r3, sp, #12
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	462a      	mov	r2, r5
 8005074:	4b05      	ldr	r3, [pc, #20]	@ (800508c <_svfiprintf_r+0x1f0>)
 8005076:	a904      	add	r1, sp, #16
 8005078:	4638      	mov	r0, r7
 800507a:	f000 f879 	bl	8005170 <_printf_i>
 800507e:	e7ed      	b.n	800505c <_svfiprintf_r+0x1c0>
 8005080:	080054d8 	.word	0x080054d8
 8005084:	080054e2 	.word	0x080054e2
 8005088:	00000000 	.word	0x00000000
 800508c:	08004de5 	.word	0x08004de5
 8005090:	080054de 	.word	0x080054de

08005094 <_printf_common>:
 8005094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005098:	4616      	mov	r6, r2
 800509a:	4698      	mov	r8, r3
 800509c:	688a      	ldr	r2, [r1, #8]
 800509e:	690b      	ldr	r3, [r1, #16]
 80050a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050a4:	4293      	cmp	r3, r2
 80050a6:	bfb8      	it	lt
 80050a8:	4613      	movlt	r3, r2
 80050aa:	6033      	str	r3, [r6, #0]
 80050ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80050b0:	4607      	mov	r7, r0
 80050b2:	460c      	mov	r4, r1
 80050b4:	b10a      	cbz	r2, 80050ba <_printf_common+0x26>
 80050b6:	3301      	adds	r3, #1
 80050b8:	6033      	str	r3, [r6, #0]
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	0699      	lsls	r1, r3, #26
 80050be:	bf42      	ittt	mi
 80050c0:	6833      	ldrmi	r3, [r6, #0]
 80050c2:	3302      	addmi	r3, #2
 80050c4:	6033      	strmi	r3, [r6, #0]
 80050c6:	6825      	ldr	r5, [r4, #0]
 80050c8:	f015 0506 	ands.w	r5, r5, #6
 80050cc:	d106      	bne.n	80050dc <_printf_common+0x48>
 80050ce:	f104 0a19 	add.w	sl, r4, #25
 80050d2:	68e3      	ldr	r3, [r4, #12]
 80050d4:	6832      	ldr	r2, [r6, #0]
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	42ab      	cmp	r3, r5
 80050da:	dc26      	bgt.n	800512a <_printf_common+0x96>
 80050dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050e0:	6822      	ldr	r2, [r4, #0]
 80050e2:	3b00      	subs	r3, #0
 80050e4:	bf18      	it	ne
 80050e6:	2301      	movne	r3, #1
 80050e8:	0692      	lsls	r2, r2, #26
 80050ea:	d42b      	bmi.n	8005144 <_printf_common+0xb0>
 80050ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050f0:	4641      	mov	r1, r8
 80050f2:	4638      	mov	r0, r7
 80050f4:	47c8      	blx	r9
 80050f6:	3001      	adds	r0, #1
 80050f8:	d01e      	beq.n	8005138 <_printf_common+0xa4>
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	6922      	ldr	r2, [r4, #16]
 80050fe:	f003 0306 	and.w	r3, r3, #6
 8005102:	2b04      	cmp	r3, #4
 8005104:	bf02      	ittt	eq
 8005106:	68e5      	ldreq	r5, [r4, #12]
 8005108:	6833      	ldreq	r3, [r6, #0]
 800510a:	1aed      	subeq	r5, r5, r3
 800510c:	68a3      	ldr	r3, [r4, #8]
 800510e:	bf0c      	ite	eq
 8005110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005114:	2500      	movne	r5, #0
 8005116:	4293      	cmp	r3, r2
 8005118:	bfc4      	itt	gt
 800511a:	1a9b      	subgt	r3, r3, r2
 800511c:	18ed      	addgt	r5, r5, r3
 800511e:	2600      	movs	r6, #0
 8005120:	341a      	adds	r4, #26
 8005122:	42b5      	cmp	r5, r6
 8005124:	d11a      	bne.n	800515c <_printf_common+0xc8>
 8005126:	2000      	movs	r0, #0
 8005128:	e008      	b.n	800513c <_printf_common+0xa8>
 800512a:	2301      	movs	r3, #1
 800512c:	4652      	mov	r2, sl
 800512e:	4641      	mov	r1, r8
 8005130:	4638      	mov	r0, r7
 8005132:	47c8      	blx	r9
 8005134:	3001      	adds	r0, #1
 8005136:	d103      	bne.n	8005140 <_printf_common+0xac>
 8005138:	f04f 30ff 	mov.w	r0, #4294967295
 800513c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005140:	3501      	adds	r5, #1
 8005142:	e7c6      	b.n	80050d2 <_printf_common+0x3e>
 8005144:	18e1      	adds	r1, r4, r3
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	2030      	movs	r0, #48	@ 0x30
 800514a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800514e:	4422      	add	r2, r4
 8005150:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005154:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005158:	3302      	adds	r3, #2
 800515a:	e7c7      	b.n	80050ec <_printf_common+0x58>
 800515c:	2301      	movs	r3, #1
 800515e:	4622      	mov	r2, r4
 8005160:	4641      	mov	r1, r8
 8005162:	4638      	mov	r0, r7
 8005164:	47c8      	blx	r9
 8005166:	3001      	adds	r0, #1
 8005168:	d0e6      	beq.n	8005138 <_printf_common+0xa4>
 800516a:	3601      	adds	r6, #1
 800516c:	e7d9      	b.n	8005122 <_printf_common+0x8e>
	...

08005170 <_printf_i>:
 8005170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005174:	7e0f      	ldrb	r7, [r1, #24]
 8005176:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005178:	2f78      	cmp	r7, #120	@ 0x78
 800517a:	4691      	mov	r9, r2
 800517c:	4680      	mov	r8, r0
 800517e:	460c      	mov	r4, r1
 8005180:	469a      	mov	sl, r3
 8005182:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005186:	d807      	bhi.n	8005198 <_printf_i+0x28>
 8005188:	2f62      	cmp	r7, #98	@ 0x62
 800518a:	d80a      	bhi.n	80051a2 <_printf_i+0x32>
 800518c:	2f00      	cmp	r7, #0
 800518e:	f000 80d1 	beq.w	8005334 <_printf_i+0x1c4>
 8005192:	2f58      	cmp	r7, #88	@ 0x58
 8005194:	f000 80b8 	beq.w	8005308 <_printf_i+0x198>
 8005198:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800519c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80051a0:	e03a      	b.n	8005218 <_printf_i+0xa8>
 80051a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80051a6:	2b15      	cmp	r3, #21
 80051a8:	d8f6      	bhi.n	8005198 <_printf_i+0x28>
 80051aa:	a101      	add	r1, pc, #4	@ (adr r1, 80051b0 <_printf_i+0x40>)
 80051ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051b0:	08005209 	.word	0x08005209
 80051b4:	0800521d 	.word	0x0800521d
 80051b8:	08005199 	.word	0x08005199
 80051bc:	08005199 	.word	0x08005199
 80051c0:	08005199 	.word	0x08005199
 80051c4:	08005199 	.word	0x08005199
 80051c8:	0800521d 	.word	0x0800521d
 80051cc:	08005199 	.word	0x08005199
 80051d0:	08005199 	.word	0x08005199
 80051d4:	08005199 	.word	0x08005199
 80051d8:	08005199 	.word	0x08005199
 80051dc:	0800531b 	.word	0x0800531b
 80051e0:	08005247 	.word	0x08005247
 80051e4:	080052d5 	.word	0x080052d5
 80051e8:	08005199 	.word	0x08005199
 80051ec:	08005199 	.word	0x08005199
 80051f0:	0800533d 	.word	0x0800533d
 80051f4:	08005199 	.word	0x08005199
 80051f8:	08005247 	.word	0x08005247
 80051fc:	08005199 	.word	0x08005199
 8005200:	08005199 	.word	0x08005199
 8005204:	080052dd 	.word	0x080052dd
 8005208:	6833      	ldr	r3, [r6, #0]
 800520a:	1d1a      	adds	r2, r3, #4
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6032      	str	r2, [r6, #0]
 8005210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005214:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005218:	2301      	movs	r3, #1
 800521a:	e09c      	b.n	8005356 <_printf_i+0x1e6>
 800521c:	6833      	ldr	r3, [r6, #0]
 800521e:	6820      	ldr	r0, [r4, #0]
 8005220:	1d19      	adds	r1, r3, #4
 8005222:	6031      	str	r1, [r6, #0]
 8005224:	0606      	lsls	r6, r0, #24
 8005226:	d501      	bpl.n	800522c <_printf_i+0xbc>
 8005228:	681d      	ldr	r5, [r3, #0]
 800522a:	e003      	b.n	8005234 <_printf_i+0xc4>
 800522c:	0645      	lsls	r5, r0, #25
 800522e:	d5fb      	bpl.n	8005228 <_printf_i+0xb8>
 8005230:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005234:	2d00      	cmp	r5, #0
 8005236:	da03      	bge.n	8005240 <_printf_i+0xd0>
 8005238:	232d      	movs	r3, #45	@ 0x2d
 800523a:	426d      	negs	r5, r5
 800523c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005240:	4858      	ldr	r0, [pc, #352]	@ (80053a4 <_printf_i+0x234>)
 8005242:	230a      	movs	r3, #10
 8005244:	e011      	b.n	800526a <_printf_i+0xfa>
 8005246:	6821      	ldr	r1, [r4, #0]
 8005248:	6833      	ldr	r3, [r6, #0]
 800524a:	0608      	lsls	r0, r1, #24
 800524c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005250:	d402      	bmi.n	8005258 <_printf_i+0xe8>
 8005252:	0649      	lsls	r1, r1, #25
 8005254:	bf48      	it	mi
 8005256:	b2ad      	uxthmi	r5, r5
 8005258:	2f6f      	cmp	r7, #111	@ 0x6f
 800525a:	4852      	ldr	r0, [pc, #328]	@ (80053a4 <_printf_i+0x234>)
 800525c:	6033      	str	r3, [r6, #0]
 800525e:	bf14      	ite	ne
 8005260:	230a      	movne	r3, #10
 8005262:	2308      	moveq	r3, #8
 8005264:	2100      	movs	r1, #0
 8005266:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800526a:	6866      	ldr	r6, [r4, #4]
 800526c:	60a6      	str	r6, [r4, #8]
 800526e:	2e00      	cmp	r6, #0
 8005270:	db05      	blt.n	800527e <_printf_i+0x10e>
 8005272:	6821      	ldr	r1, [r4, #0]
 8005274:	432e      	orrs	r6, r5
 8005276:	f021 0104 	bic.w	r1, r1, #4
 800527a:	6021      	str	r1, [r4, #0]
 800527c:	d04b      	beq.n	8005316 <_printf_i+0x1a6>
 800527e:	4616      	mov	r6, r2
 8005280:	fbb5 f1f3 	udiv	r1, r5, r3
 8005284:	fb03 5711 	mls	r7, r3, r1, r5
 8005288:	5dc7      	ldrb	r7, [r0, r7]
 800528a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800528e:	462f      	mov	r7, r5
 8005290:	42bb      	cmp	r3, r7
 8005292:	460d      	mov	r5, r1
 8005294:	d9f4      	bls.n	8005280 <_printf_i+0x110>
 8005296:	2b08      	cmp	r3, #8
 8005298:	d10b      	bne.n	80052b2 <_printf_i+0x142>
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	07df      	lsls	r7, r3, #31
 800529e:	d508      	bpl.n	80052b2 <_printf_i+0x142>
 80052a0:	6923      	ldr	r3, [r4, #16]
 80052a2:	6861      	ldr	r1, [r4, #4]
 80052a4:	4299      	cmp	r1, r3
 80052a6:	bfde      	ittt	le
 80052a8:	2330      	movle	r3, #48	@ 0x30
 80052aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052b2:	1b92      	subs	r2, r2, r6
 80052b4:	6122      	str	r2, [r4, #16]
 80052b6:	f8cd a000 	str.w	sl, [sp]
 80052ba:	464b      	mov	r3, r9
 80052bc:	aa03      	add	r2, sp, #12
 80052be:	4621      	mov	r1, r4
 80052c0:	4640      	mov	r0, r8
 80052c2:	f7ff fee7 	bl	8005094 <_printf_common>
 80052c6:	3001      	adds	r0, #1
 80052c8:	d14a      	bne.n	8005360 <_printf_i+0x1f0>
 80052ca:	f04f 30ff 	mov.w	r0, #4294967295
 80052ce:	b004      	add	sp, #16
 80052d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	f043 0320 	orr.w	r3, r3, #32
 80052da:	6023      	str	r3, [r4, #0]
 80052dc:	4832      	ldr	r0, [pc, #200]	@ (80053a8 <_printf_i+0x238>)
 80052de:	2778      	movs	r7, #120	@ 0x78
 80052e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	6831      	ldr	r1, [r6, #0]
 80052e8:	061f      	lsls	r7, r3, #24
 80052ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80052ee:	d402      	bmi.n	80052f6 <_printf_i+0x186>
 80052f0:	065f      	lsls	r7, r3, #25
 80052f2:	bf48      	it	mi
 80052f4:	b2ad      	uxthmi	r5, r5
 80052f6:	6031      	str	r1, [r6, #0]
 80052f8:	07d9      	lsls	r1, r3, #31
 80052fa:	bf44      	itt	mi
 80052fc:	f043 0320 	orrmi.w	r3, r3, #32
 8005300:	6023      	strmi	r3, [r4, #0]
 8005302:	b11d      	cbz	r5, 800530c <_printf_i+0x19c>
 8005304:	2310      	movs	r3, #16
 8005306:	e7ad      	b.n	8005264 <_printf_i+0xf4>
 8005308:	4826      	ldr	r0, [pc, #152]	@ (80053a4 <_printf_i+0x234>)
 800530a:	e7e9      	b.n	80052e0 <_printf_i+0x170>
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	f023 0320 	bic.w	r3, r3, #32
 8005312:	6023      	str	r3, [r4, #0]
 8005314:	e7f6      	b.n	8005304 <_printf_i+0x194>
 8005316:	4616      	mov	r6, r2
 8005318:	e7bd      	b.n	8005296 <_printf_i+0x126>
 800531a:	6833      	ldr	r3, [r6, #0]
 800531c:	6825      	ldr	r5, [r4, #0]
 800531e:	6961      	ldr	r1, [r4, #20]
 8005320:	1d18      	adds	r0, r3, #4
 8005322:	6030      	str	r0, [r6, #0]
 8005324:	062e      	lsls	r6, r5, #24
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	d501      	bpl.n	800532e <_printf_i+0x1be>
 800532a:	6019      	str	r1, [r3, #0]
 800532c:	e002      	b.n	8005334 <_printf_i+0x1c4>
 800532e:	0668      	lsls	r0, r5, #25
 8005330:	d5fb      	bpl.n	800532a <_printf_i+0x1ba>
 8005332:	8019      	strh	r1, [r3, #0]
 8005334:	2300      	movs	r3, #0
 8005336:	6123      	str	r3, [r4, #16]
 8005338:	4616      	mov	r6, r2
 800533a:	e7bc      	b.n	80052b6 <_printf_i+0x146>
 800533c:	6833      	ldr	r3, [r6, #0]
 800533e:	1d1a      	adds	r2, r3, #4
 8005340:	6032      	str	r2, [r6, #0]
 8005342:	681e      	ldr	r6, [r3, #0]
 8005344:	6862      	ldr	r2, [r4, #4]
 8005346:	2100      	movs	r1, #0
 8005348:	4630      	mov	r0, r6
 800534a:	f7fa ff71 	bl	8000230 <memchr>
 800534e:	b108      	cbz	r0, 8005354 <_printf_i+0x1e4>
 8005350:	1b80      	subs	r0, r0, r6
 8005352:	6060      	str	r0, [r4, #4]
 8005354:	6863      	ldr	r3, [r4, #4]
 8005356:	6123      	str	r3, [r4, #16]
 8005358:	2300      	movs	r3, #0
 800535a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800535e:	e7aa      	b.n	80052b6 <_printf_i+0x146>
 8005360:	6923      	ldr	r3, [r4, #16]
 8005362:	4632      	mov	r2, r6
 8005364:	4649      	mov	r1, r9
 8005366:	4640      	mov	r0, r8
 8005368:	47d0      	blx	sl
 800536a:	3001      	adds	r0, #1
 800536c:	d0ad      	beq.n	80052ca <_printf_i+0x15a>
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	079b      	lsls	r3, r3, #30
 8005372:	d413      	bmi.n	800539c <_printf_i+0x22c>
 8005374:	68e0      	ldr	r0, [r4, #12]
 8005376:	9b03      	ldr	r3, [sp, #12]
 8005378:	4298      	cmp	r0, r3
 800537a:	bfb8      	it	lt
 800537c:	4618      	movlt	r0, r3
 800537e:	e7a6      	b.n	80052ce <_printf_i+0x15e>
 8005380:	2301      	movs	r3, #1
 8005382:	4632      	mov	r2, r6
 8005384:	4649      	mov	r1, r9
 8005386:	4640      	mov	r0, r8
 8005388:	47d0      	blx	sl
 800538a:	3001      	adds	r0, #1
 800538c:	d09d      	beq.n	80052ca <_printf_i+0x15a>
 800538e:	3501      	adds	r5, #1
 8005390:	68e3      	ldr	r3, [r4, #12]
 8005392:	9903      	ldr	r1, [sp, #12]
 8005394:	1a5b      	subs	r3, r3, r1
 8005396:	42ab      	cmp	r3, r5
 8005398:	dcf2      	bgt.n	8005380 <_printf_i+0x210>
 800539a:	e7eb      	b.n	8005374 <_printf_i+0x204>
 800539c:	2500      	movs	r5, #0
 800539e:	f104 0619 	add.w	r6, r4, #25
 80053a2:	e7f5      	b.n	8005390 <_printf_i+0x220>
 80053a4:	080054e9 	.word	0x080054e9
 80053a8:	080054fa 	.word	0x080054fa

080053ac <memmove>:
 80053ac:	4288      	cmp	r0, r1
 80053ae:	b510      	push	{r4, lr}
 80053b0:	eb01 0402 	add.w	r4, r1, r2
 80053b4:	d902      	bls.n	80053bc <memmove+0x10>
 80053b6:	4284      	cmp	r4, r0
 80053b8:	4623      	mov	r3, r4
 80053ba:	d807      	bhi.n	80053cc <memmove+0x20>
 80053bc:	1e43      	subs	r3, r0, #1
 80053be:	42a1      	cmp	r1, r4
 80053c0:	d008      	beq.n	80053d4 <memmove+0x28>
 80053c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053ca:	e7f8      	b.n	80053be <memmove+0x12>
 80053cc:	4402      	add	r2, r0
 80053ce:	4601      	mov	r1, r0
 80053d0:	428a      	cmp	r2, r1
 80053d2:	d100      	bne.n	80053d6 <memmove+0x2a>
 80053d4:	bd10      	pop	{r4, pc}
 80053d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053de:	e7f7      	b.n	80053d0 <memmove+0x24>

080053e0 <_init>:
 80053e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e2:	bf00      	nop
 80053e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053e6:	bc08      	pop	{r3}
 80053e8:	469e      	mov	lr, r3
 80053ea:	4770      	bx	lr

080053ec <_fini>:
 80053ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ee:	bf00      	nop
 80053f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053f2:	bc08      	pop	{r3}
 80053f4:	469e      	mov	lr, r3
 80053f6:	4770      	bx	lr
