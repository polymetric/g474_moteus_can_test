
g474_moteus_can_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042f4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080044d4  080044d4  000054d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800457c  0800457c  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800457c  0800457c  0000557c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004584  08004584  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004584  08004584  00005584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004588  08004588  00005588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800458c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  2000006c  080045f8  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  080045f8  00006324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014489  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002691  00000000  00000000  0001a525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  0001cbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009da  00000000  00000000  0001d8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029713  00000000  00000000  0001e27a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa22  00000000  00000000  0004798d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9164  00000000  00000000  000573af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150513  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a48  00000000  00000000  00150558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00153fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080044bc 	.word	0x080044bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	080044bc 	.word	0x080044bc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b988 	b.w	80005f8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	468e      	mov	lr, r1
 8000308:	4604      	mov	r4, r0
 800030a:	4688      	mov	r8, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d962      	bls.n	80003dc <__udivmoddi4+0xdc>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	b14e      	cbz	r6, 8000330 <__udivmoddi4+0x30>
 800031c:	f1c6 0320 	rsb	r3, r6, #32
 8000320:	fa01 f806 	lsl.w	r8, r1, r6
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	40b7      	lsls	r7, r6
 800032a:	ea43 0808 	orr.w	r8, r3, r8
 800032e:	40b4      	lsls	r4, r6
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fbb8 f1fe 	udiv	r1, r8, lr
 800033c:	0c23      	lsrs	r3, r4, #16
 800033e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000346:	fb01 f20c 	mul.w	r2, r1, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x62>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f101 30ff 	add.w	r0, r1, #4294967295
 8000354:	f080 80ea 	bcs.w	800052c <__udivmoddi4+0x22c>
 8000358:	429a      	cmp	r2, r3
 800035a:	f240 80e7 	bls.w	800052c <__udivmoddi4+0x22c>
 800035e:	3902      	subs	r1, #2
 8000360:	443b      	add	r3, r7
 8000362:	1a9a      	subs	r2, r3, r2
 8000364:	b2a3      	uxth	r3, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000372:	fb00 fc0c 	mul.w	ip, r0, ip
 8000376:	459c      	cmp	ip, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x8e>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000380:	f080 80d6 	bcs.w	8000530 <__udivmoddi4+0x230>
 8000384:	459c      	cmp	ip, r3
 8000386:	f240 80d3 	bls.w	8000530 <__udivmoddi4+0x230>
 800038a:	443b      	add	r3, r7
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000392:	eba3 030c 	sub.w	r3, r3, ip
 8000396:	2100      	movs	r1, #0
 8000398:	b11d      	cbz	r5, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40f3      	lsrs	r3, r6
 800039c:	2200      	movs	r2, #0
 800039e:	e9c5 3200 	strd	r3, r2, [r5]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d905      	bls.n	80003b6 <__udivmoddi4+0xb6>
 80003aa:	b10d      	cbz	r5, 80003b0 <__udivmoddi4+0xb0>
 80003ac:	e9c5 0100 	strd	r0, r1, [r5]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4608      	mov	r0, r1
 80003b4:	e7f5      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003b6:	fab3 f183 	clz	r1, r3
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d146      	bne.n	800044c <__udivmoddi4+0x14c>
 80003be:	4573      	cmp	r3, lr
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xc8>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 8105 	bhi.w	80005d2 <__udivmoddi4+0x2d2>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4690      	mov	r8, r2
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	d0e5      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003d6:	e9c5 4800 	strd	r4, r8, [r5]
 80003da:	e7e2      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f000 8090 	beq.w	8000502 <__udivmoddi4+0x202>
 80003e2:	fab2 f682 	clz	r6, r2
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f040 80a4 	bne.w	8000534 <__udivmoddi4+0x234>
 80003ec:	1a8a      	subs	r2, r1, r2
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	b280      	uxth	r0, r0
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000406:	fb04 f20c 	mul.w	r2, r4, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x11e>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x11c>
 8000416:	429a      	cmp	r2, r3
 8000418:	f200 80e0 	bhi.w	80005dc <__udivmoddi4+0x2dc>
 800041c:	46c4      	mov	ip, r8
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	fbb3 f2fe 	udiv	r2, r3, lr
 8000424:	fb0e 3312 	mls	r3, lr, r2, r3
 8000428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800042c:	fb02 f404 	mul.w	r4, r2, r4
 8000430:	429c      	cmp	r4, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x144>
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	f102 30ff 	add.w	r0, r2, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x142>
 800043c:	429c      	cmp	r4, r3
 800043e:	f200 80ca 	bhi.w	80005d6 <__udivmoddi4+0x2d6>
 8000442:	4602      	mov	r2, r0
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0x98>
 800044c:	f1c1 0620 	rsb	r6, r1, #32
 8000450:	408b      	lsls	r3, r1
 8000452:	fa22 f706 	lsr.w	r7, r2, r6
 8000456:	431f      	orrs	r7, r3
 8000458:	fa0e f401 	lsl.w	r4, lr, r1
 800045c:	fa20 f306 	lsr.w	r3, r0, r6
 8000460:	fa2e fe06 	lsr.w	lr, lr, r6
 8000464:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000468:	4323      	orrs	r3, r4
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	fa1f fc87 	uxth.w	ip, r7
 8000472:	fbbe f0f9 	udiv	r0, lr, r9
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fb09 ee10 	mls	lr, r9, r0, lr
 800047c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000480:	fb00 fe0c 	mul.w	lr, r0, ip
 8000484:	45a6      	cmp	lr, r4
 8000486:	fa02 f201 	lsl.w	r2, r2, r1
 800048a:	d909      	bls.n	80004a0 <__udivmoddi4+0x1a0>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000492:	f080 809c 	bcs.w	80005ce <__udivmoddi4+0x2ce>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f240 8099 	bls.w	80005ce <__udivmoddi4+0x2ce>
 800049c:	3802      	subs	r0, #2
 800049e:	443c      	add	r4, r7
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	fa1f fe83 	uxth.w	lr, r3
 80004a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ac:	fb09 4413 	mls	r4, r9, r3, r4
 80004b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b8:	45a4      	cmp	ip, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f103 3eff 	add.w	lr, r3, #4294967295
 80004c2:	f080 8082 	bcs.w	80005ca <__udivmoddi4+0x2ca>
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d97f      	bls.n	80005ca <__udivmoddi4+0x2ca>
 80004ca:	3b02      	subs	r3, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004d2:	eba4 040c 	sub.w	r4, r4, ip
 80004d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004da:	4564      	cmp	r4, ip
 80004dc:	4673      	mov	r3, lr
 80004de:	46e1      	mov	r9, ip
 80004e0:	d362      	bcc.n	80005a8 <__udivmoddi4+0x2a8>
 80004e2:	d05f      	beq.n	80005a4 <__udivmoddi4+0x2a4>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x1fe>
 80004e6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ea:	eb64 0409 	sbc.w	r4, r4, r9
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e74f      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000502:	fbb1 fcf2 	udiv	ip, r1, r2
 8000506:	0c01      	lsrs	r1, r0, #16
 8000508:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800050c:	b280      	uxth	r0, r0
 800050e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000512:	463b      	mov	r3, r7
 8000514:	4638      	mov	r0, r7
 8000516:	463c      	mov	r4, r7
 8000518:	46b8      	mov	r8, r7
 800051a:	46be      	mov	lr, r7
 800051c:	2620      	movs	r6, #32
 800051e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000522:	eba2 0208 	sub.w	r2, r2, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e766      	b.n	80003fa <__udivmoddi4+0xfa>
 800052c:	4601      	mov	r1, r0
 800052e:	e718      	b.n	8000362 <__udivmoddi4+0x62>
 8000530:	4610      	mov	r0, r2
 8000532:	e72c      	b.n	800038e <__udivmoddi4+0x8e>
 8000534:	f1c6 0220 	rsb	r2, r6, #32
 8000538:	fa2e f302 	lsr.w	r3, lr, r2
 800053c:	40b7      	lsls	r7, r6
 800053e:	40b1      	lsls	r1, r6
 8000540:	fa20 f202 	lsr.w	r2, r0, r2
 8000544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000548:	430a      	orrs	r2, r1
 800054a:	fbb3 f8fe 	udiv	r8, r3, lr
 800054e:	b2bc      	uxth	r4, r7
 8000550:	fb0e 3318 	mls	r3, lr, r8, r3
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb08 f904 	mul.w	r9, r8, r4
 800055e:	40b0      	lsls	r0, r6
 8000560:	4589      	cmp	r9, r1
 8000562:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000566:	b280      	uxth	r0, r0
 8000568:	d93e      	bls.n	80005e8 <__udivmoddi4+0x2e8>
 800056a:	1879      	adds	r1, r7, r1
 800056c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x276>
 8000572:	4589      	cmp	r9, r1
 8000574:	d81f      	bhi.n	80005b6 <__udivmoddi4+0x2b6>
 8000576:	eba1 0109 	sub.w	r1, r1, r9
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	fb0e 1119 	mls	r1, lr, r9, r1
 8000586:	b292      	uxth	r2, r2
 8000588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800058c:	4542      	cmp	r2, r8
 800058e:	d229      	bcs.n	80005e4 <__udivmoddi4+0x2e4>
 8000590:	18ba      	adds	r2, r7, r2
 8000592:	f109 31ff 	add.w	r1, r9, #4294967295
 8000596:	d2c4      	bcs.n	8000522 <__udivmoddi4+0x222>
 8000598:	4542      	cmp	r2, r8
 800059a:	d2c2      	bcs.n	8000522 <__udivmoddi4+0x222>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443a      	add	r2, r7
 80005a2:	e7be      	b.n	8000522 <__udivmoddi4+0x222>
 80005a4:	45f0      	cmp	r8, lr
 80005a6:	d29d      	bcs.n	80004e4 <__udivmoddi4+0x1e4>
 80005a8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b0:	3801      	subs	r0, #1
 80005b2:	46e1      	mov	r9, ip
 80005b4:	e796      	b.n	80004e4 <__udivmoddi4+0x1e4>
 80005b6:	eba7 0909 	sub.w	r9, r7, r9
 80005ba:	4449      	add	r1, r9
 80005bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c4:	fb09 f804 	mul.w	r8, r9, r4
 80005c8:	e7db      	b.n	8000582 <__udivmoddi4+0x282>
 80005ca:	4673      	mov	r3, lr
 80005cc:	e77f      	b.n	80004ce <__udivmoddi4+0x1ce>
 80005ce:	4650      	mov	r0, sl
 80005d0:	e766      	b.n	80004a0 <__udivmoddi4+0x1a0>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e6fd      	b.n	80003d2 <__udivmoddi4+0xd2>
 80005d6:	443b      	add	r3, r7
 80005d8:	3a02      	subs	r2, #2
 80005da:	e733      	b.n	8000444 <__udivmoddi4+0x144>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	443b      	add	r3, r7
 80005e2:	e71c      	b.n	800041e <__udivmoddi4+0x11e>
 80005e4:	4649      	mov	r1, r9
 80005e6:	e79c      	b.n	8000522 <__udivmoddi4+0x222>
 80005e8:	eba1 0109 	sub.w	r1, r1, r9
 80005ec:	46c4      	mov	ip, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c4      	b.n	8000582 <__udivmoddi4+0x282>

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b0e0      	sub	sp, #384	@ 0x180
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f000 fc2d 	bl	8000e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f88d 	bl	8000724 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f000 f9a1 	bl	8000950 <_ZL12MX_GPIO_Initv>
  MX_FDCAN1_Init();
 800060e:	f000 f8df 	bl	80007d0 <_ZL14MX_FDCAN1_Initv>
  MX_USART2_UART_Init();
 8000612:	f000 f93d 	bl	8000890 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_FDCAN_Start(&hfdcan1);
 8000616:	483c      	ldr	r0, [pc, #240]	@ (8000708 <main+0x10c>)
 8000618:	f000 ff8d 	bl	8001536 <HAL_FDCAN_Start>

  TxHeader.Identifier = 0x8001;
 800061c:	4b3b      	ldr	r3, [pc, #236]	@ (800070c <main+0x110>)
 800061e:	f248 0201 	movw	r2, #32769	@ 0x8001
 8000622:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_EXTENDED_ID;
 8000624:	4b39      	ldr	r3, [pc, #228]	@ (800070c <main+0x110>)
 8000626:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800062a:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800062c:	4b37      	ldr	r3, [pc, #220]	@ (800070c <main+0x110>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_5;
 8000632:	4b36      	ldr	r3, [pc, #216]	@ (800070c <main+0x110>)
 8000634:	2205      	movs	r2, #5
 8000636:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000638:	4b34      	ldr	r3, [pc, #208]	@ (800070c <main+0x110>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800063e:	4b33      	ldr	r3, [pc, #204]	@ (800070c <main+0x110>)
 8000640:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000644:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8000646:	4b31      	ldr	r3, [pc, #196]	@ (800070c <main+0x110>)
 8000648:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800064c:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800064e:	4b2f      	ldr	r3, [pc, #188]	@ (800070c <main+0x110>)
 8000650:	2200      	movs	r2, #0
 8000652:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000654:	4b2d      	ldr	r3, [pc, #180]	@ (800070c <main+0x110>)
 8000656:	2200      	movs	r2, #0
 8000658:	621a      	str	r2, [r3, #32]


  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 800065a:	2000      	movs	r0, #0
 800065c:	f000 fb38 	bl	8000cd0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000660:	2101      	movs	r1, #1
 8000662:	2000      	movs	r0, #0
 8000664:	f000 fb6a 	bl	8000d3c <BSP_PB_Init>
	  char pbuf[256];
//	  sprintf(buf, "helo\r\n");
//	  HAL_UART_Transmit(&huart2, buf, strlen(buf), 10);

//	  memset(txbuf, )
	  sprintf(txbuf, "balls");
 8000668:	463b      	mov	r3, r7
 800066a:	4929      	ldr	r1, [pc, #164]	@ (8000710 <main+0x114>)
 800066c:	4618      	mov	r0, r3
 800066e:	f003 fa85 	bl	8003b7c <siprintf>

	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, (uint8_t*) txbuf) != HAL_OK) {
 8000672:	463b      	mov	r3, r7
 8000674:	461a      	mov	r2, r3
 8000676:	4925      	ldr	r1, [pc, #148]	@ (800070c <main+0x110>)
 8000678:	4823      	ldr	r0, [pc, #140]	@ (8000708 <main+0x10c>)
 800067a:	f000 ff84 	bl	8001586 <HAL_FDCAN_AddMessageToTxFifoQ>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	bf14      	ite	ne
 8000684:	2301      	movne	r3, #1
 8000686:	2300      	moveq	r3, #0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <main+0x96>
		  Error_Handler();
 800068e:	f000 f99b 	bl	80009c8 <Error_Handler>
	  }

	  sprintf(pbuf, "sent: %s\n", txbuf);
 8000692:	463a      	mov	r2, r7
 8000694:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000698:	491e      	ldr	r1, [pc, #120]	@ (8000714 <main+0x118>)
 800069a:	4618      	mov	r0, r3
 800069c:	f003 fa6e 	bl	8003b7c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) pbuf, strlen(pbuf), 10);
 80006a0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fdbb 	bl	8000220 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80006b2:	230a      	movs	r3, #10
 80006b4:	4818      	ldr	r0, [pc, #96]	@ (8000718 <main+0x11c>)
 80006b6:	f002 fbb5 	bl	8002e24 <HAL_UART_Transmit>

	  while (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, (uint8_t*) rxbuf) != HAL_OK)
 80006ba:	bf00      	nop
 80006bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006c0:	4a16      	ldr	r2, [pc, #88]	@ (800071c <main+0x120>)
 80006c2:	2140      	movs	r1, #64	@ 0x40
 80006c4:	4810      	ldr	r0, [pc, #64]	@ (8000708 <main+0x10c>)
 80006c6:	f000 ffa3 	bl	8001610 <HAL_FDCAN_GetRxMessage>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	bf14      	ite	ne
 80006d0:	2301      	movne	r3, #1
 80006d2:	2300      	moveq	r3, #0
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1f0      	bne.n	80006bc <main+0xc0>
		  ;
	  sprintf(pbuf, "rcvd: %s\n", rxbuf);
 80006da:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80006de:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80006e2:	490f      	ldr	r1, [pc, #60]	@ (8000720 <main+0x124>)
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 fa49 	bl	8003b7c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) pbuf, strlen(pbuf), 10);
 80006ea:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff fd96 	bl	8000220 <strlen>
 80006f4:	4603      	mov	r3, r0
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80006fc:	230a      	movs	r3, #10
 80006fe:	4806      	ldr	r0, [pc, #24]	@ (8000718 <main+0x11c>)
 8000700:	f002 fb90 	bl	8002e24 <HAL_UART_Transmit>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8000704:	e7b0      	b.n	8000668 <main+0x6c>
 8000706:	bf00      	nop
 8000708:	20000088 	.word	0x20000088
 800070c:	20000180 	.word	0x20000180
 8000710:	080044d4 	.word	0x080044d4
 8000714:	080044dc 	.word	0x080044dc
 8000718:	200000ec 	.word	0x200000ec
 800071c:	200001a4 	.word	0x200001a4
 8000720:	080044e8 	.word	0x080044e8

08000724 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	@ 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0318 	add.w	r3, r7, #24
 800072e:	2238      	movs	r2, #56	@ 0x38
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f003 fa44 	bl	8003bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000746:	2000      	movs	r0, #0
 8000748:	f001 faec 	bl	8001d24 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000756:	2340      	movs	r3, #64	@ 0x40
 8000758:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075a:	2302      	movs	r3, #2
 800075c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075e:	2302      	movs	r3, #2
 8000760:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000762:	2304      	movs	r3, #4
 8000764:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000766:	2355      	movs	r3, #85	@ 0x55
 8000768:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076a:	2302      	movs	r3, #2
 800076c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800076e:	2302      	movs	r3, #2
 8000770:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000772:	2302      	movs	r3, #2
 8000774:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000776:	f107 0318 	add.w	r3, r7, #24
 800077a:	4618      	mov	r0, r3
 800077c:	f001 fb86 	bl	8001e8c <HAL_RCC_OscConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	bf14      	ite	ne
 8000786:	2301      	movne	r3, #1
 8000788:	2300      	moveq	r3, #0
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000790:	f000 f91a 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	230f      	movs	r3, #15
 8000796:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000798:	2303      	movs	r3, #3
 800079a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2104      	movs	r1, #4
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 fe7f 	bl	80024b0 <HAL_RCC_ClockConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	bf14      	ite	ne
 80007b8:	2301      	movne	r3, #1
 80007ba:	2300      	moveq	r3, #0
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80007c2:	f000 f901 	bl	80009c8 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	@ 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80007d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0xb8>)
 80007d8:	4a2c      	ldr	r2, [pc, #176]	@ (800088c <_ZL14MX_FDCAN1_Initv+0xbc>)
 80007da:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80007dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0xb8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80007e2:	4b29      	ldr	r3, [pc, #164]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0xb8>)
 80007e4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80007e8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_INTERNAL_LOOPBACK;
 80007ea:	4b27      	ldr	r3, [pc, #156]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0xb8>)
 80007ec:	2203      	movs	r2, #3
 80007ee:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80007f0:	4b25      	ldr	r3, [pc, #148]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0xb8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80007f6:	4b24      	ldr	r3, [pc, #144]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0xb8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80007fc:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0xb8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000802:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0xb8>)
 8000804:	2201      	movs	r2, #1
 8000806:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8000808:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0xb8>)
 800080a:	2210      	movs	r2, #16
 800080c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 800080e:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0xb8>)
 8000810:	2238      	movs	r2, #56	@ 0x38
 8000812:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 28;
 8000814:	4b1c      	ldr	r3, [pc, #112]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0xb8>)
 8000816:	221c      	movs	r2, #28
 8000818:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800081a:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0xb8>)
 800081c:	2201      	movs	r2, #1
 800081e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000820:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0xb8>)
 8000822:	2201      	movs	r2, #1
 8000824:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 11;
 8000826:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0xb8>)
 8000828:	220b      	movs	r2, #11
 800082a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 800082c:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0xb8>)
 800082e:	2205      	movs	r2, #5
 8000830:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000832:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0xb8>)
 8000834:	2200      	movs	r2, #0
 8000836:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000838:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0xb8>)
 800083a:	2200      	movs	r2, #0
 800083c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800083e:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0xb8>)
 8000840:	2200      	movs	r2, #0
 8000842:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000844:	4810      	ldr	r0, [pc, #64]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0xb8>)
 8000846:	f000 fceb 	bl	8001220 <HAL_FDCAN_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	bf14      	ite	ne
 8000850:	2301      	movne	r3, #1
 8000852:	2300      	moveq	r3, #0
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <_ZL14MX_FDCAN1_Initv+0x8e>
  {
    Error_Handler();
 800085a:	f000 f8b5 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  if (HAL_FDCAN_ConfigGlobalFilter(
 800085e:	2300      	movs	r3, #0
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	2300      	movs	r3, #0
 8000864:	2200      	movs	r2, #0
 8000866:	2100      	movs	r1, #0
 8000868:	4807      	ldr	r0, [pc, #28]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0xb8>)
 800086a:	f000 fe33 	bl	80014d4 <HAL_FDCAN_ConfigGlobalFilter>
 800086e:	4603      	mov	r3, r0
          &hfdcan1,
          FDCAN_ACCEPT_IN_RX_FIFO0,
          FDCAN_ACCEPT_IN_RX_FIFO0,
          FDCAN_FILTER_REMOTE,
          FDCAN_FILTER_REMOTE) != HAL_OK) {
 8000870:	2b00      	cmp	r3, #0
 8000872:	bf14      	ite	ne
 8000874:	2301      	movne	r3, #1
 8000876:	2300      	moveq	r3, #0
 8000878:	b2db      	uxtb	r3, r3
  if (HAL_FDCAN_ConfigGlobalFilter(
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <_ZL14MX_FDCAN1_Initv+0xb2>
    Error_Handler();
 800087e:	f000 f8a3 	bl	80009c8 <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000088 	.word	0x20000088
 800088c:	40006400 	.word	0x40006400

08000890 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000894:	4b2c      	ldr	r3, [pc, #176]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000896:	4a2d      	ldr	r2, [pc, #180]	@ (800094c <_ZL19MX_USART2_UART_Initv+0xbc>)
 8000898:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089a:	4b2b      	ldr	r3, [pc, #172]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b29      	ldr	r3, [pc, #164]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b27      	ldr	r3, [pc, #156]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b26      	ldr	r3, [pc, #152]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b24      	ldr	r3, [pc, #144]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b23      	ldr	r3, [pc, #140]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c6:	4b20      	ldr	r3, [pc, #128]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d8:	481b      	ldr	r0, [pc, #108]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008da:	f002 fa53 	bl	8002d84 <HAL_UART_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	bf14      	ite	ne
 80008e4:	2301      	movne	r3, #1
 80008e6:	2300      	moveq	r3, #0
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 80008ee:	f000 f86b 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4814      	ldr	r0, [pc, #80]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008f6:	f003 f877 	bl	80039e8 <HAL_UARTEx_SetTxFifoThreshold>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	bf14      	ite	ne
 8000900:	2301      	movne	r3, #1
 8000902:	2300      	moveq	r3, #0
 8000904:	b2db      	uxtb	r3, r3
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 800090a:	f000 f85d 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800090e:	2100      	movs	r1, #0
 8000910:	480d      	ldr	r0, [pc, #52]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000912:	f003 f8a7 	bl	8003a64 <HAL_UARTEx_SetRxFifoThreshold>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	bf14      	ite	ne
 800091c:	2301      	movne	r3, #1
 800091e:	2300      	moveq	r3, #0
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8000926:	f000 f84f 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800092a:	4807      	ldr	r0, [pc, #28]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800092c:	f003 f823 	bl	8003976 <HAL_UARTEx_DisableFifoMode>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	bf14      	ite	ne
 8000936:	2301      	movne	r3, #1
 8000938:	2300      	moveq	r3, #0
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8000940:	f000 f842 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200000ec 	.word	0x200000ec
 800094c:	40004400 	.word	0x40004400

08000950 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	4b1b      	ldr	r3, [pc, #108]	@ (80009c4 <_ZL12MX_GPIO_Initv+0x74>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095a:	4a1a      	ldr	r2, [pc, #104]	@ (80009c4 <_ZL12MX_GPIO_Initv+0x74>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000962:	4b18      	ldr	r3, [pc, #96]	@ (80009c4 <_ZL12MX_GPIO_Initv+0x74>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <_ZL12MX_GPIO_Initv+0x74>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000972:	4a14      	ldr	r2, [pc, #80]	@ (80009c4 <_ZL12MX_GPIO_Initv+0x74>)
 8000974:	f043 0320 	orr.w	r3, r3, #32
 8000978:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800097a:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <_ZL12MX_GPIO_Initv+0x74>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097e:	f003 0320 	and.w	r3, r3, #32
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <_ZL12MX_GPIO_Initv+0x74>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098a:	4a0e      	ldr	r2, [pc, #56]	@ (80009c4 <_ZL12MX_GPIO_Initv+0x74>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000992:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <_ZL12MX_GPIO_Initv+0x74>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <_ZL12MX_GPIO_Initv+0x74>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a2:	4a08      	ldr	r2, [pc, #32]	@ (80009c4 <_ZL12MX_GPIO_Initv+0x74>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <_ZL12MX_GPIO_Initv+0x74>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009b6:	bf00      	nop
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <Error_Handler+0x8>

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <HAL_MspInit+0x44>)
 80009dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009de:	4a0e      	ldr	r2, [pc, #56]	@ (8000a18 <HAL_MspInit+0x44>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80009e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <HAL_MspInit+0x44>)
 80009e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <HAL_MspInit+0x44>)
 80009f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f6:	4a08      	ldr	r2, [pc, #32]	@ (8000a18 <HAL_MspInit+0x44>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80009fe:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <HAL_MspInit+0x44>)
 8000a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a0a:	f001 fa2f 	bl	8001e6c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40021000 	.word	0x40021000

08000a1c <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b09e      	sub	sp, #120	@ 0x78
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	2254      	movs	r2, #84	@ 0x54
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f003 f8bf 	bl	8003bc0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a20      	ldr	r2, [pc, #128]	@ (8000ac8 <HAL_FDCAN_MspInit+0xac>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d139      	bne.n	8000ac0 <HAL_FDCAN_MspInit+0xa4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a50:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000a52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a56:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f001 ff43 	bl	80028e8 <HAL_RCCEx_PeriphCLKConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000a68:	f7ff ffae 	bl	80009c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a6c:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <HAL_FDCAN_MspInit+0xb0>)
 8000a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a70:	4a16      	ldr	r2, [pc, #88]	@ (8000acc <HAL_FDCAN_MspInit+0xb0>)
 8000a72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a76:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a78:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <HAL_FDCAN_MspInit+0xb0>)
 8000a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <HAL_FDCAN_MspInit+0xb0>)
 8000a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a88:	4a10      	ldr	r2, [pc, #64]	@ (8000acc <HAL_FDCAN_MspInit+0xb0>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <HAL_FDCAN_MspInit+0xb0>)
 8000a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a9c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000aa0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000aae:	2309      	movs	r3, #9
 8000ab0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000abc:	f000 ff98 	bl	80019f0 <HAL_GPIO_Init>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000ac0:	bf00      	nop
 8000ac2:	3778      	adds	r7, #120	@ 0x78
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40006400 	.word	0x40006400
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b09e      	sub	sp, #120	@ 0x78
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	2254      	movs	r2, #84	@ 0x54
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f003 f865 	bl	8003bc0 <memset>
  if(huart->Instance==USART2)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <HAL_UART_MspInit+0xa8>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d136      	bne.n	8000b6e <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b00:	2302      	movs	r3, #2
 8000b02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 feeb 	bl	80028e8 <HAL_RCCEx_PeriphCLKConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b18:	f7ff ff56 	bl	80009c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b1c:	4b17      	ldr	r3, [pc, #92]	@ (8000b7c <HAL_UART_MspInit+0xac>)
 8000b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b20:	4a16      	ldr	r2, [pc, #88]	@ (8000b7c <HAL_UART_MspInit+0xac>)
 8000b22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b26:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b28:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <HAL_UART_MspInit+0xac>)
 8000b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <HAL_UART_MspInit+0xac>)
 8000b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b38:	4a10      	ldr	r2, [pc, #64]	@ (8000b7c <HAL_UART_MspInit+0xac>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b40:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <HAL_UART_MspInit+0xac>)
 8000b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b4c:	230c      	movs	r3, #12
 8000b4e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b5c:	2307      	movs	r3, #7
 8000b5e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b64:	4619      	mov	r1, r3
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b6a:	f000 ff41 	bl	80019f0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b6e:	bf00      	nop
 8000b70:	3778      	adds	r7, #120	@ 0x78
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40004400 	.word	0x40004400
 8000b7c:	40021000 	.word	0x40021000

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <NMI_Handler+0x4>

08000b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <MemManage_Handler+0x4>

08000b98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd6:	f000 f995 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000be2:	2000      	movs	r0, #0
 8000be4:	f000 f918 	bl	8000e18 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf4:	4a14      	ldr	r2, [pc, #80]	@ (8000c48 <_sbrk+0x5c>)
 8000bf6:	4b15      	ldr	r3, [pc, #84]	@ (8000c4c <_sbrk+0x60>)
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c00:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c08:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <_sbrk+0x64>)
 8000c0a:	4a12      	ldr	r2, [pc, #72]	@ (8000c54 <_sbrk+0x68>)
 8000c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0e:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d207      	bcs.n	8000c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c1c:	f002 ffd8 	bl	8003bd0 <__errno>
 8000c20:	4603      	mov	r3, r0
 8000c22:	220c      	movs	r2, #12
 8000c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	e009      	b.n	8000c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c2c:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c32:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	4a05      	ldr	r2, [pc, #20]	@ (8000c50 <_sbrk+0x64>)
 8000c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20020000 	.word	0x20020000
 8000c4c:	00000400 	.word	0x00000400
 8000c50:	200001cc 	.word	0x200001cc
 8000c54:	20000328 	.word	0x20000328

08000c58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <SystemInit+0x20>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c62:	4a05      	ldr	r2, [pc, #20]	@ (8000c78 <SystemInit+0x20>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c7c:	480d      	ldr	r0, [pc, #52]	@ (8000cb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c7e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c80:	f7ff ffea 	bl	8000c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c84:	480c      	ldr	r0, [pc, #48]	@ (8000cb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c86:	490d      	ldr	r1, [pc, #52]	@ (8000cbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c88:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc0 <LoopForever+0xe>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc8 <LoopForever+0x16>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000caa:	f002 ff97 	bl	8003bdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cae:	f7ff fca5 	bl	80005fc <main>

08000cb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cb2:	e7fe      	b.n	8000cb2 <LoopForever>
  ldr   r0, =_estack
 8000cb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000cc0:	0800458c 	.word	0x0800458c
  ldr r2, =_sbss
 8000cc4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000cc8:	20000324 	.word	0x20000324

08000ccc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC1_2_IRQHandler>
	...

08000cd0 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000cda:	4b16      	ldr	r3, [pc, #88]	@ (8000d34 <BSP_LED_Init+0x64>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cde:	4a15      	ldr	r2, [pc, #84]	@ (8000d34 <BSP_LED_Init+0x64>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce6:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <BSP_LED_Init+0x64>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000cf2:	2320      	movs	r3, #32
 8000cf4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	4a0c      	ldr	r2, [pc, #48]	@ (8000d38 <BSP_LED_Init+0x68>)
 8000d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0a:	f107 020c 	add.w	r2, r7, #12
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 fe6d 	bl	80019f0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	4a07      	ldr	r2, [pc, #28]	@ (8000d38 <BSP_LED_Init+0x68>)
 8000d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1e:	2120      	movs	r1, #32
 8000d20:	2200      	movs	r2, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 ffe6 	bl	8001cf4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3720      	adds	r7, #32
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000
 8000d38:	20000004 	.word	0x20000004

08000d3c <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b088      	sub	sp, #32
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	460a      	mov	r2, r1
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e00 <BSP_PB_Init+0xc4>)
 8000d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d50:	4a2b      	ldr	r2, [pc, #172]	@ (8000e00 <BSP_PB_Init+0xc4>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d58:	4b29      	ldr	r3, [pc, #164]	@ (8000e00 <BSP_PB_Init+0xc4>)
 8000d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000d64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d68:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000d72:	79bb      	ldrb	r3, [r7, #6]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10c      	bne.n	8000d92 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	4a21      	ldr	r2, [pc, #132]	@ (8000e04 <BSP_PB_Init+0xc8>)
 8000d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d84:	f107 020c 	add.w	r2, r7, #12
 8000d88:	4611      	mov	r1, r2
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 fe30 	bl	80019f0 <HAL_GPIO_Init>
 8000d90:	e031      	b.n	8000df6 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000d92:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d96:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	4a1a      	ldr	r2, [pc, #104]	@ (8000e04 <BSP_PB_Init+0xc8>)
 8000d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da0:	f107 020c 	add.w	r2, r7, #12
 8000da4:	4611      	mov	r1, r2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 fe22 	bl	80019f0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	4a15      	ldr	r2, [pc, #84]	@ (8000e08 <BSP_PB_Init+0xcc>)
 8000db2:	441a      	add	r2, r3
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	4915      	ldr	r1, [pc, #84]	@ (8000e0c <BSP_PB_Init+0xd0>)
 8000db8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4610      	mov	r0, r2
 8000dc0:	f000 f9ea 	bl	8001198 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8000e08 <BSP_PB_Init+0xcc>)
 8000dca:	1898      	adds	r0, r3, r2
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	4a10      	ldr	r2, [pc, #64]	@ (8000e10 <BSP_PB_Init+0xd4>)
 8000dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	f000 f9c1 	bl	800115e <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000ddc:	2028      	movs	r0, #40	@ 0x28
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	4a0c      	ldr	r2, [pc, #48]	@ (8000e14 <BSP_PB_Init+0xd8>)
 8000de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de6:	2200      	movs	r2, #0
 8000de8:	4619      	mov	r1, r3
 8000dea:	f000 f984 	bl	80010f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000dee:	2328      	movs	r3, #40	@ 0x28
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 f99a 	bl	800112a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000df6:	2300      	movs	r3, #0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3720      	adds	r7, #32
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40021000 	.word	0x40021000
 8000e04:	20000008 	.word	0x20000008
 8000e08:	200001d0 	.word	0x200001d0
 8000e0c:	0800450c 	.word	0x0800450c
 8000e10:	2000000c 	.word	0x2000000c
 8000e14:	20000010 	.word	0x20000010

08000e18 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	4a04      	ldr	r2, [pc, #16]	@ (8000e38 <BSP_PB_IRQHandler+0x20>)
 8000e28:	4413      	add	r3, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f9c8 	bl	80011c0 <HAL_EXTI_IRQHandler>
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200001d0 	.word	0x200001d0

08000e3c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000e56:	2000      	movs	r0, #0
 8000e58:	f7ff fff0 	bl	8000e3c <BSP_PB_Callback>
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	f000 f938 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e70:	2000      	movs	r0, #0
 8000e72:	f000 f80d 	bl	8000e90 <HAL_InitTick>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d002      	beq.n	8000e82 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	e001      	b.n	8000e86 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e82:	f7ff fda7 	bl	80009d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e86:	79fb      	ldrb	r3, [r7, #7]

}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <HAL_InitTick+0x68>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d022      	beq.n	8000eea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ea4:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <HAL_InitTick+0x6c>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <HAL_InitTick+0x68>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000eb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 f944 	bl	8001146 <HAL_SYSTICK_Config>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d10f      	bne.n	8000ee4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b0f      	cmp	r3, #15
 8000ec8:	d809      	bhi.n	8000ede <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed2:	f000 f910 	bl	80010f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f00 <HAL_InitTick+0x70>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	e007      	b.n	8000eee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	73fb      	strb	r3, [r7, #15]
 8000ee2:	e004      	b.n	8000eee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	73fb      	strb	r3, [r7, #15]
 8000ee8:	e001      	b.n	8000eee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000018 	.word	0x20000018
 8000efc:	20000000 	.word	0x20000000
 8000f00:	20000014 	.word	0x20000014

08000f04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <HAL_IncTick+0x1c>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <HAL_IncTick+0x20>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4413      	add	r3, r2
 8000f12:	4a03      	ldr	r2, [pc, #12]	@ (8000f20 <HAL_IncTick+0x1c>)
 8000f14:	6013      	str	r3, [r2, #0]
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	200001d8 	.word	0x200001d8
 8000f24:	20000018 	.word	0x20000018

08000f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f2c:	4b03      	ldr	r3, [pc, #12]	@ (8000f3c <HAL_GetTick+0x14>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	200001d8 	.word	0x200001d8

08000f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f50:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f72:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	60d3      	str	r3, [r2, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f8c:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	f003 0307 	and.w	r3, r3, #7
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	db0b      	blt.n	8000fce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	f003 021f 	and.w	r2, r3, #31
 8000fbc:	4907      	ldr	r1, [pc, #28]	@ (8000fdc <__NVIC_EnableIRQ+0x38>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	095b      	lsrs	r3, r3, #5
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000e100 	.word	0xe000e100

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db0a      	blt.n	800100a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	490c      	ldr	r1, [pc, #48]	@ (800102c <__NVIC_SetPriority+0x4c>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	440b      	add	r3, r1
 8001004:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001008:	e00a      	b.n	8001020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4908      	ldr	r1, [pc, #32]	@ (8001030 <__NVIC_SetPriority+0x50>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	3b04      	subs	r3, #4
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	440b      	add	r3, r1
 800101e:	761a      	strb	r2, [r3, #24]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000e100 	.word	0xe000e100
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	@ 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f1c3 0307 	rsb	r3, r3, #7
 800104e:	2b04      	cmp	r3, #4
 8001050:	bf28      	it	cs
 8001052:	2304      	movcs	r3, #4
 8001054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3304      	adds	r3, #4
 800105a:	2b06      	cmp	r3, #6
 800105c:	d902      	bls.n	8001064 <NVIC_EncodePriority+0x30>
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3b03      	subs	r3, #3
 8001062:	e000      	b.n	8001066 <NVIC_EncodePriority+0x32>
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	f04f 32ff 	mov.w	r2, #4294967295
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43da      	mvns	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107c:	f04f 31ff 	mov.w	r1, #4294967295
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43d9      	mvns	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	4313      	orrs	r3, r2
         );
}
 800108e:	4618      	mov	r0, r3
 8001090:	3724      	adds	r7, #36	@ 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010ac:	d301      	bcc.n	80010b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00f      	b.n	80010d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b2:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <SysTick_Config+0x40>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ba:	210f      	movs	r1, #15
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f7ff ff8e 	bl	8000fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c4:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <SysTick_Config+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ca:	4b04      	ldr	r3, [pc, #16]	@ (80010dc <SysTick_Config+0x40>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	e000e010 	.word	0xe000e010

080010e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff29 	bl	8000f40 <__NVIC_SetPriorityGrouping>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff40 	bl	8000f88 <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff90 	bl	8001034 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5f 	bl	8000fe0 <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff33 	bl	8000fa4 <__NVIC_EnableIRQ>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffa4 	bl	800109c <SysTick_Config>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800115e:	b480      	push	{r7}
 8001160:	b087      	sub	sp, #28
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	460b      	mov	r3, r1
 8001168:	607a      	str	r2, [r7, #4]
 800116a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8001170:	7afb      	ldrb	r3, [r7, #11]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d103      	bne.n	800117e <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	605a      	str	r2, [r3, #4]
      break;
 800117c:	e005      	b.n	800118a <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	75fb      	strb	r3, [r7, #23]
      break;
 8001188:	bf00      	nop
  }

  return status;
 800118a:	7dfb      	ldrb	r3, [r7, #23]
}
 800118c:	4618      	mov	r0, r3
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e003      	b.n	80011b4 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80011b2:	2300      	movs	r3, #0
  }
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	0c1b      	lsrs	r3, r3, #16
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 031f 	and.w	r3, r3, #31
 80011dc:	2201      	movs	r2, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	015a      	lsls	r2, r3, #5
 80011e8:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <HAL_EXTI_IRQHandler+0x5c>)
 80011ea:	4413      	add	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d009      	beq.n	8001212 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4798      	blx	r3
    }
  }
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40010414 	.word	0x40010414

08001220 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e147      	b.n	80014c2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d106      	bne.n	800124c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fbe8 	bl	8000a1c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	699a      	ldr	r2, [r3, #24]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0210 	bic.w	r2, r2, #16
 800125a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800125c:	f7ff fe64 	bl	8000f28 <HAL_GetTick>
 8001260:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001262:	e012      	b.n	800128a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001264:	f7ff fe60 	bl	8000f28 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b0a      	cmp	r3, #10
 8001270:	d90b      	bls.n	800128a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001276:	f043 0201 	orr.w	r2, r3, #1
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2203      	movs	r2, #3
 8001282:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e11b      	b.n	80014c2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	2b08      	cmp	r3, #8
 8001296:	d0e5      	beq.n	8001264 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	699a      	ldr	r2, [r3, #24]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f042 0201 	orr.w	r2, r2, #1
 80012a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012a8:	f7ff fe3e 	bl	8000f28 <HAL_GetTick>
 80012ac:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80012ae:	e012      	b.n	80012d6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80012b0:	f7ff fe3a 	bl	8000f28 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b0a      	cmp	r3, #10
 80012bc:	d90b      	bls.n	80012d6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012c2:	f043 0201 	orr.w	r2, r3, #1
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2203      	movs	r2, #3
 80012ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e0f5      	b.n	80014c2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0e5      	beq.n	80012b0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	699a      	ldr	r2, [r3, #24]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0202 	orr.w	r2, r2, #2
 80012f2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a74      	ldr	r2, [pc, #464]	@ (80014cc <HAL_FDCAN_Init+0x2ac>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d103      	bne.n	8001306 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80012fe:	4a74      	ldr	r2, [pc, #464]	@ (80014d0 <HAL_FDCAN_Init+0x2b0>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	7c1b      	ldrb	r3, [r3, #16]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d108      	bne.n	8001320 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	699a      	ldr	r2, [r3, #24]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800131c:	619a      	str	r2, [r3, #24]
 800131e:	e007      	b.n	8001330 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	699a      	ldr	r2, [r3, #24]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800132e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	7c5b      	ldrb	r3, [r3, #17]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d108      	bne.n	800134a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	699a      	ldr	r2, [r3, #24]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001346:	619a      	str	r2, [r3, #24]
 8001348:	e007      	b.n	800135a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	699a      	ldr	r2, [r3, #24]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001358:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7c9b      	ldrb	r3, [r3, #18]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d108      	bne.n	8001374 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	699a      	ldr	r2, [r3, #24]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001370:	619a      	str	r2, [r3, #24]
 8001372:	e007      	b.n	8001384 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	699a      	ldr	r2, [r3, #24]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001382:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	699a      	ldr	r2, [r3, #24]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80013a8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	691a      	ldr	r2, [r3, #16]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0210 	bic.w	r2, r2, #16
 80013b8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d108      	bne.n	80013d4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f042 0204 	orr.w	r2, r2, #4
 80013d0:	619a      	str	r2, [r3, #24]
 80013d2:	e02c      	b.n	800142e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d028      	beq.n	800142e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d01c      	beq.n	800141e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	699a      	ldr	r2, [r3, #24]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80013f2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	691a      	ldr	r2, [r3, #16]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 0210 	orr.w	r2, r2, #16
 8001402:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	2b03      	cmp	r3, #3
 800140a:	d110      	bne.n	800142e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	699a      	ldr	r2, [r3, #24]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f042 0220 	orr.w	r2, r2, #32
 800141a:	619a      	str	r2, [r3, #24]
 800141c:	e007      	b.n	800142e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	699a      	ldr	r2, [r3, #24]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f042 0220 	orr.w	r2, r2, #32
 800142c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	3b01      	subs	r3, #1
 8001434:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	3b01      	subs	r3, #1
 800143c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800143e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001446:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	3b01      	subs	r3, #1
 8001450:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001456:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001458:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001462:	d115      	bne.n	8001490 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001468:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146e:	3b01      	subs	r3, #1
 8001470:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001472:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001478:	3b01      	subs	r3, #1
 800147a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800147c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001484:	3b01      	subs	r3, #1
 8001486:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800148c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800148e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 f9ba 	bl	8001820 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40006400 	.word	0x40006400
 80014d0:	40006500 	.word	0x40006500

080014d4 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d116      	bne.n	800151c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014f6:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	011a      	lsls	r2, r3, #4
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	431a      	orrs	r2, r3
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	431a      	orrs	r2, r3
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	431a      	orrs	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001518:	2300      	movs	r3, #0
 800151a:	e006      	b.n	800152a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001520:	f043 0204 	orr.w	r2, r3, #4
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
  }
}
 800152a:	4618      	mov	r0, r3
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b01      	cmp	r3, #1
 8001548:	d110      	bne.n	800156c <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2202      	movs	r2, #2
 800154e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	699a      	ldr	r2, [r3, #24]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0201 	bic.w	r2, r2, #1
 8001560:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	e006      	b.n	800157a <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001570:	f043 0204 	orr.w	r2, r3, #4
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
  }
}
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d12c      	bne.n	80015f8 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80015a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d007      	beq.n	80015be <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015b2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e023      	b.n	8001606 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80015c6:	0c1b      	lsrs	r3, r3, #16
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	68b9      	ldr	r1, [r7, #8]
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f000 f98f 	bl	80018f8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2101      	movs	r1, #1
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	fa01 f202 	lsl.w	r2, r1, r2
 80015e6:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80015ea:	2201      	movs	r2, #1
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	409a      	lsls	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	e006      	b.n	8001606 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015fc:	f043 0208 	orr.w	r2, r3, #8
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
  }
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001610:	b480      	push	{r7}
 8001612:	b08b      	sub	sp, #44	@ 0x2c
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
 800161c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001628:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800162a:	7efb      	ldrb	r3, [r7, #27]
 800162c:	2b02      	cmp	r3, #2
 800162e:	f040 80e8 	bne.w	8001802 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2b40      	cmp	r3, #64	@ 0x40
 8001636:	d137      	bne.n	80016a8 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001640:	f003 030f 	and.w	r3, r3, #15
 8001644:	2b00      	cmp	r3, #0
 8001646:	d107      	bne.n	8001658 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800164c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0db      	b.n	8001810 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001660:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001664:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001668:	d10a      	bne.n	8001680 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001672:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001676:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800167a:	d101      	bne.n	8001680 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800167c:	2301      	movs	r3, #1
 800167e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	4413      	add	r3, r2
 8001692:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	4613      	mov	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	4413      	add	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	440b      	add	r3, r1
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80016a6:	e036      	b.n	8001716 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016b0:	f003 030f 	and.w	r3, r3, #15
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d107      	bne.n	80016c8 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e0a3      	b.n	8001810 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016d8:	d10a      	bne.n	80016f0 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016ea:	d101      	bne.n	80016f0 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80016ec:	2301      	movs	r3, #1
 80016ee:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	4413      	add	r3, r2
 8001702:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001708:	69fa      	ldr	r2, [r7, #28]
 800170a:	4613      	mov	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4413      	add	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	440b      	add	r3, r1
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d107      	bne.n	800173a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800172a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	0c9b      	lsrs	r3, r3, #18
 8001730:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	e005      	b.n	8001746 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800173a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001760:	3304      	adds	r3, #4
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	b29a      	uxth	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800176e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	0c1b      	lsrs	r3, r3, #16
 8001774:	f003 020f 	and.w	r2, r3, #15
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800177c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	0e1b      	lsrs	r3, r3, #24
 800179a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80017a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	0fda      	lsrs	r2, r3, #31
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80017ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ae:	3304      	adds	r3, #4
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80017b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
 80017ba:	e00a      	b.n	80017d2 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	441a      	add	r2, r3
 80017c2:	6839      	ldr	r1, [r7, #0]
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	440b      	add	r3, r1
 80017c8:	7812      	ldrb	r2, [r2, #0]
 80017ca:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	3301      	adds	r3, #1
 80017d0:	623b      	str	r3, [r7, #32]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	4a11      	ldr	r2, [pc, #68]	@ (800181c <HAL_FDCAN_GetRxMessage+0x20c>)
 80017d8:	5cd3      	ldrb	r3, [r2, r3]
 80017da:	461a      	mov	r2, r3
 80017dc:	6a3b      	ldr	r3, [r7, #32]
 80017de:	4293      	cmp	r3, r2
 80017e0:	d3ec      	bcc.n	80017bc <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	2b40      	cmp	r3, #64	@ 0x40
 80017e6:	d105      	bne.n	80017f4 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	69fa      	ldr	r2, [r7, #28]
 80017ee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80017f2:	e004      	b.n	80017fe <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	e006      	b.n	8001810 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001806:	f043 0208 	orr.w	r2, r3, #8
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
  }
}
 8001810:	4618      	mov	r0, r3
 8001812:	372c      	adds	r7, #44	@ 0x2c
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	08004510 	.word	0x08004510

08001820 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001828:	4b30      	ldr	r3, [pc, #192]	@ (80018ec <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800182a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a2f      	ldr	r2, [pc, #188]	@ (80018f0 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d103      	bne.n	800183e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800183c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a2c      	ldr	r2, [pc, #176]	@ (80018f4 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d103      	bne.n	8001850 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800184e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800185e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001866:	041a      	lsls	r2, r3, #16
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001884:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800188c:	061a      	lsls	r2, r3, #24
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	e005      	b.n	80018d2 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	3304      	adds	r3, #4
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d3f3      	bcc.n	80018c6 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	4000a400 	.word	0x4000a400
 80018f0:	40006800 	.word	0x40006800
 80018f4:	40006c00 	.word	0x40006c00

080018f8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	@ 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10a      	bne.n	8001924 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001916:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800191e:	4313      	orrs	r3, r2
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	e00a      	b.n	800193a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800192c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001932:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001934:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001938:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001944:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800194a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001950:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	4613      	mov	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4413      	add	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	440b      	add	r3, r1
 800196c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	3304      	adds	r3, #4
 8001978:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	3304      	adds	r3, #4
 8001984:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	e020      	b.n	80019ce <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	3303      	adds	r3, #3
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	3302      	adds	r3, #2
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	440b      	add	r3, r1
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80019a4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	440b      	add	r3, r1
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80019b2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	440a      	add	r2, r1
 80019ba:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80019bc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	3304      	adds	r3, #4
 80019c6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	3304      	adds	r3, #4
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	4a06      	ldr	r2, [pc, #24]	@ (80019ec <FDCAN_CopyMessageToRAM+0xf4>)
 80019d4:	5cd3      	ldrb	r3, [r2, r3]
 80019d6:	461a      	mov	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	4293      	cmp	r3, r2
 80019dc:	d3d6      	bcc.n	800198c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80019de:	bf00      	nop
 80019e0:	bf00      	nop
 80019e2:	3724      	adds	r7, #36	@ 0x24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	08004510 	.word	0x08004510

080019f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019fe:	e15a      	b.n	8001cb6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2101      	movs	r1, #1
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 814c 	beq.w	8001cb0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d005      	beq.n	8001a30 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d130      	bne.n	8001a92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a66:	2201      	movs	r2, #1
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	091b      	lsrs	r3, r3, #4
 8001a7c:	f003 0201 	and.w	r2, r3, #1
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d017      	beq.n	8001ace <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d123      	bne.n	8001b22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	08da      	lsrs	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3208      	adds	r2, #8
 8001ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	220f      	movs	r2, #15
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	691a      	ldr	r2, [r3, #16]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	08da      	lsrs	r2, r3, #3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3208      	adds	r2, #8
 8001b1c:	6939      	ldr	r1, [r7, #16]
 8001b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0203 	and.w	r2, r3, #3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 80a6 	beq.w	8001cb0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b64:	4b5b      	ldr	r3, [pc, #364]	@ (8001cd4 <HAL_GPIO_Init+0x2e4>)
 8001b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b68:	4a5a      	ldr	r2, [pc, #360]	@ (8001cd4 <HAL_GPIO_Init+0x2e4>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b70:	4b58      	ldr	r3, [pc, #352]	@ (8001cd4 <HAL_GPIO_Init+0x2e4>)
 8001b72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b7c:	4a56      	ldr	r2, [pc, #344]	@ (8001cd8 <HAL_GPIO_Init+0x2e8>)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	089b      	lsrs	r3, r3, #2
 8001b82:	3302      	adds	r3, #2
 8001b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	220f      	movs	r2, #15
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ba6:	d01f      	beq.n	8001be8 <HAL_GPIO_Init+0x1f8>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a4c      	ldr	r2, [pc, #304]	@ (8001cdc <HAL_GPIO_Init+0x2ec>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d019      	beq.n	8001be4 <HAL_GPIO_Init+0x1f4>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a4b      	ldr	r2, [pc, #300]	@ (8001ce0 <HAL_GPIO_Init+0x2f0>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d013      	beq.n	8001be0 <HAL_GPIO_Init+0x1f0>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a4a      	ldr	r2, [pc, #296]	@ (8001ce4 <HAL_GPIO_Init+0x2f4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d00d      	beq.n	8001bdc <HAL_GPIO_Init+0x1ec>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a49      	ldr	r2, [pc, #292]	@ (8001ce8 <HAL_GPIO_Init+0x2f8>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d007      	beq.n	8001bd8 <HAL_GPIO_Init+0x1e8>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a48      	ldr	r2, [pc, #288]	@ (8001cec <HAL_GPIO_Init+0x2fc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d101      	bne.n	8001bd4 <HAL_GPIO_Init+0x1e4>
 8001bd0:	2305      	movs	r3, #5
 8001bd2:	e00a      	b.n	8001bea <HAL_GPIO_Init+0x1fa>
 8001bd4:	2306      	movs	r3, #6
 8001bd6:	e008      	b.n	8001bea <HAL_GPIO_Init+0x1fa>
 8001bd8:	2304      	movs	r3, #4
 8001bda:	e006      	b.n	8001bea <HAL_GPIO_Init+0x1fa>
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e004      	b.n	8001bea <HAL_GPIO_Init+0x1fa>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e002      	b.n	8001bea <HAL_GPIO_Init+0x1fa>
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <HAL_GPIO_Init+0x1fa>
 8001be8:	2300      	movs	r3, #0
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	f002 0203 	and.w	r2, r2, #3
 8001bf0:	0092      	lsls	r2, r2, #2
 8001bf2:	4093      	lsls	r3, r2
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bfa:	4937      	ldr	r1, [pc, #220]	@ (8001cd8 <HAL_GPIO_Init+0x2e8>)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	089b      	lsrs	r3, r3, #2
 8001c00:	3302      	adds	r3, #2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c08:	4b39      	ldr	r3, [pc, #228]	@ (8001cf0 <HAL_GPIO_Init+0x300>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c2c:	4a30      	ldr	r2, [pc, #192]	@ (8001cf0 <HAL_GPIO_Init+0x300>)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c32:	4b2f      	ldr	r3, [pc, #188]	@ (8001cf0 <HAL_GPIO_Init+0x300>)
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c56:	4a26      	ldr	r2, [pc, #152]	@ (8001cf0 <HAL_GPIO_Init+0x300>)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001c5c:	4b24      	ldr	r3, [pc, #144]	@ (8001cf0 <HAL_GPIO_Init+0x300>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c80:	4a1b      	ldr	r2, [pc, #108]	@ (8001cf0 <HAL_GPIO_Init+0x300>)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c86:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf0 <HAL_GPIO_Init+0x300>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001caa:	4a11      	ldr	r2, [pc, #68]	@ (8001cf0 <HAL_GPIO_Init+0x300>)
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f47f ae9d 	bne.w	8001a00 <HAL_GPIO_Init+0x10>
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	bf00      	nop
 8001cca:	371c      	adds	r7, #28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40010000 	.word	0x40010000
 8001cdc:	48000400 	.word	0x48000400
 8001ce0:	48000800 	.word	0x48000800
 8001ce4:	48000c00 	.word	0x48000c00
 8001ce8:	48001000 	.word	0x48001000
 8001cec:	48001400 	.word	0x48001400
 8001cf0:	40010400 	.word	0x40010400

08001cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	807b      	strh	r3, [r7, #2]
 8001d00:	4613      	mov	r3, r2
 8001d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d04:	787b      	ldrb	r3, [r7, #1]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d10:	e002      	b.n	8001d18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d12:	887a      	ldrh	r2, [r7, #2]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 HAL_GetTickeconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d141      	bne.n	8001db6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d32:	4b4b      	ldr	r3, [pc, #300]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d3e:	d131      	bne.n	8001da4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d40:	4b47      	ldr	r3, [pc, #284]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d46:	4a46      	ldr	r2, [pc, #280]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d50:	4b43      	ldr	r3, [pc, #268]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d58:	4a41      	ldr	r2, [pc, #260]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d60:	4b40      	ldr	r3, [pc, #256]	@ (8001e64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2232      	movs	r2, #50	@ 0x32
 8001d66:	fb02 f303 	mul.w	r3, r2, r3
 8001d6a:	4a3f      	ldr	r2, [pc, #252]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	0c9b      	lsrs	r3, r3, #18
 8001d72:	3301      	adds	r3, #1
 8001d74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d76:	e002      	b.n	8001d7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d7e:	4b38      	ldr	r3, [pc, #224]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d8a:	d102      	bne.n	8001d92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f2      	bne.n	8001d78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d92:	4b33      	ldr	r3, [pc, #204]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d9e:	d158      	bne.n	8001e52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e057      	b.n	8001e54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001da4:	4b2e      	ldr	r3, [pc, #184]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001daa:	4a2d      	ldr	r2, [pc, #180]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001db0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001db4:	e04d      	b.n	8001e52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dbc:	d141      	bne.n	8001e42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dbe:	4b28      	ldr	r3, [pc, #160]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001dc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dca:	d131      	bne.n	8001e30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dcc:	4b24      	ldr	r3, [pc, #144]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001dd2:	4a23      	ldr	r2, [pc, #140]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ddc:	4b20      	ldr	r3, [pc, #128]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001de4:	4a1e      	ldr	r2, [pc, #120]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dec:	4b1d      	ldr	r3, [pc, #116]	@ (8001e64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2232      	movs	r2, #50	@ 0x32
 8001df2:	fb02 f303 	mul.w	r3, r2, r3
 8001df6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001df8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfc:	0c9b      	lsrs	r3, r3, #18
 8001dfe:	3301      	adds	r3, #1
 8001e00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e02:	e002      	b.n	8001e0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e0a:	4b15      	ldr	r3, [pc, #84]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e16:	d102      	bne.n	8001e1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f2      	bne.n	8001e04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e1e:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e2a:	d112      	bne.n	8001e52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e011      	b.n	8001e54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e30:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e36:	4a0a      	ldr	r2, [pc, #40]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e40:	e007      	b.n	8001e52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e42:	4b07      	ldr	r3, [pc, #28]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e4a:	4a05      	ldr	r2, [pc, #20]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e50:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	40007000 	.word	0x40007000
 8001e64:	20000000 	.word	0x20000000
 8001e68:	431bde83 	.word	0x431bde83

08001e6c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e70:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	4a04      	ldr	r2, [pc, #16]	@ (8001e88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e7a:	6093      	str	r3, [r2, #8]
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40007000 	.word	0x40007000

08001e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e2fe      	b.n	800249c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d075      	beq.n	8001f96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eaa:	4b97      	ldr	r3, [pc, #604]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eb4:	4b94      	ldr	r3, [pc, #592]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	2b0c      	cmp	r3, #12
 8001ec2:	d102      	bne.n	8001eca <HAL_RCC_OscConfig+0x3e>
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d002      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x44>
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d10b      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed0:	4b8d      	ldr	r3, [pc, #564]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d05b      	beq.n	8001f94 <HAL_RCC_OscConfig+0x108>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d157      	bne.n	8001f94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e2d9      	b.n	800249c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ef0:	d106      	bne.n	8001f00 <HAL_RCC_OscConfig+0x74>
 8001ef2:	4b85      	ldr	r3, [pc, #532]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a84      	ldr	r2, [pc, #528]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8001ef8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e01d      	b.n	8001f3c <HAL_RCC_OscConfig+0xb0>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f08:	d10c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x98>
 8001f0a:	4b7f      	ldr	r3, [pc, #508]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a7e      	ldr	r2, [pc, #504]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8001f10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	4b7c      	ldr	r3, [pc, #496]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a7b      	ldr	r2, [pc, #492]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8001f1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	e00b      	b.n	8001f3c <HAL_RCC_OscConfig+0xb0>
 8001f24:	4b78      	ldr	r3, [pc, #480]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a77      	ldr	r2, [pc, #476]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8001f2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	4b75      	ldr	r3, [pc, #468]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a74      	ldr	r2, [pc, #464]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8001f36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d013      	beq.n	8001f6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7fe fff0 	bl	8000f28 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f4c:	f7fe ffec 	bl	8000f28 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b64      	cmp	r3, #100	@ 0x64
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e29e      	b.n	800249c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f5e:	4b6a      	ldr	r3, [pc, #424]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0xc0>
 8001f6a:	e014      	b.n	8001f96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7fe ffdc 	bl	8000f28 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f74:	f7fe ffd8 	bl	8000f28 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b64      	cmp	r3, #100	@ 0x64
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e28a      	b.n	800249c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f86:	4b60      	ldr	r3, [pc, #384]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0xe8>
 8001f92:	e000      	b.n	8001f96 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d075      	beq.n	800208e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fa2:	4b59      	ldr	r3, [pc, #356]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fac:	4b56      	ldr	r3, [pc, #344]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	2b0c      	cmp	r3, #12
 8001fba:	d102      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x136>
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d002      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x13c>
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d11f      	bne.n	8002008 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fc8:	4b4f      	ldr	r3, [pc, #316]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x154>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e25d      	b.n	800249c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe0:	4b49      	ldr	r3, [pc, #292]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	061b      	lsls	r3, r3, #24
 8001fee:	4946      	ldr	r1, [pc, #280]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ff4:	4b45      	ldr	r3, [pc, #276]	@ (800210c <HAL_RCC_OscConfig+0x280>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe ff49 	bl	8000e90 <HAL_InitTick>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d043      	beq.n	800208c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e249      	b.n	800249c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d023      	beq.n	8002058 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002010:	4b3d      	ldr	r3, [pc, #244]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a3c      	ldr	r2, [pc, #240]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8002016:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800201a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7fe ff84 	bl	8000f28 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002024:	f7fe ff80 	bl	8000f28 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e232      	b.n	800249c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002036:	4b34      	ldr	r3, [pc, #208]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002042:	4b31      	ldr	r3, [pc, #196]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	061b      	lsls	r3, r3, #24
 8002050:	492d      	ldr	r1, [pc, #180]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8002052:	4313      	orrs	r3, r2
 8002054:	604b      	str	r3, [r1, #4]
 8002056:	e01a      	b.n	800208e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002058:	4b2b      	ldr	r3, [pc, #172]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a2a      	ldr	r2, [pc, #168]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 800205e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7fe ff60 	bl	8000f28 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800206c:	f7fe ff5c 	bl	8000f28 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e20e      	b.n	800249c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800207e:	4b22      	ldr	r3, [pc, #136]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x1e0>
 800208a:	e000      	b.n	800208e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800208c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d041      	beq.n	800211e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d01c      	beq.n	80020dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020a2:	4b19      	ldr	r3, [pc, #100]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 80020a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020a8:	4a17      	ldr	r2, [pc, #92]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b2:	f7fe ff39 	bl	8000f28 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ba:	f7fe ff35 	bl	8000f28 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e1e7      	b.n	800249c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 80020ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0ef      	beq.n	80020ba <HAL_RCC_OscConfig+0x22e>
 80020da:	e020      	b.n	800211e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 80020de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020e2:	4a09      	ldr	r2, [pc, #36]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ec:	f7fe ff1c 	bl	8000f28 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020f2:	e00d      	b.n	8002110 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f4:	f7fe ff18 	bl	8000f28 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d906      	bls.n	8002110 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e1ca      	b.n	800249c <HAL_RCC_OscConfig+0x610>
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
 800210c:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002110:	4b8c      	ldr	r3, [pc, #560]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 8002112:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1ea      	bne.n	80020f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 80a6 	beq.w	8002278 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212c:	2300      	movs	r3, #0
 800212e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002130:	4b84      	ldr	r3, [pc, #528]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_RCC_OscConfig+0x2b4>
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <HAL_RCC_OscConfig+0x2b6>
 8002140:	2300      	movs	r3, #0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00d      	beq.n	8002162 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002146:	4b7f      	ldr	r3, [pc, #508]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 8002148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214a:	4a7e      	ldr	r2, [pc, #504]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 800214c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002150:	6593      	str	r3, [r2, #88]	@ 0x58
 8002152:	4b7c      	ldr	r3, [pc, #496]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 8002154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800215e:	2301      	movs	r3, #1
 8002160:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002162:	4b79      	ldr	r3, [pc, #484]	@ (8002348 <HAL_RCC_OscConfig+0x4bc>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216a:	2b00      	cmp	r3, #0
 800216c:	d118      	bne.n	80021a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800216e:	4b76      	ldr	r3, [pc, #472]	@ (8002348 <HAL_RCC_OscConfig+0x4bc>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a75      	ldr	r2, [pc, #468]	@ (8002348 <HAL_RCC_OscConfig+0x4bc>)
 8002174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217a:	f7fe fed5 	bl	8000f28 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002182:	f7fe fed1 	bl	8000f28 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e183      	b.n	800249c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002194:	4b6c      	ldr	r3, [pc, #432]	@ (8002348 <HAL_RCC_OscConfig+0x4bc>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d108      	bne.n	80021ba <HAL_RCC_OscConfig+0x32e>
 80021a8:	4b66      	ldr	r3, [pc, #408]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ae:	4a65      	ldr	r2, [pc, #404]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021b8:	e024      	b.n	8002204 <HAL_RCC_OscConfig+0x378>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b05      	cmp	r3, #5
 80021c0:	d110      	bne.n	80021e4 <HAL_RCC_OscConfig+0x358>
 80021c2:	4b60      	ldr	r3, [pc, #384]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 80021c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c8:	4a5e      	ldr	r2, [pc, #376]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 80021d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d8:	4a5a      	ldr	r2, [pc, #360]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021e2:	e00f      	b.n	8002204 <HAL_RCC_OscConfig+0x378>
 80021e4:	4b57      	ldr	r3, [pc, #348]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 80021e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ea:	4a56      	ldr	r2, [pc, #344]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 80021ec:	f023 0301 	bic.w	r3, r3, #1
 80021f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021f4:	4b53      	ldr	r3, [pc, #332]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 80021f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021fa:	4a52      	ldr	r2, [pc, #328]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 80021fc:	f023 0304 	bic.w	r3, r3, #4
 8002200:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d016      	beq.n	800223a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220c:	f7fe fe8c 	bl	8000f28 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002212:	e00a      	b.n	800222a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002214:	f7fe fe88 	bl	8000f28 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002222:	4293      	cmp	r3, r2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e138      	b.n	800249c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800222a:	4b46      	ldr	r3, [pc, #280]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 800222c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0ed      	beq.n	8002214 <HAL_RCC_OscConfig+0x388>
 8002238:	e015      	b.n	8002266 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223a:	f7fe fe75 	bl	8000f28 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002240:	e00a      	b.n	8002258 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002242:	f7fe fe71 	bl	8000f28 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002250:	4293      	cmp	r3, r2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e121      	b.n	800249c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002258:	4b3a      	ldr	r3, [pc, #232]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1ed      	bne.n	8002242 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002266:	7ffb      	ldrb	r3, [r7, #31]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d105      	bne.n	8002278 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800226c:	4b35      	ldr	r3, [pc, #212]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 800226e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002270:	4a34      	ldr	r2, [pc, #208]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 8002272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002276:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b00      	cmp	r3, #0
 8002282:	d03c      	beq.n	80022fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d01c      	beq.n	80022c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800228c:	4b2d      	ldr	r3, [pc, #180]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 800228e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002292:	4a2c      	ldr	r2, [pc, #176]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229c:	f7fe fe44 	bl	8000f28 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022a4:	f7fe fe40 	bl	8000f28 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e0f2      	b.n	800249c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022b6:	4b23      	ldr	r3, [pc, #140]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 80022b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0ef      	beq.n	80022a4 <HAL_RCC_OscConfig+0x418>
 80022c4:	e01b      	b.n	80022fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 80022c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 80022ce:	f023 0301 	bic.w	r3, r3, #1
 80022d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d6:	f7fe fe27 	bl	8000f28 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022de:	f7fe fe23 	bl	8000f28 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e0d5      	b.n	800249c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022f0:	4b14      	ldr	r3, [pc, #80]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 80022f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1ef      	bne.n	80022de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 80c9 	beq.w	800249a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002308:	4b0e      	ldr	r3, [pc, #56]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 030c 	and.w	r3, r3, #12
 8002310:	2b0c      	cmp	r3, #12
 8002312:	f000 8083 	beq.w	800241c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d15e      	bne.n	80023dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231e:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a08      	ldr	r2, [pc, #32]	@ (8002344 <HAL_RCC_OscConfig+0x4b8>)
 8002324:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232a:	f7fe fdfd 	bl	8000f28 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002330:	e00c      	b.n	800234c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002332:	f7fe fdf9 	bl	8000f28 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d905      	bls.n	800234c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e0ab      	b.n	800249c <HAL_RCC_OscConfig+0x610>
 8002344:	40021000 	.word	0x40021000
 8002348:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800234c:	4b55      	ldr	r3, [pc, #340]	@ (80024a4 <HAL_RCC_OscConfig+0x618>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1ec      	bne.n	8002332 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002358:	4b52      	ldr	r3, [pc, #328]	@ (80024a4 <HAL_RCC_OscConfig+0x618>)
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	4b52      	ldr	r3, [pc, #328]	@ (80024a8 <HAL_RCC_OscConfig+0x61c>)
 800235e:	4013      	ands	r3, r2
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6a11      	ldr	r1, [r2, #32]
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002368:	3a01      	subs	r2, #1
 800236a:	0112      	lsls	r2, r2, #4
 800236c:	4311      	orrs	r1, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002372:	0212      	lsls	r2, r2, #8
 8002374:	4311      	orrs	r1, r2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800237a:	0852      	lsrs	r2, r2, #1
 800237c:	3a01      	subs	r2, #1
 800237e:	0552      	lsls	r2, r2, #21
 8002380:	4311      	orrs	r1, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002386:	0852      	lsrs	r2, r2, #1
 8002388:	3a01      	subs	r2, #1
 800238a:	0652      	lsls	r2, r2, #25
 800238c:	4311      	orrs	r1, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002392:	06d2      	lsls	r2, r2, #27
 8002394:	430a      	orrs	r2, r1
 8002396:	4943      	ldr	r1, [pc, #268]	@ (80024a4 <HAL_RCC_OscConfig+0x618>)
 8002398:	4313      	orrs	r3, r2
 800239a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800239c:	4b41      	ldr	r3, [pc, #260]	@ (80024a4 <HAL_RCC_OscConfig+0x618>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a40      	ldr	r2, [pc, #256]	@ (80024a4 <HAL_RCC_OscConfig+0x618>)
 80023a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023a8:	4b3e      	ldr	r3, [pc, #248]	@ (80024a4 <HAL_RCC_OscConfig+0x618>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4a3d      	ldr	r2, [pc, #244]	@ (80024a4 <HAL_RCC_OscConfig+0x618>)
 80023ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7fe fdb8 	bl	8000f28 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023bc:	f7fe fdb4 	bl	8000f28 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e066      	b.n	800249c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ce:	4b35      	ldr	r3, [pc, #212]	@ (80024a4 <HAL_RCC_OscConfig+0x618>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x530>
 80023da:	e05e      	b.n	800249a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023dc:	4b31      	ldr	r3, [pc, #196]	@ (80024a4 <HAL_RCC_OscConfig+0x618>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a30      	ldr	r2, [pc, #192]	@ (80024a4 <HAL_RCC_OscConfig+0x618>)
 80023e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7fe fd9e 	bl	8000f28 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f0:	f7fe fd9a 	bl	8000f28 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e04c      	b.n	800249c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002402:	4b28      	ldr	r3, [pc, #160]	@ (80024a4 <HAL_RCC_OscConfig+0x618>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800240e:	4b25      	ldr	r3, [pc, #148]	@ (80024a4 <HAL_RCC_OscConfig+0x618>)
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	4924      	ldr	r1, [pc, #144]	@ (80024a4 <HAL_RCC_OscConfig+0x618>)
 8002414:	4b25      	ldr	r3, [pc, #148]	@ (80024ac <HAL_RCC_OscConfig+0x620>)
 8002416:	4013      	ands	r3, r2
 8002418:	60cb      	str	r3, [r1, #12]
 800241a:	e03e      	b.n	800249a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e039      	b.n	800249c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002428:	4b1e      	ldr	r3, [pc, #120]	@ (80024a4 <HAL_RCC_OscConfig+0x618>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f003 0203 	and.w	r2, r3, #3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	429a      	cmp	r2, r3
 800243a:	d12c      	bne.n	8002496 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002446:	3b01      	subs	r3, #1
 8002448:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244a:	429a      	cmp	r2, r3
 800244c:	d123      	bne.n	8002496 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002458:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d11b      	bne.n	8002496 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002468:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800246a:	429a      	cmp	r2, r3
 800246c:	d113      	bne.n	8002496 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002478:	085b      	lsrs	r3, r3, #1
 800247a:	3b01      	subs	r3, #1
 800247c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800247e:	429a      	cmp	r2, r3
 8002480:	d109      	bne.n	8002496 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800248c:	085b      	lsrs	r3, r3, #1
 800248e:	3b01      	subs	r3, #1
 8002490:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002492:	429a      	cmp	r2, r3
 8002494:	d001      	beq.n	800249a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3720      	adds	r7, #32
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40021000 	.word	0x40021000
 80024a8:	019f800c 	.word	0x019f800c
 80024ac:	feeefffc 	.word	0xfeeefffc

080024b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e11e      	b.n	8002706 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c8:	4b91      	ldr	r3, [pc, #580]	@ (8002710 <HAL_RCC_ClockConfig+0x260>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d910      	bls.n	80024f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b8e      	ldr	r3, [pc, #568]	@ (8002710 <HAL_RCC_ClockConfig+0x260>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 020f 	bic.w	r2, r3, #15
 80024de:	498c      	ldr	r1, [pc, #560]	@ (8002710 <HAL_RCC_ClockConfig+0x260>)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b8a      	ldr	r3, [pc, #552]	@ (8002710 <HAL_RCC_ClockConfig+0x260>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e106      	b.n	8002706 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d073      	beq.n	80025ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b03      	cmp	r3, #3
 800250a:	d129      	bne.n	8002560 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250c:	4b81      	ldr	r3, [pc, #516]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0f4      	b.n	8002706 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800251c:	f000 f99e 	bl	800285c <RCC_GetSysClockFreqFromPLLSource>
 8002520:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4a7c      	ldr	r2, [pc, #496]	@ (8002718 <HAL_RCC_ClockConfig+0x268>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d93f      	bls.n	80025aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800252a:	4b7a      	ldr	r3, [pc, #488]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800253e:	2b00      	cmp	r3, #0
 8002540:	d033      	beq.n	80025aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002546:	2b00      	cmp	r3, #0
 8002548:	d12f      	bne.n	80025aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800254a:	4b72      	ldr	r3, [pc, #456]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002552:	4a70      	ldr	r2, [pc, #448]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 8002554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002558:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800255a:	2380      	movs	r3, #128	@ 0x80
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	e024      	b.n	80025aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d107      	bne.n	8002578 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002568:	4b6a      	ldr	r3, [pc, #424]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d109      	bne.n	8002588 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0c6      	b.n	8002706 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002578:	4b66      	ldr	r3, [pc, #408]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0be      	b.n	8002706 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002588:	f000 f8ce 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 800258c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4a61      	ldr	r2, [pc, #388]	@ (8002718 <HAL_RCC_ClockConfig+0x268>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d909      	bls.n	80025aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002596:	4b5f      	ldr	r3, [pc, #380]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800259e:	4a5d      	ldr	r2, [pc, #372]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 80025a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80025a6:	2380      	movs	r3, #128	@ 0x80
 80025a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025aa:	4b5a      	ldr	r3, [pc, #360]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f023 0203 	bic.w	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4957      	ldr	r1, [pc, #348]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025bc:	f7fe fcb4 	bl	8000f28 <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	e00a      	b.n	80025da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c4:	f7fe fcb0 	bl	8000f28 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e095      	b.n	8002706 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	4b4e      	ldr	r3, [pc, #312]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 020c 	and.w	r2, r3, #12
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d1eb      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d023      	beq.n	8002640 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002604:	4b43      	ldr	r3, [pc, #268]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	4a42      	ldr	r2, [pc, #264]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 800260a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800260e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b00      	cmp	r3, #0
 800261a:	d007      	beq.n	800262c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800261c:	4b3d      	ldr	r3, [pc, #244]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002624:	4a3b      	ldr	r2, [pc, #236]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 8002626:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800262a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800262c:	4b39      	ldr	r3, [pc, #228]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	4936      	ldr	r1, [pc, #216]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 800263a:	4313      	orrs	r3, r2
 800263c:	608b      	str	r3, [r1, #8]
 800263e:	e008      	b.n	8002652 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2b80      	cmp	r3, #128	@ 0x80
 8002644:	d105      	bne.n	8002652 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002646:	4b33      	ldr	r3, [pc, #204]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	4a32      	ldr	r2, [pc, #200]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 800264c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002650:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002652:	4b2f      	ldr	r3, [pc, #188]	@ (8002710 <HAL_RCC_ClockConfig+0x260>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d21d      	bcs.n	800269c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002660:	4b2b      	ldr	r3, [pc, #172]	@ (8002710 <HAL_RCC_ClockConfig+0x260>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f023 020f 	bic.w	r2, r3, #15
 8002668:	4929      	ldr	r1, [pc, #164]	@ (8002710 <HAL_RCC_ClockConfig+0x260>)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	4313      	orrs	r3, r2
 800266e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002670:	f7fe fc5a 	bl	8000f28 <HAL_GetTick>
 8002674:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002676:	e00a      	b.n	800268e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002678:	f7fe fc56 	bl	8000f28 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002686:	4293      	cmp	r3, r2
 8002688:	d901      	bls.n	800268e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e03b      	b.n	8002706 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	4b20      	ldr	r3, [pc, #128]	@ (8002710 <HAL_RCC_ClockConfig+0x260>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d1ed      	bne.n	8002678 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4917      	ldr	r1, [pc, #92]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d009      	beq.n	80026da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026c6:	4b13      	ldr	r3, [pc, #76]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	490f      	ldr	r1, [pc, #60]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026da:	f000 f825 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 80026de:	4602      	mov	r2, r0
 80026e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002714 <HAL_RCC_ClockConfig+0x264>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	490c      	ldr	r1, [pc, #48]	@ (800271c <HAL_RCC_ClockConfig+0x26c>)
 80026ec:	5ccb      	ldrb	r3, [r1, r3]
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	fa22 f303 	lsr.w	r3, r2, r3
 80026f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002720 <HAL_RCC_ClockConfig+0x270>)
 80026f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80026fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002724 <HAL_RCC_ClockConfig+0x274>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe fbc6 	bl	8000e90 <HAL_InitTick>
 8002704:	4603      	mov	r3, r0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40022000 	.word	0x40022000
 8002714:	40021000 	.word	0x40021000
 8002718:	04c4b400 	.word	0x04c4b400
 800271c:	080044f4 	.word	0x080044f4
 8002720:	20000000 	.word	0x20000000
 8002724:	20000014 	.word	0x20000014

08002728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800272e:	4b2c      	ldr	r3, [pc, #176]	@ (80027e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b04      	cmp	r3, #4
 8002738:	d102      	bne.n	8002740 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800273a:	4b2a      	ldr	r3, [pc, #168]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	e047      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002740:	4b27      	ldr	r3, [pc, #156]	@ (80027e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 030c 	and.w	r3, r3, #12
 8002748:	2b08      	cmp	r3, #8
 800274a:	d102      	bne.n	8002752 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800274c:	4b26      	ldr	r3, [pc, #152]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	e03e      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002752:	4b23      	ldr	r3, [pc, #140]	@ (80027e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b0c      	cmp	r3, #12
 800275c:	d136      	bne.n	80027cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800275e:	4b20      	ldr	r3, [pc, #128]	@ (80027e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002768:	4b1d      	ldr	r3, [pc, #116]	@ (80027e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	3301      	adds	r3, #1
 8002774:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b03      	cmp	r3, #3
 800277a:	d10c      	bne.n	8002796 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800277c:	4a1a      	ldr	r2, [pc, #104]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	fbb2 f3f3 	udiv	r3, r2, r3
 8002784:	4a16      	ldr	r2, [pc, #88]	@ (80027e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002786:	68d2      	ldr	r2, [r2, #12]
 8002788:	0a12      	lsrs	r2, r2, #8
 800278a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800278e:	fb02 f303 	mul.w	r3, r2, r3
 8002792:	617b      	str	r3, [r7, #20]
      break;
 8002794:	e00c      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002796:	4a13      	ldr	r2, [pc, #76]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	fbb2 f3f3 	udiv	r3, r2, r3
 800279e:	4a10      	ldr	r2, [pc, #64]	@ (80027e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027a0:	68d2      	ldr	r2, [r2, #12]
 80027a2:	0a12      	lsrs	r2, r2, #8
 80027a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027a8:	fb02 f303 	mul.w	r3, r2, r3
 80027ac:	617b      	str	r3, [r7, #20]
      break;
 80027ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027b0:	4b0b      	ldr	r3, [pc, #44]	@ (80027e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	0e5b      	lsrs	r3, r3, #25
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	3301      	adds	r3, #1
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	e001      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80027d0:	693b      	ldr	r3, [r7, #16]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	371c      	adds	r7, #28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	00f42400 	.word	0x00f42400
 80027e8:	016e3600 	.word	0x016e3600

080027ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f0:	4b03      	ldr	r3, [pc, #12]	@ (8002800 <HAL_RCC_GetHCLKFreq+0x14>)
 80027f2:	681b      	ldr	r3, [r3, #0]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	20000000 	.word	0x20000000

08002804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002808:	f7ff fff0 	bl	80027ec <HAL_RCC_GetHCLKFreq>
 800280c:	4602      	mov	r2, r0
 800280e:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	4904      	ldr	r1, [pc, #16]	@ (800282c <HAL_RCC_GetPCLK1Freq+0x28>)
 800281a:	5ccb      	ldrb	r3, [r1, r3]
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002824:	4618      	mov	r0, r3
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40021000 	.word	0x40021000
 800282c:	08004504 	.word	0x08004504

08002830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002834:	f7ff ffda 	bl	80027ec <HAL_RCC_GetHCLKFreq>
 8002838:	4602      	mov	r2, r0
 800283a:	4b06      	ldr	r3, [pc, #24]	@ (8002854 <HAL_RCC_GetPCLK2Freq+0x24>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	0adb      	lsrs	r3, r3, #11
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	4904      	ldr	r1, [pc, #16]	@ (8002858 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002846:	5ccb      	ldrb	r3, [r1, r3]
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000
 8002858:	08004504 	.word	0x08004504

0800285c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002862:	4b1e      	ldr	r3, [pc, #120]	@ (80028dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800286c:	4b1b      	ldr	r3, [pc, #108]	@ (80028dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	3301      	adds	r3, #1
 8002878:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	2b03      	cmp	r3, #3
 800287e:	d10c      	bne.n	800289a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002880:	4a17      	ldr	r2, [pc, #92]	@ (80028e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	fbb2 f3f3 	udiv	r3, r2, r3
 8002888:	4a14      	ldr	r2, [pc, #80]	@ (80028dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800288a:	68d2      	ldr	r2, [r2, #12]
 800288c:	0a12      	lsrs	r2, r2, #8
 800288e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002892:	fb02 f303 	mul.w	r3, r2, r3
 8002896:	617b      	str	r3, [r7, #20]
    break;
 8002898:	e00c      	b.n	80028b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800289a:	4a12      	ldr	r2, [pc, #72]	@ (80028e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a2:	4a0e      	ldr	r2, [pc, #56]	@ (80028dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028a4:	68d2      	ldr	r2, [r2, #12]
 80028a6:	0a12      	lsrs	r2, r2, #8
 80028a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028ac:	fb02 f303 	mul.w	r3, r2, r3
 80028b0:	617b      	str	r3, [r7, #20]
    break;
 80028b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028b4:	4b09      	ldr	r3, [pc, #36]	@ (80028dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	0e5b      	lsrs	r3, r3, #25
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	3301      	adds	r3, #1
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80028ce:	687b      	ldr	r3, [r7, #4]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	371c      	adds	r7, #28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	40021000 	.word	0x40021000
 80028e0:	016e3600 	.word	0x016e3600
 80028e4:	00f42400 	.word	0x00f42400

080028e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028f0:	2300      	movs	r3, #0
 80028f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028f4:	2300      	movs	r3, #0
 80028f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 8098 	beq.w	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002906:	2300      	movs	r3, #0
 8002908:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800290a:	4b43      	ldr	r3, [pc, #268]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800290c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10d      	bne.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002916:	4b40      	ldr	r3, [pc, #256]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291a:	4a3f      	ldr	r2, [pc, #252]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800291c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002920:	6593      	str	r3, [r2, #88]	@ 0x58
 8002922:	4b3d      	ldr	r3, [pc, #244]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800292e:	2301      	movs	r3, #1
 8002930:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002932:	4b3a      	ldr	r3, [pc, #232]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a39      	ldr	r2, [pc, #228]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800293c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800293e:	f7fe faf3 	bl	8000f28 <HAL_GetTick>
 8002942:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002944:	e009      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002946:	f7fe faef 	bl	8000f28 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d902      	bls.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	74fb      	strb	r3, [r7, #19]
        break;
 8002958:	e005      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800295a:	4b30      	ldr	r3, [pc, #192]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0ef      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002966:	7cfb      	ldrb	r3, [r7, #19]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d159      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800296c:	4b2a      	ldr	r3, [pc, #168]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002972:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002976:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d01e      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	429a      	cmp	r2, r3
 8002986:	d019      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002988:	4b23      	ldr	r3, [pc, #140]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800298a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800298e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002992:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002994:	4b20      	ldr	r3, [pc, #128]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299a:	4a1f      	ldr	r2, [pc, #124]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800299c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029b4:	4a18      	ldr	r2, [pc, #96]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d016      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c6:	f7fe faaf 	bl	8000f28 <HAL_GetTick>
 80029ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029cc:	e00b      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ce:	f7fe faab 	bl	8000f28 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029dc:	4293      	cmp	r3, r2
 80029de:	d902      	bls.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	74fb      	strb	r3, [r7, #19]
            break;
 80029e4:	e006      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0ec      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80029f4:	7cfb      	ldrb	r3, [r7, #19]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10b      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029fa:	4b07      	ldr	r3, [pc, #28]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a08:	4903      	ldr	r1, [pc, #12]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002a10:	e008      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a12:	7cfb      	ldrb	r3, [r7, #19]
 8002a14:	74bb      	strb	r3, [r7, #18]
 8002a16:	e005      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a20:	7cfb      	ldrb	r3, [r7, #19]
 8002a22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a24:	7c7b      	ldrb	r3, [r7, #17]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d105      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2a:	4ba7      	ldr	r3, [pc, #668]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2e:	4aa6      	ldr	r2, [pc, #664]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a34:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a42:	4ba1      	ldr	r3, [pc, #644]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a48:	f023 0203 	bic.w	r2, r3, #3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	499d      	ldr	r1, [pc, #628]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a64:	4b98      	ldr	r3, [pc, #608]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6a:	f023 020c 	bic.w	r2, r3, #12
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	4995      	ldr	r1, [pc, #596]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00a      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a86:	4b90      	ldr	r3, [pc, #576]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	498c      	ldr	r1, [pc, #560]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00a      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002aa8:	4b87      	ldr	r3, [pc, #540]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	4984      	ldr	r1, [pc, #528]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002aca:	4b7f      	ldr	r3, [pc, #508]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	497b      	ldr	r1, [pc, #492]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002aec:	4b76      	ldr	r3, [pc, #472]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	4973      	ldr	r1, [pc, #460]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b0e:	4b6e      	ldr	r3, [pc, #440]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b14:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	496a      	ldr	r1, [pc, #424]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b30:	4b65      	ldr	r3, [pc, #404]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b36:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	4962      	ldr	r1, [pc, #392]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b52:	4b5d      	ldr	r3, [pc, #372]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b60:	4959      	ldr	r1, [pc, #356]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b74:	4b54      	ldr	r3, [pc, #336]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b7a:	f023 0203 	bic.w	r2, r3, #3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b82:	4951      	ldr	r1, [pc, #324]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b96:	4b4c      	ldr	r3, [pc, #304]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba4:	4948      	ldr	r1, [pc, #288]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d015      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bb8:	4b43      	ldr	r3, [pc, #268]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	4940      	ldr	r1, [pc, #256]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bd6:	d105      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4a3a      	ldr	r2, [pc, #232]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002be2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d015      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bf0:	4b35      	ldr	r3, [pc, #212]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bfe:	4932      	ldr	r1, [pc, #200]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c0e:	d105      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c10:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4a2c      	ldr	r2, [pc, #176]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c1a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d015      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c28:	4b27      	ldr	r3, [pc, #156]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c2e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c36:	4924      	ldr	r1, [pc, #144]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c46:	d105      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c48:	4b1f      	ldr	r3, [pc, #124]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c52:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d015      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c60:	4b19      	ldr	r3, [pc, #100]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c6e:	4916      	ldr	r1, [pc, #88]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c7e:	d105      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c80:	4b11      	ldr	r3, [pc, #68]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4a10      	ldr	r2, [pc, #64]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c8a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d019      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c98:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	4908      	ldr	r1, [pc, #32]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cb6:	d109      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cb8:	4b03      	ldr	r3, [pc, #12]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	4a02      	ldr	r2, [pc, #8]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cc2:	60d3      	str	r3, [r2, #12]
 8002cc4:	e002      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d015      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002cd8:	4b29      	ldr	r3, [pc, #164]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cde:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce6:	4926      	ldr	r1, [pc, #152]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cf6:	d105      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002cf8:	4b21      	ldr	r3, [pc, #132]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4a20      	ldr	r2, [pc, #128]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d02:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d015      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002d10:	4b1b      	ldr	r3, [pc, #108]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d16:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d1e:	4918      	ldr	r1, [pc, #96]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d2e:	d105      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d30:	4b13      	ldr	r3, [pc, #76]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4a12      	ldr	r2, [pc, #72]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d3a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d015      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002d48:	4b0d      	ldr	r3, [pc, #52]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d56:	490a      	ldr	r1, [pc, #40]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d66:	d105      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d68:	4b05      	ldr	r3, [pc, #20]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4a04      	ldr	r2, [pc, #16]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d72:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002d74:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000

08002d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e042      	b.n	8002e1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d106      	bne.n	8002dae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7fd fe91 	bl	8000ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2224      	movs	r2, #36	@ 0x24
 8002db2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0201 	bic.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fbb2 	bl	8003538 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f8b3 	bl	8002f40 <UART_SetConfig>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e01b      	b.n	8002e1c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002df2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fc31 	bl	800367c <UART_CheckIdleState>
 8002e1a:	4603      	mov	r3, r0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08a      	sub	sp, #40	@ 0x28
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	4613      	mov	r3, r2
 8002e32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	d17b      	bne.n	8002f36 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <HAL_UART_Transmit+0x26>
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e074      	b.n	8002f38 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2221      	movs	r2, #33	@ 0x21
 8002e5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e5e:	f7fe f863 	bl	8000f28 <HAL_GetTick>
 8002e62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	88fa      	ldrh	r2, [r7, #6]
 8002e68:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	88fa      	ldrh	r2, [r7, #6]
 8002e70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e7c:	d108      	bne.n	8002e90 <HAL_UART_Transmit+0x6c>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d104      	bne.n	8002e90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	61bb      	str	r3, [r7, #24]
 8002e8e:	e003      	b.n	8002e98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e98:	e030      	b.n	8002efc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2180      	movs	r1, #128	@ 0x80
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 fc93 	bl	80037d0 <UART_WaitOnFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e03d      	b.n	8002f38 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10b      	bne.n	8002eda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ed0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	3302      	adds	r3, #2
 8002ed6:	61bb      	str	r3, [r7, #24]
 8002ed8:	e007      	b.n	8002eea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	781a      	ldrb	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1c8      	bne.n	8002e9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2140      	movs	r1, #64	@ 0x40
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 fc5c 	bl	80037d0 <UART_WaitOnFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d005      	beq.n	8002f2a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e006      	b.n	8002f38 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	e000      	b.n	8002f38 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002f36:	2302      	movs	r3, #2
  }
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3720      	adds	r7, #32
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f44:	b08c      	sub	sp, #48	@ 0x30
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	4baa      	ldr	r3, [pc, #680]	@ (8003218 <UART_SetConfig+0x2d8>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	6812      	ldr	r2, [r2, #0]
 8002f76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a9f      	ldr	r2, [pc, #636]	@ (800321c <UART_SetConfig+0x2dc>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d004      	beq.n	8002fac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002fb6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fca:	f023 010f 	bic.w	r1, r3, #15
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a90      	ldr	r2, [pc, #576]	@ (8003220 <UART_SetConfig+0x2e0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d125      	bne.n	8003030 <UART_SetConfig+0xf0>
 8002fe4:	4b8f      	ldr	r3, [pc, #572]	@ (8003224 <UART_SetConfig+0x2e4>)
 8002fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d81a      	bhi.n	8003028 <UART_SetConfig+0xe8>
 8002ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ff8 <UART_SetConfig+0xb8>)
 8002ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff8:	08003009 	.word	0x08003009
 8002ffc:	08003019 	.word	0x08003019
 8003000:	08003011 	.word	0x08003011
 8003004:	08003021 	.word	0x08003021
 8003008:	2301      	movs	r3, #1
 800300a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800300e:	e116      	b.n	800323e <UART_SetConfig+0x2fe>
 8003010:	2302      	movs	r3, #2
 8003012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003016:	e112      	b.n	800323e <UART_SetConfig+0x2fe>
 8003018:	2304      	movs	r3, #4
 800301a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800301e:	e10e      	b.n	800323e <UART_SetConfig+0x2fe>
 8003020:	2308      	movs	r3, #8
 8003022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003026:	e10a      	b.n	800323e <UART_SetConfig+0x2fe>
 8003028:	2310      	movs	r3, #16
 800302a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800302e:	e106      	b.n	800323e <UART_SetConfig+0x2fe>
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a7c      	ldr	r2, [pc, #496]	@ (8003228 <UART_SetConfig+0x2e8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d138      	bne.n	80030ac <UART_SetConfig+0x16c>
 800303a:	4b7a      	ldr	r3, [pc, #488]	@ (8003224 <UART_SetConfig+0x2e4>)
 800303c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003040:	f003 030c 	and.w	r3, r3, #12
 8003044:	2b0c      	cmp	r3, #12
 8003046:	d82d      	bhi.n	80030a4 <UART_SetConfig+0x164>
 8003048:	a201      	add	r2, pc, #4	@ (adr r2, 8003050 <UART_SetConfig+0x110>)
 800304a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304e:	bf00      	nop
 8003050:	08003085 	.word	0x08003085
 8003054:	080030a5 	.word	0x080030a5
 8003058:	080030a5 	.word	0x080030a5
 800305c:	080030a5 	.word	0x080030a5
 8003060:	08003095 	.word	0x08003095
 8003064:	080030a5 	.word	0x080030a5
 8003068:	080030a5 	.word	0x080030a5
 800306c:	080030a5 	.word	0x080030a5
 8003070:	0800308d 	.word	0x0800308d
 8003074:	080030a5 	.word	0x080030a5
 8003078:	080030a5 	.word	0x080030a5
 800307c:	080030a5 	.word	0x080030a5
 8003080:	0800309d 	.word	0x0800309d
 8003084:	2300      	movs	r3, #0
 8003086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800308a:	e0d8      	b.n	800323e <UART_SetConfig+0x2fe>
 800308c:	2302      	movs	r3, #2
 800308e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003092:	e0d4      	b.n	800323e <UART_SetConfig+0x2fe>
 8003094:	2304      	movs	r3, #4
 8003096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800309a:	e0d0      	b.n	800323e <UART_SetConfig+0x2fe>
 800309c:	2308      	movs	r3, #8
 800309e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030a2:	e0cc      	b.n	800323e <UART_SetConfig+0x2fe>
 80030a4:	2310      	movs	r3, #16
 80030a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030aa:	e0c8      	b.n	800323e <UART_SetConfig+0x2fe>
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a5e      	ldr	r2, [pc, #376]	@ (800322c <UART_SetConfig+0x2ec>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d125      	bne.n	8003102 <UART_SetConfig+0x1c2>
 80030b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003224 <UART_SetConfig+0x2e4>)
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80030c0:	2b30      	cmp	r3, #48	@ 0x30
 80030c2:	d016      	beq.n	80030f2 <UART_SetConfig+0x1b2>
 80030c4:	2b30      	cmp	r3, #48	@ 0x30
 80030c6:	d818      	bhi.n	80030fa <UART_SetConfig+0x1ba>
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d00a      	beq.n	80030e2 <UART_SetConfig+0x1a2>
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d814      	bhi.n	80030fa <UART_SetConfig+0x1ba>
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <UART_SetConfig+0x19a>
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d008      	beq.n	80030ea <UART_SetConfig+0x1aa>
 80030d8:	e00f      	b.n	80030fa <UART_SetConfig+0x1ba>
 80030da:	2300      	movs	r3, #0
 80030dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030e0:	e0ad      	b.n	800323e <UART_SetConfig+0x2fe>
 80030e2:	2302      	movs	r3, #2
 80030e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030e8:	e0a9      	b.n	800323e <UART_SetConfig+0x2fe>
 80030ea:	2304      	movs	r3, #4
 80030ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030f0:	e0a5      	b.n	800323e <UART_SetConfig+0x2fe>
 80030f2:	2308      	movs	r3, #8
 80030f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030f8:	e0a1      	b.n	800323e <UART_SetConfig+0x2fe>
 80030fa:	2310      	movs	r3, #16
 80030fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003100:	e09d      	b.n	800323e <UART_SetConfig+0x2fe>
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a4a      	ldr	r2, [pc, #296]	@ (8003230 <UART_SetConfig+0x2f0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d125      	bne.n	8003158 <UART_SetConfig+0x218>
 800310c:	4b45      	ldr	r3, [pc, #276]	@ (8003224 <UART_SetConfig+0x2e4>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003112:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003116:	2bc0      	cmp	r3, #192	@ 0xc0
 8003118:	d016      	beq.n	8003148 <UART_SetConfig+0x208>
 800311a:	2bc0      	cmp	r3, #192	@ 0xc0
 800311c:	d818      	bhi.n	8003150 <UART_SetConfig+0x210>
 800311e:	2b80      	cmp	r3, #128	@ 0x80
 8003120:	d00a      	beq.n	8003138 <UART_SetConfig+0x1f8>
 8003122:	2b80      	cmp	r3, #128	@ 0x80
 8003124:	d814      	bhi.n	8003150 <UART_SetConfig+0x210>
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <UART_SetConfig+0x1f0>
 800312a:	2b40      	cmp	r3, #64	@ 0x40
 800312c:	d008      	beq.n	8003140 <UART_SetConfig+0x200>
 800312e:	e00f      	b.n	8003150 <UART_SetConfig+0x210>
 8003130:	2300      	movs	r3, #0
 8003132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003136:	e082      	b.n	800323e <UART_SetConfig+0x2fe>
 8003138:	2302      	movs	r3, #2
 800313a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800313e:	e07e      	b.n	800323e <UART_SetConfig+0x2fe>
 8003140:	2304      	movs	r3, #4
 8003142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003146:	e07a      	b.n	800323e <UART_SetConfig+0x2fe>
 8003148:	2308      	movs	r3, #8
 800314a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800314e:	e076      	b.n	800323e <UART_SetConfig+0x2fe>
 8003150:	2310      	movs	r3, #16
 8003152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003156:	e072      	b.n	800323e <UART_SetConfig+0x2fe>
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a35      	ldr	r2, [pc, #212]	@ (8003234 <UART_SetConfig+0x2f4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d12a      	bne.n	80031b8 <UART_SetConfig+0x278>
 8003162:	4b30      	ldr	r3, [pc, #192]	@ (8003224 <UART_SetConfig+0x2e4>)
 8003164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003168:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800316c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003170:	d01a      	beq.n	80031a8 <UART_SetConfig+0x268>
 8003172:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003176:	d81b      	bhi.n	80031b0 <UART_SetConfig+0x270>
 8003178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800317c:	d00c      	beq.n	8003198 <UART_SetConfig+0x258>
 800317e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003182:	d815      	bhi.n	80031b0 <UART_SetConfig+0x270>
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <UART_SetConfig+0x250>
 8003188:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800318c:	d008      	beq.n	80031a0 <UART_SetConfig+0x260>
 800318e:	e00f      	b.n	80031b0 <UART_SetConfig+0x270>
 8003190:	2300      	movs	r3, #0
 8003192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003196:	e052      	b.n	800323e <UART_SetConfig+0x2fe>
 8003198:	2302      	movs	r3, #2
 800319a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800319e:	e04e      	b.n	800323e <UART_SetConfig+0x2fe>
 80031a0:	2304      	movs	r3, #4
 80031a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031a6:	e04a      	b.n	800323e <UART_SetConfig+0x2fe>
 80031a8:	2308      	movs	r3, #8
 80031aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ae:	e046      	b.n	800323e <UART_SetConfig+0x2fe>
 80031b0:	2310      	movs	r3, #16
 80031b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031b6:	e042      	b.n	800323e <UART_SetConfig+0x2fe>
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a17      	ldr	r2, [pc, #92]	@ (800321c <UART_SetConfig+0x2dc>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d13a      	bne.n	8003238 <UART_SetConfig+0x2f8>
 80031c2:	4b18      	ldr	r3, [pc, #96]	@ (8003224 <UART_SetConfig+0x2e4>)
 80031c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80031cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031d0:	d01a      	beq.n	8003208 <UART_SetConfig+0x2c8>
 80031d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031d6:	d81b      	bhi.n	8003210 <UART_SetConfig+0x2d0>
 80031d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031dc:	d00c      	beq.n	80031f8 <UART_SetConfig+0x2b8>
 80031de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031e2:	d815      	bhi.n	8003210 <UART_SetConfig+0x2d0>
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <UART_SetConfig+0x2b0>
 80031e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ec:	d008      	beq.n	8003200 <UART_SetConfig+0x2c0>
 80031ee:	e00f      	b.n	8003210 <UART_SetConfig+0x2d0>
 80031f0:	2300      	movs	r3, #0
 80031f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031f6:	e022      	b.n	800323e <UART_SetConfig+0x2fe>
 80031f8:	2302      	movs	r3, #2
 80031fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031fe:	e01e      	b.n	800323e <UART_SetConfig+0x2fe>
 8003200:	2304      	movs	r3, #4
 8003202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003206:	e01a      	b.n	800323e <UART_SetConfig+0x2fe>
 8003208:	2308      	movs	r3, #8
 800320a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800320e:	e016      	b.n	800323e <UART_SetConfig+0x2fe>
 8003210:	2310      	movs	r3, #16
 8003212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003216:	e012      	b.n	800323e <UART_SetConfig+0x2fe>
 8003218:	cfff69f3 	.word	0xcfff69f3
 800321c:	40008000 	.word	0x40008000
 8003220:	40013800 	.word	0x40013800
 8003224:	40021000 	.word	0x40021000
 8003228:	40004400 	.word	0x40004400
 800322c:	40004800 	.word	0x40004800
 8003230:	40004c00 	.word	0x40004c00
 8003234:	40005000 	.word	0x40005000
 8003238:	2310      	movs	r3, #16
 800323a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4aae      	ldr	r2, [pc, #696]	@ (80034fc <UART_SetConfig+0x5bc>)
 8003244:	4293      	cmp	r3, r2
 8003246:	f040 8097 	bne.w	8003378 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800324a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800324e:	2b08      	cmp	r3, #8
 8003250:	d823      	bhi.n	800329a <UART_SetConfig+0x35a>
 8003252:	a201      	add	r2, pc, #4	@ (adr r2, 8003258 <UART_SetConfig+0x318>)
 8003254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003258:	0800327d 	.word	0x0800327d
 800325c:	0800329b 	.word	0x0800329b
 8003260:	08003285 	.word	0x08003285
 8003264:	0800329b 	.word	0x0800329b
 8003268:	0800328b 	.word	0x0800328b
 800326c:	0800329b 	.word	0x0800329b
 8003270:	0800329b 	.word	0x0800329b
 8003274:	0800329b 	.word	0x0800329b
 8003278:	08003293 	.word	0x08003293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800327c:	f7ff fac2 	bl	8002804 <HAL_RCC_GetPCLK1Freq>
 8003280:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003282:	e010      	b.n	80032a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003284:	4b9e      	ldr	r3, [pc, #632]	@ (8003500 <UART_SetConfig+0x5c0>)
 8003286:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003288:	e00d      	b.n	80032a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800328a:	f7ff fa4d 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 800328e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003290:	e009      	b.n	80032a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003296:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003298:	e005      	b.n	80032a6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80032a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 8130 	beq.w	800350e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b2:	4a94      	ldr	r2, [pc, #592]	@ (8003504 <UART_SetConfig+0x5c4>)
 80032b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032b8:	461a      	mov	r2, r3
 80032ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	4413      	add	r3, r2
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d305      	bcc.n	80032de <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d903      	bls.n	80032e6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80032e4:	e113      	b.n	800350e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e8:	2200      	movs	r2, #0
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	60fa      	str	r2, [r7, #12]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f2:	4a84      	ldr	r2, [pc, #528]	@ (8003504 <UART_SetConfig+0x5c4>)
 80032f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	2200      	movs	r2, #0
 80032fc:	603b      	str	r3, [r7, #0]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003304:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003308:	f7fc ffe2 	bl	80002d0 <__aeabi_uldivmod>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4610      	mov	r0, r2
 8003312:	4619      	mov	r1, r3
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	020b      	lsls	r3, r1, #8
 800331e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003322:	0202      	lsls	r2, r0, #8
 8003324:	6979      	ldr	r1, [r7, #20]
 8003326:	6849      	ldr	r1, [r1, #4]
 8003328:	0849      	lsrs	r1, r1, #1
 800332a:	2000      	movs	r0, #0
 800332c:	460c      	mov	r4, r1
 800332e:	4605      	mov	r5, r0
 8003330:	eb12 0804 	adds.w	r8, r2, r4
 8003334:	eb43 0905 	adc.w	r9, r3, r5
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	469a      	mov	sl, r3
 8003340:	4693      	mov	fp, r2
 8003342:	4652      	mov	r2, sl
 8003344:	465b      	mov	r3, fp
 8003346:	4640      	mov	r0, r8
 8003348:	4649      	mov	r1, r9
 800334a:	f7fc ffc1 	bl	80002d0 <__aeabi_uldivmod>
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	4613      	mov	r3, r2
 8003354:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800335c:	d308      	bcc.n	8003370 <UART_SetConfig+0x430>
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003364:	d204      	bcs.n	8003370 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6a3a      	ldr	r2, [r7, #32]
 800336c:	60da      	str	r2, [r3, #12]
 800336e:	e0ce      	b.n	800350e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003376:	e0ca      	b.n	800350e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003380:	d166      	bne.n	8003450 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003382:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003386:	2b08      	cmp	r3, #8
 8003388:	d827      	bhi.n	80033da <UART_SetConfig+0x49a>
 800338a:	a201      	add	r2, pc, #4	@ (adr r2, 8003390 <UART_SetConfig+0x450>)
 800338c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003390:	080033b5 	.word	0x080033b5
 8003394:	080033bd 	.word	0x080033bd
 8003398:	080033c5 	.word	0x080033c5
 800339c:	080033db 	.word	0x080033db
 80033a0:	080033cb 	.word	0x080033cb
 80033a4:	080033db 	.word	0x080033db
 80033a8:	080033db 	.word	0x080033db
 80033ac:	080033db 	.word	0x080033db
 80033b0:	080033d3 	.word	0x080033d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b4:	f7ff fa26 	bl	8002804 <HAL_RCC_GetPCLK1Freq>
 80033b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033ba:	e014      	b.n	80033e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033bc:	f7ff fa38 	bl	8002830 <HAL_RCC_GetPCLK2Freq>
 80033c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033c2:	e010      	b.n	80033e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033c4:	4b4e      	ldr	r3, [pc, #312]	@ (8003500 <UART_SetConfig+0x5c0>)
 80033c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033c8:	e00d      	b.n	80033e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ca:	f7ff f9ad 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 80033ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033d0:	e009      	b.n	80033e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033d8:	e005      	b.n	80033e6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80033e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 8090 	beq.w	800350e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f2:	4a44      	ldr	r2, [pc, #272]	@ (8003504 <UART_SetConfig+0x5c4>)
 80033f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033f8:	461a      	mov	r2, r3
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003400:	005a      	lsls	r2, r3, #1
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	085b      	lsrs	r3, r3, #1
 8003408:	441a      	add	r2, r3
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003412:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	2b0f      	cmp	r3, #15
 8003418:	d916      	bls.n	8003448 <UART_SetConfig+0x508>
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003420:	d212      	bcs.n	8003448 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	b29b      	uxth	r3, r3
 8003426:	f023 030f 	bic.w	r3, r3, #15
 800342a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	085b      	lsrs	r3, r3, #1
 8003430:	b29b      	uxth	r3, r3
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	b29a      	uxth	r2, r3
 8003438:	8bfb      	ldrh	r3, [r7, #30]
 800343a:	4313      	orrs	r3, r2
 800343c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	8bfa      	ldrh	r2, [r7, #30]
 8003444:	60da      	str	r2, [r3, #12]
 8003446:	e062      	b.n	800350e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800344e:	e05e      	b.n	800350e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003450:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003454:	2b08      	cmp	r3, #8
 8003456:	d828      	bhi.n	80034aa <UART_SetConfig+0x56a>
 8003458:	a201      	add	r2, pc, #4	@ (adr r2, 8003460 <UART_SetConfig+0x520>)
 800345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345e:	bf00      	nop
 8003460:	08003485 	.word	0x08003485
 8003464:	0800348d 	.word	0x0800348d
 8003468:	08003495 	.word	0x08003495
 800346c:	080034ab 	.word	0x080034ab
 8003470:	0800349b 	.word	0x0800349b
 8003474:	080034ab 	.word	0x080034ab
 8003478:	080034ab 	.word	0x080034ab
 800347c:	080034ab 	.word	0x080034ab
 8003480:	080034a3 	.word	0x080034a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003484:	f7ff f9be 	bl	8002804 <HAL_RCC_GetPCLK1Freq>
 8003488:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800348a:	e014      	b.n	80034b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800348c:	f7ff f9d0 	bl	8002830 <HAL_RCC_GetPCLK2Freq>
 8003490:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003492:	e010      	b.n	80034b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003494:	4b1a      	ldr	r3, [pc, #104]	@ (8003500 <UART_SetConfig+0x5c0>)
 8003496:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003498:	e00d      	b.n	80034b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800349a:	f7ff f945 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 800349e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034a0:	e009      	b.n	80034b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034a8:	e005      	b.n	80034b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80034b4:	bf00      	nop
    }

    if (pclk != 0U)
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d028      	beq.n	800350e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	4a10      	ldr	r2, [pc, #64]	@ (8003504 <UART_SetConfig+0x5c4>)
 80034c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034c6:	461a      	mov	r2, r3
 80034c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	085b      	lsrs	r3, r3, #1
 80034d4:	441a      	add	r2, r3
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	fbb2 f3f3 	udiv	r3, r2, r3
 80034de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	2b0f      	cmp	r3, #15
 80034e4:	d910      	bls.n	8003508 <UART_SetConfig+0x5c8>
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034ec:	d20c      	bcs.n	8003508 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60da      	str	r2, [r3, #12]
 80034f8:	e009      	b.n	800350e <UART_SetConfig+0x5ce>
 80034fa:	bf00      	nop
 80034fc:	40008000 	.word	0x40008000
 8003500:	00f42400 	.word	0x00f42400
 8003504:	08004520 	.word	0x08004520
      }
      else
      {
        ret = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2201      	movs	r2, #1
 8003512:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2201      	movs	r2, #1
 800351a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2200      	movs	r2, #0
 8003522:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2200      	movs	r2, #0
 8003528:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800352a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800352e:	4618      	mov	r0, r3
 8003530:	3730      	adds	r7, #48	@ 0x30
 8003532:	46bd      	mov	sp, r7
 8003534:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003538 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035cc:	f003 0310 	and.w	r3, r3, #16
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01a      	beq.n	800364e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003632:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003636:	d10a      	bne.n	800364e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	605a      	str	r2, [r3, #4]
  }
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b098      	sub	sp, #96	@ 0x60
 8003680:	af02      	add	r7, sp, #8
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800368c:	f7fd fc4c 	bl	8000f28 <HAL_GetTick>
 8003690:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b08      	cmp	r3, #8
 800369e:	d12f      	bne.n	8003700 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036a8:	2200      	movs	r2, #0
 80036aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f88e 	bl	80037d0 <UART_WaitOnFlagUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d022      	beq.n	8003700 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c2:	e853 3f00 	ldrex	r3, [r3]
 80036c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80036da:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036e0:	e841 2300 	strex	r3, r2, [r1]
 80036e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1e6      	bne.n	80036ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e063      	b.n	80037c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b04      	cmp	r3, #4
 800370c:	d149      	bne.n	80037a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800370e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003716:	2200      	movs	r2, #0
 8003718:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f857 	bl	80037d0 <UART_WaitOnFlagUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d03c      	beq.n	80037a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	e853 3f00 	ldrex	r3, [r3]
 8003734:	623b      	str	r3, [r7, #32]
   return(result);
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800373c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003746:	633b      	str	r3, [r7, #48]	@ 0x30
 8003748:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800374c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e6      	bne.n	8003728 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3308      	adds	r3, #8
 8003760:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	e853 3f00 	ldrex	r3, [r3]
 8003768:	60fb      	str	r3, [r7, #12]
   return(result);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f023 0301 	bic.w	r3, r3, #1
 8003770:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	3308      	adds	r3, #8
 8003778:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800377a:	61fa      	str	r2, [r7, #28]
 800377c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377e:	69b9      	ldr	r1, [r7, #24]
 8003780:	69fa      	ldr	r2, [r7, #28]
 8003782:	e841 2300 	strex	r3, r2, [r1]
 8003786:	617b      	str	r3, [r7, #20]
   return(result);
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1e5      	bne.n	800375a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e012      	b.n	80037c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3758      	adds	r7, #88	@ 0x58
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	4613      	mov	r3, r2
 80037de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e0:	e04f      	b.n	8003882 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e8:	d04b      	beq.n	8003882 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ea:	f7fd fb9d 	bl	8000f28 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d302      	bcc.n	8003800 <UART_WaitOnFlagUntilTimeout+0x30>
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e04e      	b.n	80038a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	2b00      	cmp	r3, #0
 8003810:	d037      	beq.n	8003882 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b80      	cmp	r3, #128	@ 0x80
 8003816:	d034      	beq.n	8003882 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b40      	cmp	r3, #64	@ 0x40
 800381c:	d031      	beq.n	8003882 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b08      	cmp	r3, #8
 800382a:	d110      	bne.n	800384e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2208      	movs	r2, #8
 8003832:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 f838 	bl	80038aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2208      	movs	r2, #8
 800383e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e029      	b.n	80038a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003858:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800385c:	d111      	bne.n	8003882 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f81e 	bl	80038aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2220      	movs	r2, #32
 8003872:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e00f      	b.n	80038a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69da      	ldr	r2, [r3, #28]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4013      	ands	r3, r2
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	429a      	cmp	r2, r3
 8003890:	bf0c      	ite	eq
 8003892:	2301      	moveq	r3, #1
 8003894:	2300      	movne	r3, #0
 8003896:	b2db      	uxtb	r3, r3
 8003898:	461a      	mov	r2, r3
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	429a      	cmp	r2, r3
 800389e:	d0a0      	beq.n	80037e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b095      	sub	sp, #84	@ 0x54
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ba:	e853 3f00 	ldrex	r3, [r3]
 80038be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80038d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038d8:	e841 2300 	strex	r3, r2, [r1]
 80038dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1e6      	bne.n	80038b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3308      	adds	r3, #8
 80038ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	e853 3f00 	ldrex	r3, [r3]
 80038f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038fa:	f023 0301 	bic.w	r3, r3, #1
 80038fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3308      	adds	r3, #8
 8003906:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003908:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800390a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800390e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003910:	e841 2300 	strex	r3, r2, [r1]
 8003914:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e3      	bne.n	80038e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003920:	2b01      	cmp	r3, #1
 8003922:	d118      	bne.n	8003956 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	e853 3f00 	ldrex	r3, [r3]
 8003930:	60bb      	str	r3, [r7, #8]
   return(result);
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f023 0310 	bic.w	r3, r3, #16
 8003938:	647b      	str	r3, [r7, #68]	@ 0x44
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003942:	61bb      	str	r3, [r7, #24]
 8003944:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003946:	6979      	ldr	r1, [r7, #20]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	e841 2300 	strex	r3, r2, [r1]
 800394e:	613b      	str	r3, [r7, #16]
   return(result);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1e6      	bne.n	8003924 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2220      	movs	r2, #32
 800395a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800396a:	bf00      	nop
 800396c:	3754      	adds	r7, #84	@ 0x54
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003976:	b480      	push	{r7}
 8003978:	b085      	sub	sp, #20
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <HAL_UARTEx_DisableFifoMode+0x16>
 8003988:	2302      	movs	r3, #2
 800398a:	e027      	b.n	80039dc <HAL_UARTEx_DisableFifoMode+0x66>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2224      	movs	r2, #36	@ 0x24
 8003998:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0201 	bic.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80039ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e02d      	b.n	8003a5c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2224      	movs	r2, #36	@ 0x24
 8003a0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0201 	bic.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f84f 	bl	8003ae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e02d      	b.n	8003ad8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2224      	movs	r2, #36	@ 0x24
 8003a88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0201 	bic.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f811 	bl	8003ae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d108      	bne.n	8003b02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b00:	e031      	b.n	8003b66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003b02:	2308      	movs	r3, #8
 8003b04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003b06:	2308      	movs	r3, #8
 8003b08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	0e5b      	lsrs	r3, r3, #25
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	0f5b      	lsrs	r3, r3, #29
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b2a:	7bbb      	ldrb	r3, [r7, #14]
 8003b2c:	7b3a      	ldrb	r2, [r7, #12]
 8003b2e:	4911      	ldr	r1, [pc, #68]	@ (8003b74 <UARTEx_SetNbDataToProcess+0x94>)
 8003b30:	5c8a      	ldrb	r2, [r1, r2]
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b36:	7b3a      	ldrb	r2, [r7, #12]
 8003b38:	490f      	ldr	r1, [pc, #60]	@ (8003b78 <UARTEx_SetNbDataToProcess+0x98>)
 8003b3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	7b7a      	ldrb	r2, [r7, #13]
 8003b4c:	4909      	ldr	r1, [pc, #36]	@ (8003b74 <UARTEx_SetNbDataToProcess+0x94>)
 8003b4e:	5c8a      	ldrb	r2, [r1, r2]
 8003b50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b54:	7b7a      	ldrb	r2, [r7, #13]
 8003b56:	4908      	ldr	r1, [pc, #32]	@ (8003b78 <UARTEx_SetNbDataToProcess+0x98>)
 8003b58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003b66:	bf00      	nop
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	08004538 	.word	0x08004538
 8003b78:	08004540 	.word	0x08004540

08003b7c <siprintf>:
 8003b7c:	b40e      	push	{r1, r2, r3}
 8003b7e:	b510      	push	{r4, lr}
 8003b80:	b09d      	sub	sp, #116	@ 0x74
 8003b82:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003b84:	9002      	str	r0, [sp, #8]
 8003b86:	9006      	str	r0, [sp, #24]
 8003b88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003b8c:	480a      	ldr	r0, [pc, #40]	@ (8003bb8 <siprintf+0x3c>)
 8003b8e:	9107      	str	r1, [sp, #28]
 8003b90:	9104      	str	r1, [sp, #16]
 8003b92:	490a      	ldr	r1, [pc, #40]	@ (8003bbc <siprintf+0x40>)
 8003b94:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b98:	9105      	str	r1, [sp, #20]
 8003b9a:	2400      	movs	r4, #0
 8003b9c:	a902      	add	r1, sp, #8
 8003b9e:	6800      	ldr	r0, [r0, #0]
 8003ba0:	9301      	str	r3, [sp, #4]
 8003ba2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003ba4:	f000 f994 	bl	8003ed0 <_svfiprintf_r>
 8003ba8:	9b02      	ldr	r3, [sp, #8]
 8003baa:	701c      	strb	r4, [r3, #0]
 8003bac:	b01d      	add	sp, #116	@ 0x74
 8003bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bb2:	b003      	add	sp, #12
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	2000001c 	.word	0x2000001c
 8003bbc:	ffff0208 	.word	0xffff0208

08003bc0 <memset>:
 8003bc0:	4402      	add	r2, r0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d100      	bne.n	8003bca <memset+0xa>
 8003bc8:	4770      	bx	lr
 8003bca:	f803 1b01 	strb.w	r1, [r3], #1
 8003bce:	e7f9      	b.n	8003bc4 <memset+0x4>

08003bd0 <__errno>:
 8003bd0:	4b01      	ldr	r3, [pc, #4]	@ (8003bd8 <__errno+0x8>)
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	2000001c 	.word	0x2000001c

08003bdc <__libc_init_array>:
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	4d0d      	ldr	r5, [pc, #52]	@ (8003c14 <__libc_init_array+0x38>)
 8003be0:	4c0d      	ldr	r4, [pc, #52]	@ (8003c18 <__libc_init_array+0x3c>)
 8003be2:	1b64      	subs	r4, r4, r5
 8003be4:	10a4      	asrs	r4, r4, #2
 8003be6:	2600      	movs	r6, #0
 8003be8:	42a6      	cmp	r6, r4
 8003bea:	d109      	bne.n	8003c00 <__libc_init_array+0x24>
 8003bec:	4d0b      	ldr	r5, [pc, #44]	@ (8003c1c <__libc_init_array+0x40>)
 8003bee:	4c0c      	ldr	r4, [pc, #48]	@ (8003c20 <__libc_init_array+0x44>)
 8003bf0:	f000 fc64 	bl	80044bc <_init>
 8003bf4:	1b64      	subs	r4, r4, r5
 8003bf6:	10a4      	asrs	r4, r4, #2
 8003bf8:	2600      	movs	r6, #0
 8003bfa:	42a6      	cmp	r6, r4
 8003bfc:	d105      	bne.n	8003c0a <__libc_init_array+0x2e>
 8003bfe:	bd70      	pop	{r4, r5, r6, pc}
 8003c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c04:	4798      	blx	r3
 8003c06:	3601      	adds	r6, #1
 8003c08:	e7ee      	b.n	8003be8 <__libc_init_array+0xc>
 8003c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c0e:	4798      	blx	r3
 8003c10:	3601      	adds	r6, #1
 8003c12:	e7f2      	b.n	8003bfa <__libc_init_array+0x1e>
 8003c14:	08004584 	.word	0x08004584
 8003c18:	08004584 	.word	0x08004584
 8003c1c:	08004584 	.word	0x08004584
 8003c20:	08004588 	.word	0x08004588

08003c24 <__retarget_lock_acquire_recursive>:
 8003c24:	4770      	bx	lr

08003c26 <__retarget_lock_release_recursive>:
 8003c26:	4770      	bx	lr

08003c28 <_free_r>:
 8003c28:	b538      	push	{r3, r4, r5, lr}
 8003c2a:	4605      	mov	r5, r0
 8003c2c:	2900      	cmp	r1, #0
 8003c2e:	d041      	beq.n	8003cb4 <_free_r+0x8c>
 8003c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c34:	1f0c      	subs	r4, r1, #4
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	bfb8      	it	lt
 8003c3a:	18e4      	addlt	r4, r4, r3
 8003c3c:	f000 f8e0 	bl	8003e00 <__malloc_lock>
 8003c40:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb8 <_free_r+0x90>)
 8003c42:	6813      	ldr	r3, [r2, #0]
 8003c44:	b933      	cbnz	r3, 8003c54 <_free_r+0x2c>
 8003c46:	6063      	str	r3, [r4, #4]
 8003c48:	6014      	str	r4, [r2, #0]
 8003c4a:	4628      	mov	r0, r5
 8003c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c50:	f000 b8dc 	b.w	8003e0c <__malloc_unlock>
 8003c54:	42a3      	cmp	r3, r4
 8003c56:	d908      	bls.n	8003c6a <_free_r+0x42>
 8003c58:	6820      	ldr	r0, [r4, #0]
 8003c5a:	1821      	adds	r1, r4, r0
 8003c5c:	428b      	cmp	r3, r1
 8003c5e:	bf01      	itttt	eq
 8003c60:	6819      	ldreq	r1, [r3, #0]
 8003c62:	685b      	ldreq	r3, [r3, #4]
 8003c64:	1809      	addeq	r1, r1, r0
 8003c66:	6021      	streq	r1, [r4, #0]
 8003c68:	e7ed      	b.n	8003c46 <_free_r+0x1e>
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	b10b      	cbz	r3, 8003c74 <_free_r+0x4c>
 8003c70:	42a3      	cmp	r3, r4
 8003c72:	d9fa      	bls.n	8003c6a <_free_r+0x42>
 8003c74:	6811      	ldr	r1, [r2, #0]
 8003c76:	1850      	adds	r0, r2, r1
 8003c78:	42a0      	cmp	r0, r4
 8003c7a:	d10b      	bne.n	8003c94 <_free_r+0x6c>
 8003c7c:	6820      	ldr	r0, [r4, #0]
 8003c7e:	4401      	add	r1, r0
 8003c80:	1850      	adds	r0, r2, r1
 8003c82:	4283      	cmp	r3, r0
 8003c84:	6011      	str	r1, [r2, #0]
 8003c86:	d1e0      	bne.n	8003c4a <_free_r+0x22>
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	6053      	str	r3, [r2, #4]
 8003c8e:	4408      	add	r0, r1
 8003c90:	6010      	str	r0, [r2, #0]
 8003c92:	e7da      	b.n	8003c4a <_free_r+0x22>
 8003c94:	d902      	bls.n	8003c9c <_free_r+0x74>
 8003c96:	230c      	movs	r3, #12
 8003c98:	602b      	str	r3, [r5, #0]
 8003c9a:	e7d6      	b.n	8003c4a <_free_r+0x22>
 8003c9c:	6820      	ldr	r0, [r4, #0]
 8003c9e:	1821      	adds	r1, r4, r0
 8003ca0:	428b      	cmp	r3, r1
 8003ca2:	bf04      	itt	eq
 8003ca4:	6819      	ldreq	r1, [r3, #0]
 8003ca6:	685b      	ldreq	r3, [r3, #4]
 8003ca8:	6063      	str	r3, [r4, #4]
 8003caa:	bf04      	itt	eq
 8003cac:	1809      	addeq	r1, r1, r0
 8003cae:	6021      	streq	r1, [r4, #0]
 8003cb0:	6054      	str	r4, [r2, #4]
 8003cb2:	e7ca      	b.n	8003c4a <_free_r+0x22>
 8003cb4:	bd38      	pop	{r3, r4, r5, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000320 	.word	0x20000320

08003cbc <sbrk_aligned>:
 8003cbc:	b570      	push	{r4, r5, r6, lr}
 8003cbe:	4e0f      	ldr	r6, [pc, #60]	@ (8003cfc <sbrk_aligned+0x40>)
 8003cc0:	460c      	mov	r4, r1
 8003cc2:	6831      	ldr	r1, [r6, #0]
 8003cc4:	4605      	mov	r5, r0
 8003cc6:	b911      	cbnz	r1, 8003cce <sbrk_aligned+0x12>
 8003cc8:	f000 fba4 	bl	8004414 <_sbrk_r>
 8003ccc:	6030      	str	r0, [r6, #0]
 8003cce:	4621      	mov	r1, r4
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	f000 fb9f 	bl	8004414 <_sbrk_r>
 8003cd6:	1c43      	adds	r3, r0, #1
 8003cd8:	d103      	bne.n	8003ce2 <sbrk_aligned+0x26>
 8003cda:	f04f 34ff 	mov.w	r4, #4294967295
 8003cde:	4620      	mov	r0, r4
 8003ce0:	bd70      	pop	{r4, r5, r6, pc}
 8003ce2:	1cc4      	adds	r4, r0, #3
 8003ce4:	f024 0403 	bic.w	r4, r4, #3
 8003ce8:	42a0      	cmp	r0, r4
 8003cea:	d0f8      	beq.n	8003cde <sbrk_aligned+0x22>
 8003cec:	1a21      	subs	r1, r4, r0
 8003cee:	4628      	mov	r0, r5
 8003cf0:	f000 fb90 	bl	8004414 <_sbrk_r>
 8003cf4:	3001      	adds	r0, #1
 8003cf6:	d1f2      	bne.n	8003cde <sbrk_aligned+0x22>
 8003cf8:	e7ef      	b.n	8003cda <sbrk_aligned+0x1e>
 8003cfa:	bf00      	nop
 8003cfc:	2000031c 	.word	0x2000031c

08003d00 <_malloc_r>:
 8003d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d04:	1ccd      	adds	r5, r1, #3
 8003d06:	f025 0503 	bic.w	r5, r5, #3
 8003d0a:	3508      	adds	r5, #8
 8003d0c:	2d0c      	cmp	r5, #12
 8003d0e:	bf38      	it	cc
 8003d10:	250c      	movcc	r5, #12
 8003d12:	2d00      	cmp	r5, #0
 8003d14:	4606      	mov	r6, r0
 8003d16:	db01      	blt.n	8003d1c <_malloc_r+0x1c>
 8003d18:	42a9      	cmp	r1, r5
 8003d1a:	d904      	bls.n	8003d26 <_malloc_r+0x26>
 8003d1c:	230c      	movs	r3, #12
 8003d1e:	6033      	str	r3, [r6, #0]
 8003d20:	2000      	movs	r0, #0
 8003d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003dfc <_malloc_r+0xfc>
 8003d2a:	f000 f869 	bl	8003e00 <__malloc_lock>
 8003d2e:	f8d8 3000 	ldr.w	r3, [r8]
 8003d32:	461c      	mov	r4, r3
 8003d34:	bb44      	cbnz	r4, 8003d88 <_malloc_r+0x88>
 8003d36:	4629      	mov	r1, r5
 8003d38:	4630      	mov	r0, r6
 8003d3a:	f7ff ffbf 	bl	8003cbc <sbrk_aligned>
 8003d3e:	1c43      	adds	r3, r0, #1
 8003d40:	4604      	mov	r4, r0
 8003d42:	d158      	bne.n	8003df6 <_malloc_r+0xf6>
 8003d44:	f8d8 4000 	ldr.w	r4, [r8]
 8003d48:	4627      	mov	r7, r4
 8003d4a:	2f00      	cmp	r7, #0
 8003d4c:	d143      	bne.n	8003dd6 <_malloc_r+0xd6>
 8003d4e:	2c00      	cmp	r4, #0
 8003d50:	d04b      	beq.n	8003dea <_malloc_r+0xea>
 8003d52:	6823      	ldr	r3, [r4, #0]
 8003d54:	4639      	mov	r1, r7
 8003d56:	4630      	mov	r0, r6
 8003d58:	eb04 0903 	add.w	r9, r4, r3
 8003d5c:	f000 fb5a 	bl	8004414 <_sbrk_r>
 8003d60:	4581      	cmp	r9, r0
 8003d62:	d142      	bne.n	8003dea <_malloc_r+0xea>
 8003d64:	6821      	ldr	r1, [r4, #0]
 8003d66:	1a6d      	subs	r5, r5, r1
 8003d68:	4629      	mov	r1, r5
 8003d6a:	4630      	mov	r0, r6
 8003d6c:	f7ff ffa6 	bl	8003cbc <sbrk_aligned>
 8003d70:	3001      	adds	r0, #1
 8003d72:	d03a      	beq.n	8003dea <_malloc_r+0xea>
 8003d74:	6823      	ldr	r3, [r4, #0]
 8003d76:	442b      	add	r3, r5
 8003d78:	6023      	str	r3, [r4, #0]
 8003d7a:	f8d8 3000 	ldr.w	r3, [r8]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	bb62      	cbnz	r2, 8003ddc <_malloc_r+0xdc>
 8003d82:	f8c8 7000 	str.w	r7, [r8]
 8003d86:	e00f      	b.n	8003da8 <_malloc_r+0xa8>
 8003d88:	6822      	ldr	r2, [r4, #0]
 8003d8a:	1b52      	subs	r2, r2, r5
 8003d8c:	d420      	bmi.n	8003dd0 <_malloc_r+0xd0>
 8003d8e:	2a0b      	cmp	r2, #11
 8003d90:	d917      	bls.n	8003dc2 <_malloc_r+0xc2>
 8003d92:	1961      	adds	r1, r4, r5
 8003d94:	42a3      	cmp	r3, r4
 8003d96:	6025      	str	r5, [r4, #0]
 8003d98:	bf18      	it	ne
 8003d9a:	6059      	strne	r1, [r3, #4]
 8003d9c:	6863      	ldr	r3, [r4, #4]
 8003d9e:	bf08      	it	eq
 8003da0:	f8c8 1000 	streq.w	r1, [r8]
 8003da4:	5162      	str	r2, [r4, r5]
 8003da6:	604b      	str	r3, [r1, #4]
 8003da8:	4630      	mov	r0, r6
 8003daa:	f000 f82f 	bl	8003e0c <__malloc_unlock>
 8003dae:	f104 000b 	add.w	r0, r4, #11
 8003db2:	1d23      	adds	r3, r4, #4
 8003db4:	f020 0007 	bic.w	r0, r0, #7
 8003db8:	1ac2      	subs	r2, r0, r3
 8003dba:	bf1c      	itt	ne
 8003dbc:	1a1b      	subne	r3, r3, r0
 8003dbe:	50a3      	strne	r3, [r4, r2]
 8003dc0:	e7af      	b.n	8003d22 <_malloc_r+0x22>
 8003dc2:	6862      	ldr	r2, [r4, #4]
 8003dc4:	42a3      	cmp	r3, r4
 8003dc6:	bf0c      	ite	eq
 8003dc8:	f8c8 2000 	streq.w	r2, [r8]
 8003dcc:	605a      	strne	r2, [r3, #4]
 8003dce:	e7eb      	b.n	8003da8 <_malloc_r+0xa8>
 8003dd0:	4623      	mov	r3, r4
 8003dd2:	6864      	ldr	r4, [r4, #4]
 8003dd4:	e7ae      	b.n	8003d34 <_malloc_r+0x34>
 8003dd6:	463c      	mov	r4, r7
 8003dd8:	687f      	ldr	r7, [r7, #4]
 8003dda:	e7b6      	b.n	8003d4a <_malloc_r+0x4a>
 8003ddc:	461a      	mov	r2, r3
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	42a3      	cmp	r3, r4
 8003de2:	d1fb      	bne.n	8003ddc <_malloc_r+0xdc>
 8003de4:	2300      	movs	r3, #0
 8003de6:	6053      	str	r3, [r2, #4]
 8003de8:	e7de      	b.n	8003da8 <_malloc_r+0xa8>
 8003dea:	230c      	movs	r3, #12
 8003dec:	6033      	str	r3, [r6, #0]
 8003dee:	4630      	mov	r0, r6
 8003df0:	f000 f80c 	bl	8003e0c <__malloc_unlock>
 8003df4:	e794      	b.n	8003d20 <_malloc_r+0x20>
 8003df6:	6005      	str	r5, [r0, #0]
 8003df8:	e7d6      	b.n	8003da8 <_malloc_r+0xa8>
 8003dfa:	bf00      	nop
 8003dfc:	20000320 	.word	0x20000320

08003e00 <__malloc_lock>:
 8003e00:	4801      	ldr	r0, [pc, #4]	@ (8003e08 <__malloc_lock+0x8>)
 8003e02:	f7ff bf0f 	b.w	8003c24 <__retarget_lock_acquire_recursive>
 8003e06:	bf00      	nop
 8003e08:	20000318 	.word	0x20000318

08003e0c <__malloc_unlock>:
 8003e0c:	4801      	ldr	r0, [pc, #4]	@ (8003e14 <__malloc_unlock+0x8>)
 8003e0e:	f7ff bf0a 	b.w	8003c26 <__retarget_lock_release_recursive>
 8003e12:	bf00      	nop
 8003e14:	20000318 	.word	0x20000318

08003e18 <__ssputs_r>:
 8003e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e1c:	688e      	ldr	r6, [r1, #8]
 8003e1e:	461f      	mov	r7, r3
 8003e20:	42be      	cmp	r6, r7
 8003e22:	680b      	ldr	r3, [r1, #0]
 8003e24:	4682      	mov	sl, r0
 8003e26:	460c      	mov	r4, r1
 8003e28:	4690      	mov	r8, r2
 8003e2a:	d82d      	bhi.n	8003e88 <__ssputs_r+0x70>
 8003e2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003e34:	d026      	beq.n	8003e84 <__ssputs_r+0x6c>
 8003e36:	6965      	ldr	r5, [r4, #20]
 8003e38:	6909      	ldr	r1, [r1, #16]
 8003e3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e3e:	eba3 0901 	sub.w	r9, r3, r1
 8003e42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e46:	1c7b      	adds	r3, r7, #1
 8003e48:	444b      	add	r3, r9
 8003e4a:	106d      	asrs	r5, r5, #1
 8003e4c:	429d      	cmp	r5, r3
 8003e4e:	bf38      	it	cc
 8003e50:	461d      	movcc	r5, r3
 8003e52:	0553      	lsls	r3, r2, #21
 8003e54:	d527      	bpl.n	8003ea6 <__ssputs_r+0x8e>
 8003e56:	4629      	mov	r1, r5
 8003e58:	f7ff ff52 	bl	8003d00 <_malloc_r>
 8003e5c:	4606      	mov	r6, r0
 8003e5e:	b360      	cbz	r0, 8003eba <__ssputs_r+0xa2>
 8003e60:	6921      	ldr	r1, [r4, #16]
 8003e62:	464a      	mov	r2, r9
 8003e64:	f000 fae6 	bl	8004434 <memcpy>
 8003e68:	89a3      	ldrh	r3, [r4, #12]
 8003e6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e72:	81a3      	strh	r3, [r4, #12]
 8003e74:	6126      	str	r6, [r4, #16]
 8003e76:	6165      	str	r5, [r4, #20]
 8003e78:	444e      	add	r6, r9
 8003e7a:	eba5 0509 	sub.w	r5, r5, r9
 8003e7e:	6026      	str	r6, [r4, #0]
 8003e80:	60a5      	str	r5, [r4, #8]
 8003e82:	463e      	mov	r6, r7
 8003e84:	42be      	cmp	r6, r7
 8003e86:	d900      	bls.n	8003e8a <__ssputs_r+0x72>
 8003e88:	463e      	mov	r6, r7
 8003e8a:	6820      	ldr	r0, [r4, #0]
 8003e8c:	4632      	mov	r2, r6
 8003e8e:	4641      	mov	r1, r8
 8003e90:	f000 faa6 	bl	80043e0 <memmove>
 8003e94:	68a3      	ldr	r3, [r4, #8]
 8003e96:	1b9b      	subs	r3, r3, r6
 8003e98:	60a3      	str	r3, [r4, #8]
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	4433      	add	r3, r6
 8003e9e:	6023      	str	r3, [r4, #0]
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea6:	462a      	mov	r2, r5
 8003ea8:	f000 fad2 	bl	8004450 <_realloc_r>
 8003eac:	4606      	mov	r6, r0
 8003eae:	2800      	cmp	r0, #0
 8003eb0:	d1e0      	bne.n	8003e74 <__ssputs_r+0x5c>
 8003eb2:	6921      	ldr	r1, [r4, #16]
 8003eb4:	4650      	mov	r0, sl
 8003eb6:	f7ff feb7 	bl	8003c28 <_free_r>
 8003eba:	230c      	movs	r3, #12
 8003ebc:	f8ca 3000 	str.w	r3, [sl]
 8003ec0:	89a3      	ldrh	r3, [r4, #12]
 8003ec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ec6:	81a3      	strh	r3, [r4, #12]
 8003ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ecc:	e7e9      	b.n	8003ea2 <__ssputs_r+0x8a>
	...

08003ed0 <_svfiprintf_r>:
 8003ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed4:	4698      	mov	r8, r3
 8003ed6:	898b      	ldrh	r3, [r1, #12]
 8003ed8:	061b      	lsls	r3, r3, #24
 8003eda:	b09d      	sub	sp, #116	@ 0x74
 8003edc:	4607      	mov	r7, r0
 8003ede:	460d      	mov	r5, r1
 8003ee0:	4614      	mov	r4, r2
 8003ee2:	d510      	bpl.n	8003f06 <_svfiprintf_r+0x36>
 8003ee4:	690b      	ldr	r3, [r1, #16]
 8003ee6:	b973      	cbnz	r3, 8003f06 <_svfiprintf_r+0x36>
 8003ee8:	2140      	movs	r1, #64	@ 0x40
 8003eea:	f7ff ff09 	bl	8003d00 <_malloc_r>
 8003eee:	6028      	str	r0, [r5, #0]
 8003ef0:	6128      	str	r0, [r5, #16]
 8003ef2:	b930      	cbnz	r0, 8003f02 <_svfiprintf_r+0x32>
 8003ef4:	230c      	movs	r3, #12
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8003efc:	b01d      	add	sp, #116	@ 0x74
 8003efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f02:	2340      	movs	r3, #64	@ 0x40
 8003f04:	616b      	str	r3, [r5, #20]
 8003f06:	2300      	movs	r3, #0
 8003f08:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f0a:	2320      	movs	r3, #32
 8003f0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f10:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f14:	2330      	movs	r3, #48	@ 0x30
 8003f16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80040b4 <_svfiprintf_r+0x1e4>
 8003f1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f1e:	f04f 0901 	mov.w	r9, #1
 8003f22:	4623      	mov	r3, r4
 8003f24:	469a      	mov	sl, r3
 8003f26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f2a:	b10a      	cbz	r2, 8003f30 <_svfiprintf_r+0x60>
 8003f2c:	2a25      	cmp	r2, #37	@ 0x25
 8003f2e:	d1f9      	bne.n	8003f24 <_svfiprintf_r+0x54>
 8003f30:	ebba 0b04 	subs.w	fp, sl, r4
 8003f34:	d00b      	beq.n	8003f4e <_svfiprintf_r+0x7e>
 8003f36:	465b      	mov	r3, fp
 8003f38:	4622      	mov	r2, r4
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	4638      	mov	r0, r7
 8003f3e:	f7ff ff6b 	bl	8003e18 <__ssputs_r>
 8003f42:	3001      	adds	r0, #1
 8003f44:	f000 80a7 	beq.w	8004096 <_svfiprintf_r+0x1c6>
 8003f48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f4a:	445a      	add	r2, fp
 8003f4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f4e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 809f 	beq.w	8004096 <_svfiprintf_r+0x1c6>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f62:	f10a 0a01 	add.w	sl, sl, #1
 8003f66:	9304      	str	r3, [sp, #16]
 8003f68:	9307      	str	r3, [sp, #28]
 8003f6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f70:	4654      	mov	r4, sl
 8003f72:	2205      	movs	r2, #5
 8003f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f78:	484e      	ldr	r0, [pc, #312]	@ (80040b4 <_svfiprintf_r+0x1e4>)
 8003f7a:	f7fc f959 	bl	8000230 <memchr>
 8003f7e:	9a04      	ldr	r2, [sp, #16]
 8003f80:	b9d8      	cbnz	r0, 8003fba <_svfiprintf_r+0xea>
 8003f82:	06d0      	lsls	r0, r2, #27
 8003f84:	bf44      	itt	mi
 8003f86:	2320      	movmi	r3, #32
 8003f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f8c:	0711      	lsls	r1, r2, #28
 8003f8e:	bf44      	itt	mi
 8003f90:	232b      	movmi	r3, #43	@ 0x2b
 8003f92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f96:	f89a 3000 	ldrb.w	r3, [sl]
 8003f9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f9c:	d015      	beq.n	8003fca <_svfiprintf_r+0xfa>
 8003f9e:	9a07      	ldr	r2, [sp, #28]
 8003fa0:	4654      	mov	r4, sl
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	f04f 0c0a 	mov.w	ip, #10
 8003fa8:	4621      	mov	r1, r4
 8003faa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fae:	3b30      	subs	r3, #48	@ 0x30
 8003fb0:	2b09      	cmp	r3, #9
 8003fb2:	d94b      	bls.n	800404c <_svfiprintf_r+0x17c>
 8003fb4:	b1b0      	cbz	r0, 8003fe4 <_svfiprintf_r+0x114>
 8003fb6:	9207      	str	r2, [sp, #28]
 8003fb8:	e014      	b.n	8003fe4 <_svfiprintf_r+0x114>
 8003fba:	eba0 0308 	sub.w	r3, r0, r8
 8003fbe:	fa09 f303 	lsl.w	r3, r9, r3
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	9304      	str	r3, [sp, #16]
 8003fc6:	46a2      	mov	sl, r4
 8003fc8:	e7d2      	b.n	8003f70 <_svfiprintf_r+0xa0>
 8003fca:	9b03      	ldr	r3, [sp, #12]
 8003fcc:	1d19      	adds	r1, r3, #4
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	9103      	str	r1, [sp, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	bfbb      	ittet	lt
 8003fd6:	425b      	neglt	r3, r3
 8003fd8:	f042 0202 	orrlt.w	r2, r2, #2
 8003fdc:	9307      	strge	r3, [sp, #28]
 8003fde:	9307      	strlt	r3, [sp, #28]
 8003fe0:	bfb8      	it	lt
 8003fe2:	9204      	strlt	r2, [sp, #16]
 8003fe4:	7823      	ldrb	r3, [r4, #0]
 8003fe6:	2b2e      	cmp	r3, #46	@ 0x2e
 8003fe8:	d10a      	bne.n	8004000 <_svfiprintf_r+0x130>
 8003fea:	7863      	ldrb	r3, [r4, #1]
 8003fec:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fee:	d132      	bne.n	8004056 <_svfiprintf_r+0x186>
 8003ff0:	9b03      	ldr	r3, [sp, #12]
 8003ff2:	1d1a      	adds	r2, r3, #4
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	9203      	str	r2, [sp, #12]
 8003ff8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ffc:	3402      	adds	r4, #2
 8003ffe:	9305      	str	r3, [sp, #20]
 8004000:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80040c4 <_svfiprintf_r+0x1f4>
 8004004:	7821      	ldrb	r1, [r4, #0]
 8004006:	2203      	movs	r2, #3
 8004008:	4650      	mov	r0, sl
 800400a:	f7fc f911 	bl	8000230 <memchr>
 800400e:	b138      	cbz	r0, 8004020 <_svfiprintf_r+0x150>
 8004010:	9b04      	ldr	r3, [sp, #16]
 8004012:	eba0 000a 	sub.w	r0, r0, sl
 8004016:	2240      	movs	r2, #64	@ 0x40
 8004018:	4082      	lsls	r2, r0
 800401a:	4313      	orrs	r3, r2
 800401c:	3401      	adds	r4, #1
 800401e:	9304      	str	r3, [sp, #16]
 8004020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004024:	4824      	ldr	r0, [pc, #144]	@ (80040b8 <_svfiprintf_r+0x1e8>)
 8004026:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800402a:	2206      	movs	r2, #6
 800402c:	f7fc f900 	bl	8000230 <memchr>
 8004030:	2800      	cmp	r0, #0
 8004032:	d036      	beq.n	80040a2 <_svfiprintf_r+0x1d2>
 8004034:	4b21      	ldr	r3, [pc, #132]	@ (80040bc <_svfiprintf_r+0x1ec>)
 8004036:	bb1b      	cbnz	r3, 8004080 <_svfiprintf_r+0x1b0>
 8004038:	9b03      	ldr	r3, [sp, #12]
 800403a:	3307      	adds	r3, #7
 800403c:	f023 0307 	bic.w	r3, r3, #7
 8004040:	3308      	adds	r3, #8
 8004042:	9303      	str	r3, [sp, #12]
 8004044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004046:	4433      	add	r3, r6
 8004048:	9309      	str	r3, [sp, #36]	@ 0x24
 800404a:	e76a      	b.n	8003f22 <_svfiprintf_r+0x52>
 800404c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004050:	460c      	mov	r4, r1
 8004052:	2001      	movs	r0, #1
 8004054:	e7a8      	b.n	8003fa8 <_svfiprintf_r+0xd8>
 8004056:	2300      	movs	r3, #0
 8004058:	3401      	adds	r4, #1
 800405a:	9305      	str	r3, [sp, #20]
 800405c:	4619      	mov	r1, r3
 800405e:	f04f 0c0a 	mov.w	ip, #10
 8004062:	4620      	mov	r0, r4
 8004064:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004068:	3a30      	subs	r2, #48	@ 0x30
 800406a:	2a09      	cmp	r2, #9
 800406c:	d903      	bls.n	8004076 <_svfiprintf_r+0x1a6>
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0c6      	beq.n	8004000 <_svfiprintf_r+0x130>
 8004072:	9105      	str	r1, [sp, #20]
 8004074:	e7c4      	b.n	8004000 <_svfiprintf_r+0x130>
 8004076:	fb0c 2101 	mla	r1, ip, r1, r2
 800407a:	4604      	mov	r4, r0
 800407c:	2301      	movs	r3, #1
 800407e:	e7f0      	b.n	8004062 <_svfiprintf_r+0x192>
 8004080:	ab03      	add	r3, sp, #12
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	462a      	mov	r2, r5
 8004086:	4b0e      	ldr	r3, [pc, #56]	@ (80040c0 <_svfiprintf_r+0x1f0>)
 8004088:	a904      	add	r1, sp, #16
 800408a:	4638      	mov	r0, r7
 800408c:	f3af 8000 	nop.w
 8004090:	1c42      	adds	r2, r0, #1
 8004092:	4606      	mov	r6, r0
 8004094:	d1d6      	bne.n	8004044 <_svfiprintf_r+0x174>
 8004096:	89ab      	ldrh	r3, [r5, #12]
 8004098:	065b      	lsls	r3, r3, #25
 800409a:	f53f af2d 	bmi.w	8003ef8 <_svfiprintf_r+0x28>
 800409e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80040a0:	e72c      	b.n	8003efc <_svfiprintf_r+0x2c>
 80040a2:	ab03      	add	r3, sp, #12
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	462a      	mov	r2, r5
 80040a8:	4b05      	ldr	r3, [pc, #20]	@ (80040c0 <_svfiprintf_r+0x1f0>)
 80040aa:	a904      	add	r1, sp, #16
 80040ac:	4638      	mov	r0, r7
 80040ae:	f000 f879 	bl	80041a4 <_printf_i>
 80040b2:	e7ed      	b.n	8004090 <_svfiprintf_r+0x1c0>
 80040b4:	08004548 	.word	0x08004548
 80040b8:	08004552 	.word	0x08004552
 80040bc:	00000000 	.word	0x00000000
 80040c0:	08003e19 	.word	0x08003e19
 80040c4:	0800454e 	.word	0x0800454e

080040c8 <_printf_common>:
 80040c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040cc:	4616      	mov	r6, r2
 80040ce:	4698      	mov	r8, r3
 80040d0:	688a      	ldr	r2, [r1, #8]
 80040d2:	690b      	ldr	r3, [r1, #16]
 80040d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80040d8:	4293      	cmp	r3, r2
 80040da:	bfb8      	it	lt
 80040dc:	4613      	movlt	r3, r2
 80040de:	6033      	str	r3, [r6, #0]
 80040e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80040e4:	4607      	mov	r7, r0
 80040e6:	460c      	mov	r4, r1
 80040e8:	b10a      	cbz	r2, 80040ee <_printf_common+0x26>
 80040ea:	3301      	adds	r3, #1
 80040ec:	6033      	str	r3, [r6, #0]
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	0699      	lsls	r1, r3, #26
 80040f2:	bf42      	ittt	mi
 80040f4:	6833      	ldrmi	r3, [r6, #0]
 80040f6:	3302      	addmi	r3, #2
 80040f8:	6033      	strmi	r3, [r6, #0]
 80040fa:	6825      	ldr	r5, [r4, #0]
 80040fc:	f015 0506 	ands.w	r5, r5, #6
 8004100:	d106      	bne.n	8004110 <_printf_common+0x48>
 8004102:	f104 0a19 	add.w	sl, r4, #25
 8004106:	68e3      	ldr	r3, [r4, #12]
 8004108:	6832      	ldr	r2, [r6, #0]
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	42ab      	cmp	r3, r5
 800410e:	dc26      	bgt.n	800415e <_printf_common+0x96>
 8004110:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004114:	6822      	ldr	r2, [r4, #0]
 8004116:	3b00      	subs	r3, #0
 8004118:	bf18      	it	ne
 800411a:	2301      	movne	r3, #1
 800411c:	0692      	lsls	r2, r2, #26
 800411e:	d42b      	bmi.n	8004178 <_printf_common+0xb0>
 8004120:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004124:	4641      	mov	r1, r8
 8004126:	4638      	mov	r0, r7
 8004128:	47c8      	blx	r9
 800412a:	3001      	adds	r0, #1
 800412c:	d01e      	beq.n	800416c <_printf_common+0xa4>
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	6922      	ldr	r2, [r4, #16]
 8004132:	f003 0306 	and.w	r3, r3, #6
 8004136:	2b04      	cmp	r3, #4
 8004138:	bf02      	ittt	eq
 800413a:	68e5      	ldreq	r5, [r4, #12]
 800413c:	6833      	ldreq	r3, [r6, #0]
 800413e:	1aed      	subeq	r5, r5, r3
 8004140:	68a3      	ldr	r3, [r4, #8]
 8004142:	bf0c      	ite	eq
 8004144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004148:	2500      	movne	r5, #0
 800414a:	4293      	cmp	r3, r2
 800414c:	bfc4      	itt	gt
 800414e:	1a9b      	subgt	r3, r3, r2
 8004150:	18ed      	addgt	r5, r5, r3
 8004152:	2600      	movs	r6, #0
 8004154:	341a      	adds	r4, #26
 8004156:	42b5      	cmp	r5, r6
 8004158:	d11a      	bne.n	8004190 <_printf_common+0xc8>
 800415a:	2000      	movs	r0, #0
 800415c:	e008      	b.n	8004170 <_printf_common+0xa8>
 800415e:	2301      	movs	r3, #1
 8004160:	4652      	mov	r2, sl
 8004162:	4641      	mov	r1, r8
 8004164:	4638      	mov	r0, r7
 8004166:	47c8      	blx	r9
 8004168:	3001      	adds	r0, #1
 800416a:	d103      	bne.n	8004174 <_printf_common+0xac>
 800416c:	f04f 30ff 	mov.w	r0, #4294967295
 8004170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004174:	3501      	adds	r5, #1
 8004176:	e7c6      	b.n	8004106 <_printf_common+0x3e>
 8004178:	18e1      	adds	r1, r4, r3
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	2030      	movs	r0, #48	@ 0x30
 800417e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004182:	4422      	add	r2, r4
 8004184:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004188:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800418c:	3302      	adds	r3, #2
 800418e:	e7c7      	b.n	8004120 <_printf_common+0x58>
 8004190:	2301      	movs	r3, #1
 8004192:	4622      	mov	r2, r4
 8004194:	4641      	mov	r1, r8
 8004196:	4638      	mov	r0, r7
 8004198:	47c8      	blx	r9
 800419a:	3001      	adds	r0, #1
 800419c:	d0e6      	beq.n	800416c <_printf_common+0xa4>
 800419e:	3601      	adds	r6, #1
 80041a0:	e7d9      	b.n	8004156 <_printf_common+0x8e>
	...

080041a4 <_printf_i>:
 80041a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041a8:	7e0f      	ldrb	r7, [r1, #24]
 80041aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041ac:	2f78      	cmp	r7, #120	@ 0x78
 80041ae:	4691      	mov	r9, r2
 80041b0:	4680      	mov	r8, r0
 80041b2:	460c      	mov	r4, r1
 80041b4:	469a      	mov	sl, r3
 80041b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041ba:	d807      	bhi.n	80041cc <_printf_i+0x28>
 80041bc:	2f62      	cmp	r7, #98	@ 0x62
 80041be:	d80a      	bhi.n	80041d6 <_printf_i+0x32>
 80041c0:	2f00      	cmp	r7, #0
 80041c2:	f000 80d1 	beq.w	8004368 <_printf_i+0x1c4>
 80041c6:	2f58      	cmp	r7, #88	@ 0x58
 80041c8:	f000 80b8 	beq.w	800433c <_printf_i+0x198>
 80041cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041d4:	e03a      	b.n	800424c <_printf_i+0xa8>
 80041d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80041da:	2b15      	cmp	r3, #21
 80041dc:	d8f6      	bhi.n	80041cc <_printf_i+0x28>
 80041de:	a101      	add	r1, pc, #4	@ (adr r1, 80041e4 <_printf_i+0x40>)
 80041e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041e4:	0800423d 	.word	0x0800423d
 80041e8:	08004251 	.word	0x08004251
 80041ec:	080041cd 	.word	0x080041cd
 80041f0:	080041cd 	.word	0x080041cd
 80041f4:	080041cd 	.word	0x080041cd
 80041f8:	080041cd 	.word	0x080041cd
 80041fc:	08004251 	.word	0x08004251
 8004200:	080041cd 	.word	0x080041cd
 8004204:	080041cd 	.word	0x080041cd
 8004208:	080041cd 	.word	0x080041cd
 800420c:	080041cd 	.word	0x080041cd
 8004210:	0800434f 	.word	0x0800434f
 8004214:	0800427b 	.word	0x0800427b
 8004218:	08004309 	.word	0x08004309
 800421c:	080041cd 	.word	0x080041cd
 8004220:	080041cd 	.word	0x080041cd
 8004224:	08004371 	.word	0x08004371
 8004228:	080041cd 	.word	0x080041cd
 800422c:	0800427b 	.word	0x0800427b
 8004230:	080041cd 	.word	0x080041cd
 8004234:	080041cd 	.word	0x080041cd
 8004238:	08004311 	.word	0x08004311
 800423c:	6833      	ldr	r3, [r6, #0]
 800423e:	1d1a      	adds	r2, r3, #4
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6032      	str	r2, [r6, #0]
 8004244:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004248:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800424c:	2301      	movs	r3, #1
 800424e:	e09c      	b.n	800438a <_printf_i+0x1e6>
 8004250:	6833      	ldr	r3, [r6, #0]
 8004252:	6820      	ldr	r0, [r4, #0]
 8004254:	1d19      	adds	r1, r3, #4
 8004256:	6031      	str	r1, [r6, #0]
 8004258:	0606      	lsls	r6, r0, #24
 800425a:	d501      	bpl.n	8004260 <_printf_i+0xbc>
 800425c:	681d      	ldr	r5, [r3, #0]
 800425e:	e003      	b.n	8004268 <_printf_i+0xc4>
 8004260:	0645      	lsls	r5, r0, #25
 8004262:	d5fb      	bpl.n	800425c <_printf_i+0xb8>
 8004264:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004268:	2d00      	cmp	r5, #0
 800426a:	da03      	bge.n	8004274 <_printf_i+0xd0>
 800426c:	232d      	movs	r3, #45	@ 0x2d
 800426e:	426d      	negs	r5, r5
 8004270:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004274:	4858      	ldr	r0, [pc, #352]	@ (80043d8 <_printf_i+0x234>)
 8004276:	230a      	movs	r3, #10
 8004278:	e011      	b.n	800429e <_printf_i+0xfa>
 800427a:	6821      	ldr	r1, [r4, #0]
 800427c:	6833      	ldr	r3, [r6, #0]
 800427e:	0608      	lsls	r0, r1, #24
 8004280:	f853 5b04 	ldr.w	r5, [r3], #4
 8004284:	d402      	bmi.n	800428c <_printf_i+0xe8>
 8004286:	0649      	lsls	r1, r1, #25
 8004288:	bf48      	it	mi
 800428a:	b2ad      	uxthmi	r5, r5
 800428c:	2f6f      	cmp	r7, #111	@ 0x6f
 800428e:	4852      	ldr	r0, [pc, #328]	@ (80043d8 <_printf_i+0x234>)
 8004290:	6033      	str	r3, [r6, #0]
 8004292:	bf14      	ite	ne
 8004294:	230a      	movne	r3, #10
 8004296:	2308      	moveq	r3, #8
 8004298:	2100      	movs	r1, #0
 800429a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800429e:	6866      	ldr	r6, [r4, #4]
 80042a0:	60a6      	str	r6, [r4, #8]
 80042a2:	2e00      	cmp	r6, #0
 80042a4:	db05      	blt.n	80042b2 <_printf_i+0x10e>
 80042a6:	6821      	ldr	r1, [r4, #0]
 80042a8:	432e      	orrs	r6, r5
 80042aa:	f021 0104 	bic.w	r1, r1, #4
 80042ae:	6021      	str	r1, [r4, #0]
 80042b0:	d04b      	beq.n	800434a <_printf_i+0x1a6>
 80042b2:	4616      	mov	r6, r2
 80042b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80042b8:	fb03 5711 	mls	r7, r3, r1, r5
 80042bc:	5dc7      	ldrb	r7, [r0, r7]
 80042be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042c2:	462f      	mov	r7, r5
 80042c4:	42bb      	cmp	r3, r7
 80042c6:	460d      	mov	r5, r1
 80042c8:	d9f4      	bls.n	80042b4 <_printf_i+0x110>
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d10b      	bne.n	80042e6 <_printf_i+0x142>
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	07df      	lsls	r7, r3, #31
 80042d2:	d508      	bpl.n	80042e6 <_printf_i+0x142>
 80042d4:	6923      	ldr	r3, [r4, #16]
 80042d6:	6861      	ldr	r1, [r4, #4]
 80042d8:	4299      	cmp	r1, r3
 80042da:	bfde      	ittt	le
 80042dc:	2330      	movle	r3, #48	@ 0x30
 80042de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042e6:	1b92      	subs	r2, r2, r6
 80042e8:	6122      	str	r2, [r4, #16]
 80042ea:	f8cd a000 	str.w	sl, [sp]
 80042ee:	464b      	mov	r3, r9
 80042f0:	aa03      	add	r2, sp, #12
 80042f2:	4621      	mov	r1, r4
 80042f4:	4640      	mov	r0, r8
 80042f6:	f7ff fee7 	bl	80040c8 <_printf_common>
 80042fa:	3001      	adds	r0, #1
 80042fc:	d14a      	bne.n	8004394 <_printf_i+0x1f0>
 80042fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004302:	b004      	add	sp, #16
 8004304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004308:	6823      	ldr	r3, [r4, #0]
 800430a:	f043 0320 	orr.w	r3, r3, #32
 800430e:	6023      	str	r3, [r4, #0]
 8004310:	4832      	ldr	r0, [pc, #200]	@ (80043dc <_printf_i+0x238>)
 8004312:	2778      	movs	r7, #120	@ 0x78
 8004314:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	6831      	ldr	r1, [r6, #0]
 800431c:	061f      	lsls	r7, r3, #24
 800431e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004322:	d402      	bmi.n	800432a <_printf_i+0x186>
 8004324:	065f      	lsls	r7, r3, #25
 8004326:	bf48      	it	mi
 8004328:	b2ad      	uxthmi	r5, r5
 800432a:	6031      	str	r1, [r6, #0]
 800432c:	07d9      	lsls	r1, r3, #31
 800432e:	bf44      	itt	mi
 8004330:	f043 0320 	orrmi.w	r3, r3, #32
 8004334:	6023      	strmi	r3, [r4, #0]
 8004336:	b11d      	cbz	r5, 8004340 <_printf_i+0x19c>
 8004338:	2310      	movs	r3, #16
 800433a:	e7ad      	b.n	8004298 <_printf_i+0xf4>
 800433c:	4826      	ldr	r0, [pc, #152]	@ (80043d8 <_printf_i+0x234>)
 800433e:	e7e9      	b.n	8004314 <_printf_i+0x170>
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	f023 0320 	bic.w	r3, r3, #32
 8004346:	6023      	str	r3, [r4, #0]
 8004348:	e7f6      	b.n	8004338 <_printf_i+0x194>
 800434a:	4616      	mov	r6, r2
 800434c:	e7bd      	b.n	80042ca <_printf_i+0x126>
 800434e:	6833      	ldr	r3, [r6, #0]
 8004350:	6825      	ldr	r5, [r4, #0]
 8004352:	6961      	ldr	r1, [r4, #20]
 8004354:	1d18      	adds	r0, r3, #4
 8004356:	6030      	str	r0, [r6, #0]
 8004358:	062e      	lsls	r6, r5, #24
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	d501      	bpl.n	8004362 <_printf_i+0x1be>
 800435e:	6019      	str	r1, [r3, #0]
 8004360:	e002      	b.n	8004368 <_printf_i+0x1c4>
 8004362:	0668      	lsls	r0, r5, #25
 8004364:	d5fb      	bpl.n	800435e <_printf_i+0x1ba>
 8004366:	8019      	strh	r1, [r3, #0]
 8004368:	2300      	movs	r3, #0
 800436a:	6123      	str	r3, [r4, #16]
 800436c:	4616      	mov	r6, r2
 800436e:	e7bc      	b.n	80042ea <_printf_i+0x146>
 8004370:	6833      	ldr	r3, [r6, #0]
 8004372:	1d1a      	adds	r2, r3, #4
 8004374:	6032      	str	r2, [r6, #0]
 8004376:	681e      	ldr	r6, [r3, #0]
 8004378:	6862      	ldr	r2, [r4, #4]
 800437a:	2100      	movs	r1, #0
 800437c:	4630      	mov	r0, r6
 800437e:	f7fb ff57 	bl	8000230 <memchr>
 8004382:	b108      	cbz	r0, 8004388 <_printf_i+0x1e4>
 8004384:	1b80      	subs	r0, r0, r6
 8004386:	6060      	str	r0, [r4, #4]
 8004388:	6863      	ldr	r3, [r4, #4]
 800438a:	6123      	str	r3, [r4, #16]
 800438c:	2300      	movs	r3, #0
 800438e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004392:	e7aa      	b.n	80042ea <_printf_i+0x146>
 8004394:	6923      	ldr	r3, [r4, #16]
 8004396:	4632      	mov	r2, r6
 8004398:	4649      	mov	r1, r9
 800439a:	4640      	mov	r0, r8
 800439c:	47d0      	blx	sl
 800439e:	3001      	adds	r0, #1
 80043a0:	d0ad      	beq.n	80042fe <_printf_i+0x15a>
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	079b      	lsls	r3, r3, #30
 80043a6:	d413      	bmi.n	80043d0 <_printf_i+0x22c>
 80043a8:	68e0      	ldr	r0, [r4, #12]
 80043aa:	9b03      	ldr	r3, [sp, #12]
 80043ac:	4298      	cmp	r0, r3
 80043ae:	bfb8      	it	lt
 80043b0:	4618      	movlt	r0, r3
 80043b2:	e7a6      	b.n	8004302 <_printf_i+0x15e>
 80043b4:	2301      	movs	r3, #1
 80043b6:	4632      	mov	r2, r6
 80043b8:	4649      	mov	r1, r9
 80043ba:	4640      	mov	r0, r8
 80043bc:	47d0      	blx	sl
 80043be:	3001      	adds	r0, #1
 80043c0:	d09d      	beq.n	80042fe <_printf_i+0x15a>
 80043c2:	3501      	adds	r5, #1
 80043c4:	68e3      	ldr	r3, [r4, #12]
 80043c6:	9903      	ldr	r1, [sp, #12]
 80043c8:	1a5b      	subs	r3, r3, r1
 80043ca:	42ab      	cmp	r3, r5
 80043cc:	dcf2      	bgt.n	80043b4 <_printf_i+0x210>
 80043ce:	e7eb      	b.n	80043a8 <_printf_i+0x204>
 80043d0:	2500      	movs	r5, #0
 80043d2:	f104 0619 	add.w	r6, r4, #25
 80043d6:	e7f5      	b.n	80043c4 <_printf_i+0x220>
 80043d8:	08004559 	.word	0x08004559
 80043dc:	0800456a 	.word	0x0800456a

080043e0 <memmove>:
 80043e0:	4288      	cmp	r0, r1
 80043e2:	b510      	push	{r4, lr}
 80043e4:	eb01 0402 	add.w	r4, r1, r2
 80043e8:	d902      	bls.n	80043f0 <memmove+0x10>
 80043ea:	4284      	cmp	r4, r0
 80043ec:	4623      	mov	r3, r4
 80043ee:	d807      	bhi.n	8004400 <memmove+0x20>
 80043f0:	1e43      	subs	r3, r0, #1
 80043f2:	42a1      	cmp	r1, r4
 80043f4:	d008      	beq.n	8004408 <memmove+0x28>
 80043f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043fe:	e7f8      	b.n	80043f2 <memmove+0x12>
 8004400:	4402      	add	r2, r0
 8004402:	4601      	mov	r1, r0
 8004404:	428a      	cmp	r2, r1
 8004406:	d100      	bne.n	800440a <memmove+0x2a>
 8004408:	bd10      	pop	{r4, pc}
 800440a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800440e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004412:	e7f7      	b.n	8004404 <memmove+0x24>

08004414 <_sbrk_r>:
 8004414:	b538      	push	{r3, r4, r5, lr}
 8004416:	4d06      	ldr	r5, [pc, #24]	@ (8004430 <_sbrk_r+0x1c>)
 8004418:	2300      	movs	r3, #0
 800441a:	4604      	mov	r4, r0
 800441c:	4608      	mov	r0, r1
 800441e:	602b      	str	r3, [r5, #0]
 8004420:	f7fc fbe4 	bl	8000bec <_sbrk>
 8004424:	1c43      	adds	r3, r0, #1
 8004426:	d102      	bne.n	800442e <_sbrk_r+0x1a>
 8004428:	682b      	ldr	r3, [r5, #0]
 800442a:	b103      	cbz	r3, 800442e <_sbrk_r+0x1a>
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	bd38      	pop	{r3, r4, r5, pc}
 8004430:	20000314 	.word	0x20000314

08004434 <memcpy>:
 8004434:	440a      	add	r2, r1
 8004436:	4291      	cmp	r1, r2
 8004438:	f100 33ff 	add.w	r3, r0, #4294967295
 800443c:	d100      	bne.n	8004440 <memcpy+0xc>
 800443e:	4770      	bx	lr
 8004440:	b510      	push	{r4, lr}
 8004442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800444a:	4291      	cmp	r1, r2
 800444c:	d1f9      	bne.n	8004442 <memcpy+0xe>
 800444e:	bd10      	pop	{r4, pc}

08004450 <_realloc_r>:
 8004450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004454:	4607      	mov	r7, r0
 8004456:	4614      	mov	r4, r2
 8004458:	460d      	mov	r5, r1
 800445a:	b921      	cbnz	r1, 8004466 <_realloc_r+0x16>
 800445c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004460:	4611      	mov	r1, r2
 8004462:	f7ff bc4d 	b.w	8003d00 <_malloc_r>
 8004466:	b92a      	cbnz	r2, 8004474 <_realloc_r+0x24>
 8004468:	f7ff fbde 	bl	8003c28 <_free_r>
 800446c:	4625      	mov	r5, r4
 800446e:	4628      	mov	r0, r5
 8004470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004474:	f000 f81a 	bl	80044ac <_malloc_usable_size_r>
 8004478:	4284      	cmp	r4, r0
 800447a:	4606      	mov	r6, r0
 800447c:	d802      	bhi.n	8004484 <_realloc_r+0x34>
 800447e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004482:	d8f4      	bhi.n	800446e <_realloc_r+0x1e>
 8004484:	4621      	mov	r1, r4
 8004486:	4638      	mov	r0, r7
 8004488:	f7ff fc3a 	bl	8003d00 <_malloc_r>
 800448c:	4680      	mov	r8, r0
 800448e:	b908      	cbnz	r0, 8004494 <_realloc_r+0x44>
 8004490:	4645      	mov	r5, r8
 8004492:	e7ec      	b.n	800446e <_realloc_r+0x1e>
 8004494:	42b4      	cmp	r4, r6
 8004496:	4622      	mov	r2, r4
 8004498:	4629      	mov	r1, r5
 800449a:	bf28      	it	cs
 800449c:	4632      	movcs	r2, r6
 800449e:	f7ff ffc9 	bl	8004434 <memcpy>
 80044a2:	4629      	mov	r1, r5
 80044a4:	4638      	mov	r0, r7
 80044a6:	f7ff fbbf 	bl	8003c28 <_free_r>
 80044aa:	e7f1      	b.n	8004490 <_realloc_r+0x40>

080044ac <_malloc_usable_size_r>:
 80044ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044b0:	1f18      	subs	r0, r3, #4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	bfbc      	itt	lt
 80044b6:	580b      	ldrlt	r3, [r1, r0]
 80044b8:	18c0      	addlt	r0, r0, r3
 80044ba:	4770      	bx	lr

080044bc <_init>:
 80044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044be:	bf00      	nop
 80044c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c2:	bc08      	pop	{r3}
 80044c4:	469e      	mov	lr, r3
 80044c6:	4770      	bx	lr

080044c8 <_fini>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	bf00      	nop
 80044cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ce:	bc08      	pop	{r3}
 80044d0:	469e      	mov	lr, r3
 80044d2:	4770      	bx	lr
